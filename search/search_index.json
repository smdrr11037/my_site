{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u8fd9\u91cc\u662f\u751f\u547d\u7684\u8089\u8089\u7684\u7b14\u8bb0\u672c \u672c\u7f51\u7ad9\u6bd4\u8f83\u7b80\u964b \u4e0d\u6307\u671b\u6709\u4eba\u6765\u770b\uff08 \u5148\u7528\u4e00\u4e2a\u9ed8\u8ba4\u7684\u4e3b\u9898 \u5b66\u597d\u524d\u7aef\u540e\u4e00\u5b9a\u8981\u5efa\u4e00\u4e2a\u6f02\u4eae\u7684\u4e2a\u4eba\u4e3b\u9875 QQ\uff1a1498646901","title":"Home"},{"location":"#welcome","text":"\u8fd9\u91cc\u662f\u751f\u547d\u7684\u8089\u8089\u7684\u7b14\u8bb0\u672c \u672c\u7f51\u7ad9\u6bd4\u8f83\u7b80\u964b \u4e0d\u6307\u671b\u6709\u4eba\u6765\u770b\uff08 \u5148\u7528\u4e00\u4e2a\u9ed8\u8ba4\u7684\u4e3b\u9898 \u5b66\u597d\u524d\u7aef\u540e\u4e00\u5b9a\u8981\u5efa\u4e00\u4e2a\u6f02\u4eae\u7684\u4e2a\u4eba\u4e3b\u9875 QQ\uff1a1498646901","title":"Welcome"},{"location":"about/","text":"","title":"About"},{"location":"memoire/","text":"MkDocs mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u5907\u5fd8"},{"location":"memoire/#mkdocs","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"MkDocs"},{"location":"ads/ads_part_1/","text":"Preparation Before Class \u6559\u6750 \u6570\u636e\u7ed3\u6784\u6559\u6750 introduction to algorithms algorithm design \u6570\u636e\u7ed3\u6784\u5b66\u4e60\u4e0e\u5b9e\u9a8c\u6307\u5bfc \u8bc4\u5206 \u4f5c\u4e1a\uff1a10% Discussion\uff1a10% Research Topic\uff1a10% \u671f\u4e2d\uff1a10%\uff08\u53ef\u88ab\u671f\u672b\u8986\u76d6\uff09 \u671f\u672b\uff1a40% AVL Trees \u76ee\u6807\uff1a\u52a0\u901f\u67e5\u627e \u65b9\u6cd5\uff1a\u67e5\u627e\u6811 O(height) \u9012\u589e/\u9012\u51cf\u5e8f\u5217\u9000\u5316\u6210\u94fe \u6700\u597d\u60c5\u51b5\uff08\u6811\u6700\u77ee\uff09\uff1a\u6240\u6709\u5b50\u6811\u9ad8\u5ea6\u76f8\u7b49\u2014\u2014\u592a\u82db\u523b AVL\u6811\u5b9a\u4e49 \u7a7a\u6811\u5e73\u8861 \u975e\u7a7a\u6811\u5e73\u8861\u5f53\u4e14\u4ec5\u5f53 \u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u90fd\u5e73\u8861 \u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u5c0f\u4e8e\u7b49\u4e8e1 \u5e73\u8861\u56e0\u5b50BF\uff08node\uff09=\u5de6\u5b50\u6811\u9ad8\u5ea6-\u53f3\u5b50\u6811\u9ad8\u5ea6 AVL\u53ea\u80fd\u53d6-1\uff0c0\uff0c1 \u672c\u8bfe\u4e2d\u5b9a\u4e49\u7a7a\u6811\u9ad8\u5ea6\u4e3a-1 \u51e0\u4e2a\u4f8b\u5b50\uff1a \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6027\u8d28\u8f83\u597d\u7684\u6811 \u5982\u4f55\u5f97\u5230AVL\u6811 \u6811\u7684\u65cb\u8f6c B\u9ad8\u5ea6\u589e\u52a01\uff0cA\u9ad8\u5ea6\u51cf\u5c111\u3002\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \uff0c\u4ee3\u7801\u5982\u4e0b typedef struct Node *Tree; struct Node { ElementType Element; Tree Left; Tree Right; } A->Left=B->Right; B->Right=A; return B;//\u65b0\u6839 AVL\u6811\u7684\u63d2\u5165 \uff1a \u6bcf\u63d2\u5165\u4e00\u4e2a\u65b0\u7ed3\u70b9\uff0c\u8bb0\u5f55\uff08\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\uff09\u9ad8\u5ea6\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u5e73\u8861\u56e0\u5b50\uff0c\u4e00\u4f46\u4e0d\u7b26\u5408\u6761\u4ef6 \u56e0\u5b50\u5728\u540c\u4e00\u4e2a\u65b9\u5411\u53d8\u5316 -2\uff1a\u5de6\u65cb\uff08RR Rotation\u2014\u2014\u6307\u4ece\u5931\u8861\u8282\u70b9\u5f00\u59cb\u5411\u53f3\u63d2\u4e24\u6b21\u7684\u60c5\u51b5\uff09 2\uff1a \u53f3\u65cb\uff08LL Rotation\uff0c\u4e0eRR\u5bf9\u79f0\uff09 \u4e0d\u540c\u65b9\u5411\uff1a\u628a\u6811\u9ad8\u9ad8\u65b9\u5411\u7684\u5b59\u5b50\u8f6c\u4e0a\u6765\uff0c\u8f6c\u4e24\u6b21\uff08\u4e24\u79cd\u5bf9\u79f0\u60c5\u51b5\uff0cLR\u548cRL\uff09 \u5b9e\u9645\u4e0a\uff0c\u6839\u636eAVL\u6811\u7684\u826f\u597d\u5b9a\u4e49\uff0c\u5728\u6bcf\u6b21\u63d2\u5165\u540e\u53ea\u9700\u8981\u4e00\u6b21\u64cd\u4f5c\uff08RR/LR...\uff09\u5c31\u80fd\u4f7f\u5176\u518d\u6b21\u5e73\u8861\u3002 AVL\u6811\u7684\u5220\u9664 \uff1a \u7528\u5220\u9664\u8282\u70b9\u5de6\u5b50\u6811\u7684\u6700\u5927\u8282\u70b9/\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8282\u70b9\u66ff\u6362\u4ed6\uff08\u4e0eBST\u76f8\u540c\uff09\uff0c\u518d\u5220\u9664\u3002 \u4ece\u5220\u9664\u8282\u70b9\u7684\u7236\u8282\u70b9\u5f00\u59cb\uff08\u66ff\u6362\u540e\uff09\uff0c\u8bb0\u5f55\uff08\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\uff09\u9ad8\u5ea6\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u5e73\u8861\u56e0\u5b50\uff0c\u4e00\u4f46\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u5c31\u7528insert\u4e2d\u7684\u65b9\u6cd5\u8c03\u6574\u3002\u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u591a\u6b21\u8c03\u6574\u3002 \u590d\u6742\u5ea6\u5206\u6790 \u6811\u9ad8\u7684\u6e10\u8fdb\u4e0a\u754c \\(n_h\\) \u2014\u2014h\u9ad8\u5ea6\u7684\u6811\u9700\u8981\u7684\u6700\u5c0f\u7ed3\u70b9\u6570 \u9ad8\u5ea6\u4e3ah\u7684\u6811\uff08\u6240\u9700\u8282\u70b9\u6700\u5c11\uff09\u5982\u4e0b \u4e0e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7c7b\u4f3c\uff1a \\(F_0=0,F_1=1,F_n=F_{n-1}+F_{n-2}\\) \u800c \\(F_n\\approx\\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^i\\) \u6240\u4ee5 \\(n_h =F_{n+3}-1\\) \\(h=O(lnn)\\) Splay Trees \u76ee\u6807\uff1aM\u6b21\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(MlogN)\\) \uff0c\u5373\u6bcf\u4e2a\u64cd\u4f5c\u5e73\u5747\u590d\u6742\u5ea6\u4e3a \\(O(logN)\\) \u57fa\u672c\u601d\u60f3\uff1a\u6bcf\u6b21\u67e5\u8be2/\u63d2\u5165\uff0c\u5c06\u8be5\u5143\u7d20\u63d0\u5230\u6839\u8282\u70b9 \u6784\u9020\u8fc7\u7a0b \u5982\u679c\u67e5\u8be2\u8282\u70b9\u7684\u7236\u4eb2\u662f\u6839\u2014\u2014\u65cb\u8f6c\u67e5\u8be2\u8282\u70b9 \u5982\u679c\u4e0d\u662f\uff0c\u5219\u6709\u7236\u4eb2\u8282\u70b9\uff08P\uff09\u548c\u7956\u7236\u8282\u70b9\uff08G\uff09 zig-zag\uff08z\u5b57\u5f62\uff09\uff1a\u8f6c\u4e24\u6b21\u5f53\u524d\u8282\u70b9 zig-zig\uff08\u4e00\u4e2a\u65b9\u5411\uff09\uff1a\u5148\u8f6c\u7236\u8282\u70b9\uff0c\u518d\u8f6c\u5f53\u524d\u8282\u70b9 \u5220\u9664\u64cd\u4f5c \u627e\u5230\u8981\u5220\u9664\u7684\u5143\u7d20X\uff08\u8fd9\u6837\u8ba9\u5176\u5728\u6839\u8282\u70b9\uff09 \u5220\u6389X\uff0c\u5f97\u5230\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811 \u627e\u5230\u5de6\u5b50\u6811\u6700\u5927\u7684\u8282\u70b9\uff0c\u5c06\u5176\u63a8\u5230\u6839\u8282\u70b9 \u8fd9\u6837\u5c31\u80fd\u76f4\u63a5\u5c06\u53f3\u5b50\u6811\u63a5\u5230\u5de6\u5b50\u6811\u7684\u53f3\u8fb9 Amortized Analysis(Three normal methods) An amortized analysis guarantees the average performance of each operation in the worst case. Splay\u6811\u7684\u76ee\u6807\uff1aM\u6b21\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(MlogN)\\) \u2014\u2014\u5747\u644a\u65f6\u95f4\u4e0a\u754c( Amortized time bound ) worst-case bound >= amortized time bound >= average-case bound \u524d\u4e24\u79cd\u4e0e\u6570\u636e\u5206\u5e03\u65e0\u5173 \u805a\u5408\u5206\u6790 \u5bf9\u4e8e\u6240\u6709 n\uff0cn \u4e2a\u8fd0\u7b97\u5e8f\u5217\u603b\u5171\u9700\u8981\u6700\u574f\u60c5\u51b5\u65f6\u95f4\uff08determine an upper bound\uff09 T\uff08n\uff09\u3002\u56e0\u6b64\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7684\u5e73\u5747\u6210\u672c\u6216\u644a\u9500\u6210\u672c\u4e3a T\uff08n\uff09/n\u3002 \u4ee5\u6808\u4e3a\u4f8b\uff1a push\uff1a \\(O(1)\\) \uff0c pop\uff1a \\(O(1)\\) \uff0c multipop\uff08\u4e00\u6b21pop\u51fan\u4e2a\uff09\uff1a \\(min\\{k\uff0cn\\}=O(n)\\) \uff0c\u5176\u4e2dk\u662f\u5f53\u524d\u6808\u4e2d\u5143\u7d20\u6570 \u6240\u4ee5n\u6b21\u64cd\u4f5c\u4e0a\u754c\uff1a \\(O(n^2)\\) \u66f4\u7cbe\u786e\uff1a\u6808\u4e2d\u5143\u7d20\u6570\u80af\u5b9a\u5c0f\u4e8en\uff0cpush\u8fdb\u7684\u5143\u7d20\u53ea\u80fdpop\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) $$T_{amortized}= O( n )/n = O(1) $$ \u6838\u7b97\u6cd5 \u4ee5\u5356\u6c7d\u6c34\u4e3a\u4f8b\uff1a a\u5356\u4e00\u74f6\u6c7d\u6c34 3\u5143 b\u7528 5\u5143 \u4e70\u6c7d\u6c34\uff0c\u5b58\u4e24\u5143\uff08credits\uff09\u5230a\u90a3\uff0c\u4e0b\u6b21\u4e70\u6c7d\u6c34\u53ef\u4ee5\u7528\u3002\u6b64\u65f6actual cost\uff1a3\u5143 \\(amortized\\ cost = actual\\ cost + credits\\) \u4e70n\u74f6\u6c7d\u6c34\uff0cbound\uff1a $$ amortized\\ cost \\geq actual\\ cost(\u53733n\u5143\uff0c\u56e0\u4e3a\u4e0d\u8d4a\u8d26) $$ \u6ce8\u610f\u4fdd\u8bc1\u6700\u7ec8\u4fe1\u7528\u4e0d\u5c0f\u4e8e0 \u56de\u5230\u6808\u64cd\u4f5c\uff1a \u5b9e\u9645\u4ee3\u4ef7\uff1apush=1, pop=1, multipop=min(sizeof(s),k) \u5747\u644a\u4ee3\u4ef7\uff1apush = 2(\u63d0\u524d\u628apop\u7684\u4ee3\u4ef7\u4ed8\u6389\uff0c\u5373\u4f7f\u4e0dpop\u8be5\u5143\u7d20), pop = multipop = 0\uff0c\u8fd9\u6837\u6240\u6709\u4ee3\u4ef7\u90fd\u662f\u5e38\u6570 Credits\uff1apush = +1, pop = -1, multipop = -min(sizeof(s),k) multipop\u65f6\u7684\u4fe1\u7528\u4e3asizeof(s)\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4fe1\u7528\u4e3a\u8d1f\u7684\u60c5\u51b5 n\u6b21\u64cd\u4f5c\u6700\u5927\u7684amortized cost\u4e3a2n\uff0c \\(T_{amortized}= O( n )/n = O(1)\\) \u52bf\u80fd\u6cd5 \\(\\Phi(D_i)\\) \uff1a\u52bf\u80fd\u51fd\u6570\uff0c\u8868\u793a \\(D_i\\) \u72b6\u6001\u7684\u52bf\u80fd \\(Credits =\\Phi(D_i)-\\Phi(D_{i-1})\\) ; \u5408\u6cd5\u7684\u52bf\u80fd\u51fd\u6570\uff1a\u4fdd\u8bc1 \\(\\Phi(D_{0})\\) \u662f\u6700\u5c0f\u7684\uff0c\u8fd9\u6837\u603b\u7684Credits \\(=\\Phi(D_n)-\\Phi(D_{0})\\) >0\uff0c\u5747\u644a\u4ee3\u4ef7\u662f\u5b9e\u9645\u4ee3\u4ef7\u7684\u4e0a\u754c\u3002\u4e0b\u9762\u516c\u5f0f\u4e2d \\(\\hat{c_i}\\) \u662f\u5747\u644a\u4ee3\u4ef7\uff0c \\(c_i\\) \u662f\u5b9e\u9645\u4ee3\u4ef7 $$ \\sum_{i=1}^n\\hat{c_i}=\\sum_{i=1}^n(c_i+\\Phi(D_i)-\\Phi(D_{i-1}))=\\sum_{i=1}^nc_i+\\Phi(D_n)-\\Phi(D_{0}) $$ \u518d\u6b21\u56de\u5230\u6808 \u52bf\u80fd\u51fd\u6570 \\(\\Phi(D_i)=D_i\\) \u65f6\u523b\u6808\u4e2d\u7684\u5143\u7d20\u6570 \u8ba1\u7b97\u5747\u644a\u4ee3\u4ef7\uff1a push\uff1a \\(\\hat{c_i}=c_i+\\Phi(D_i)-\\Phi(D_{i-1})=1+1=2\\) multipop\uff1a \\(\\hat{c_i}=c_i+\\Phi(D_i)-\\Phi(D_{i-1})=k'-k'=0\\) \u6bcf\u4e2a\u64cd\u4f5c\u7684\u4ee3\u4ef7\u90fd\u662fO(1)\u2014\u2014\u5747\u644a\u4ee3\u4ef7\u662fO(1) \u5e94\u7528\uff1a\u5206\u6790splay tree\u7684\u5747\u644a\u4ee3\u4ef7\u2014\u2014Amortized Analysis Using Potential Methods: \u6811\u7684\u5e38\u89c1\u52bf\u80fd\u51fd\u6570\uff1a\u8282\u70b9\u4e2a\u6570\u3001\u6811\u9ad8\u00b7\u00b7\u00b7 (\u56e0\u4e3a\u62a5\u544a\u7528\u82f1\u6587\u5199\u7684\u6240\u4ee5\u4e0b\u9762\u662f\u82f1\u6587) In tree's amortized analysis, we often use the height of tree or the amount of nodes as the potential function, which satisfy \\(\\Phi(0)\\) is the minimum. To make the potential function increasing slowly, we choose \\(\\Phi(T)=\\sum_{i\\in T}S(i)\\) , where S(i) is the number of descendants of i (i included). \\(\\Phi(T)\\) is also called rank of T, notion \\(R(T)\\) Lemma: If \\(a+b\\leq c\\) then \\(loga+logb\\leq 2logc-2\\) Same as the part of algorithm analysis, there are three situations to discuss according to the picture. If the \"X\" to be pushed is one of the childs of root, we only need one rotation. Except X and P, the \"S(i)\" didn't change, and the rotation cost \\(c_i\\) is 1. So the amortized cost $$ \\hat{c_i}=1+R_2(X)-R_1(X)+R_2(P)-R_1(P) $$ $$ \\leq 1+R_2(X)-R_1(X) $$ (shown below that \\(R_2(P)<R_1(P)\\) ) In the zig-zag case, we need two rotation, costing 2. We note that \\(R_2(X) = R_1(G) = log(the\\ number\\ of\\ nodes\\ in\\ T)\\) . So the amortized cost $$ \\hat{c_i}=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G) $$ $$ =2-R_1(X)+R_2(P)-R_1(P)+R_2(G) $$ $$ \\leq 2(R_2(X)-R_1(X)) $$ (shown below that nodes: \\(P_2+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_2(P)+R_2(G)\\leq 2R_2(X)+2\\) ) * In the zig-zig case, we need two rotation, too, costing 2. We also note that \\(R_2(X) = R_1(G)\\) . So the amortized cost $$ \\hat{c_i}=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G) $$ $$ =2-R_1(X)+R_2(P)-R_1(P)+R_2(G) $$ $$ =2-2R_1(X)+R_2(P)-R_1(P)+R_2(G)+R_1(X) $$ $$ \\leq 3(R_2(X)-R_1(X)) $$ (shown below that nodes: \\(X_1+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_1(X)+R_2(G)\\leq 2R_2(X)+2\\) ) When splay, the former \\(3R_2(X)\\) could be eliminated by the latter item's \\(-3R_1(X)\\) . After sum of all the items, we get: $$ \\hat{c_i} \\leq 1+3(R_2(X)-R_1(X))=O(logN) $$ \u7b97\u6cd5\u5bfc\u8bba\u7684\u644a\u8fd8\u5206\u6790\u4f8b\u5b50 Incrementing a binary counter(k bit in total) \u6bcf\u6b21\u4ece\u4f4e\u4f4d\u5f80\u9ad8\u4f4d\u7ffb\u8f6cbit\uff0c\u9047\u52301\u7ee7\u7eed\u7ffb\u8f6c\uff0c\u9047\u52300\u7ffb\u8f6c\u5b8c\u540e\u505c\u4e0b\u6765 worst case: \u6bcf\u6b21\u6700\u591a\u8f6ck\u4e2abits\u2014\u2014011...1=>100...0 \u805a\u5408\u5206\u6790\uff1a A[0]\u6bcf\u6b21\u90fd\u6539\u53d8 A[1]\u6bcf\u4e24\u6b21\u6539\u53d8\u4e00\u6b21 \u5047\u8bbe\u8ba1\u6570n\u6b21\uff0c\u5219A[0]\u6539\u53d8 \\(n\\) \u6b21\uff0cA[1]\u6539\u53d8 \\(\\lfloor\\frac{n}{2}\\rfloor\\) \u6b21...A[i]\u6539\u53d8 \\(\\lfloor\\frac{n}{2^i}\\rfloor\\) \u6b21 \u56e0\u6b64\u603b\u5171\u7684\u64cd\u4f5c\uff08\u7ffb\u8f6cbit\uff09\u7684\u6b21\u6570\u4e3a \\[ \\sum^{k-1}_{i=0}\\lfloor\\frac{n}{2^i}\\rfloor<n\\sum^{\\infty}_{i=0}\\frac{1}{2^i}=2n \\] \u56e0\u6b64\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\u4e3aO(n)\uff0c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)/n=O(1). \u6838\u7b97\u6cd5\uff1a \u5b9e\u9645\u4ee3\u4ef7\uff1a1\u53d8\u4e3a0 = 1, 0\u53d8\u4e3a1 = 1 \u5747\u644a\u4ee3\u4ef7\uff1a0\u53d8\u4e3a1 = 2(\u63d0\u524d\u628a1\u53d8\u4e3a0\u7684\u4ee3\u4ef7\u4ed8\u6389), 1\u53d8\u4e3a0 = 0 \u4ece0\u5f00\u59cb\u8ba1\u6570\uff0c\u80af\u5b9a\u5148\u5c060\u53d8\u4e3a1\u624d\u80fd\u53d8\u56de\u53bb\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4fe1\u7528\u4e3a\u8d1f\u7684\u60c5\u51b5 \u6211\u4eec\u77e5\u9053\u6bcf\u6b21\u6700\u591a\u53ea\u6709\u4e00\u4e2a0\u53d8\u62101 \u56e0\u6b64\u5747\u644a\u4ee3\u4ef7\u4e3aO(1) \u52bf\u80fd\u6cd5\uff1a \u9009\u53d6\u52bf\u80fd\u51fd\u6570\uff1a\u5f53\u524d1\u7684\u6570\u76ee\uff0c\u8bb0\u4e3a \\(b_i\\) Red-black Tree tips: \u8bbf\u95ee\u7a7a\u6307\u9488\u4f1a Sigementation fault\uff0c\uff0c\u53ef\u4ee5\u6307\u5411\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff08\u54e8\u5175\uff09 \u76ee\u6807\uff1a\u6bcf\u6b21\u641c\u7d22\u90fd \\((logn)\\) 1. \u7ea2\u9ed1\u6811\u5b9a\u4e49 \u7ea2\u9ed1\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u7ea2\u8272\u7684\uff0c\u8981\u4e48\u662f\u9ed1\u8272\u7684 \u6839\u8282\u70b9\u662f\u9ed1\u8272\u7684 \u6bcf\u4e2a\u53f6\u5b50\u90fd\u662f\u54e8\u5175\uff08NIL\uff09\uff0c\u54e8\u5175\u662f\u9ed1\u8272\u7684 \u5982\u679c\u8282\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u5b69\u5b50\u90fd\u662f\u9ed1\u8272\u7684 \u6bcf\u4e2a\u8282\u70b9\u5230\uff08\u80fd\u5230\u8fbe\u7684\uff09\u6240\u6709\u53f6\u5b50\u7684\u7b80\u5355\u8def\u5f84\uff0c\u7ecf\u8fc7\u7684\u9ed1\u8272\u8282\u70b9\u6570\u76f8\u540c black height: \u4e0d\u7b97\u81ea\u5df1\u3001\u4e0d\u7b97\u54e8\u5175\uff0c\u7ecf\u8fc7\u7684\u9ed1\u8272\u8282\u70b9\u6570 \u5f15\u7406\uff1a \u8bc1\u660e\uff1a 2. \u7ea2\u9ed1\u6811\u6784\u9020 \u6784\u9020\u60f3\u6cd5\uff1a\u63d2\u5165\u65b0\u8282\u70b9\u4e14\u67d3\u6210\u7ea2\u8272\u2014\u2014\u4fdd\u6301\u6027\u8d285\uff0c\u901a\u8fc7\u8fed\u4ee3\u53d8\u6362\u4fdd\u6301\u5176\u4ed6\u6027\u8d28 Insert (\u4e0d\u6ee1\u8db3\u6027\u8d28\u6709\u4e09\u79cd\u60c5\u51b5)\uff1a case 1\uff1a\u7ea2\u53d4\u53d4\uff08\u6240\u4ee5\u7237\u7237\u80af\u5b9a\u9ed1\u8272\uff09\u2014\u2014\u5c06\u7238\u7238\u548c\u53d4\u53d4\u67d3\u9ed1\uff0c\u7237\u7237\u67d3\u7ea2 case 2\uff1a\u8fd1\u53d4\u53d4\u9ed1\u2014\u2014\u65cb\u8f6c\u5230case3 case 3\uff1a\u8fdc\u53d4\u53d4\u9ed1\u2014\u2014\u7236\u4eb2\u67d3\u9ed1\uff0c\u65cb\u8f6c\u7237\u7237 \u8fd9\u6837\u4fdd\u6301\u4e86\u6bcf\u6b21\u53ea\u6709\u4e00\u6761\u89c4\u5219\u88ab\u7834\u574f \u590d\u6742\u5ea6\uff1a\u6700\u574f\u60c5\u51b5\u2014\u2014\u4e00\u76f4case 1 $$ T = O(h) = O(logn) $$ Delete \u88ab\u5220\u8282\u70b9\u662fleaf node: \u7236\u4eb2\u6307\u5411NIL \u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff1a\u7528\u513f\u5b50\u66ff\u4ee3\u4ed6 \u6709\u4e24\u4e2a\u513f\u5b50\uff1a\u7528\u5de6\u5b50\u6811\u6700\u5927\u7684/\u53f3\u5b50\u6811\u6700\u5c0f\u7684\u66ff\u4ee3\u4ed6\u3002 \u6b64\u65f6 B+ Tree 1. \u5b9a\u4e49 A B+ tree of order M : \u6839\u8282\u70b9\u8981\u4e48\u6ca1\u6709\u5b69\u5b50\uff0c\u8981\u4e48\u6709 \\([2,M]\\) \u4e2a\u5b69\u5b50 \u9664\u6839\u4e4b\u5916\u7684\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u6709 \\([\\lceil M/2\\rceil,M]\\) \u4e2a\u5b69\u5b50 2. \u63d2\u5165\u8fc7\u7a0b \u63d2\u5165=>\u82e5\u8d85\u9650=>\u5206\u88c2 \u4fdd\u8bc1\u6709\u5e8f/\u627e\u5230\u4f4d\u7f6e\uff1a\u904d\u5386\uff08O(n)\uff09 \u5982\u679c\u63a8\u5230\u524d\u9762\u2014\u2014\u53ef\u80fdO(n)\uff0c\u56e0\u6b64\u5b9e\u9645\u64cd\u4f5c\u4e0d\u8fd9\u4e48\u505a Btree Insert(ElementType X,Btree T) { Seach from root to leaf } choose M: best 3 or 4 B+\u6811\u7684\u597d\u5904\uff1a\u76f8\u8fd1\u7684\u5143\u7d20\u79bb\u5f97\u8fd1\uff0c\u78c1\u76d8\u53cb\u597d 3. \u5220\u9664\u8fc7\u7a0b Inverted File Index \u5e94\u7528\uff1a\u4fe1\u606f\u68c0\u7d22\uff0c\u641c\u7d22\u5f15\u64ce Solution 2: \u77e9\u9635\u5b58\u50a8 \u78c1\u5e26\u5047\u8bbe\uff1a\u8bcd\u548c\u8bcd\u6ca1\u6709\u987a\u5e8f Solution 3: Inverted File Index\uff08\u53c2\u8003\u56fe\u8bba\uff0c\u5c06\u77e9\u9635\u7528\u90bb\u63a5\u8868\u8868\u793a\uff09 Doc Text 1 Gold silver truck \u4f18\u5316 \u5bf9term\u8fdb\u884c\u5904\u7406 \u53ea\u7559\u4e0b\u8bcd\u6839 \u505c\u7528\u8bcd\uff08stop words\uff09\u8fc7\u6ee4\uff1athe\u3001a\u3001what...\u2014\u2014\u6210\u672c\u5927\uff0c\u6536\u83b7\u4f4e \u83b7\u5f97term\u540e \u54c8\u5e0c \u641c\u7d22\u6811 \u5185\u5b58\u4f18\u5316 \u5185\u5b58\u4e0d\u591f\u65f6\uff0c\u628a\u5199\u597d\u7684\u8bcd\u5178\u653e\u5165disk \u91ca\u653e\u5185\u5b58\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bcd\u5178 \u5f52\u5e76\u6392\u5e8f disk\u4e0d\u591f\u65f6 Solution 1\uff1a\u5c06\u78c1\u76d8\u6309\u5b57\u6bcd\u5e8f\u653e\u5728\u4e0d\u540c\u7535\u8111\u91cc Solution 2\uff1aDocument-Partitioned index Dynamic indexing \u7269\u7406\u5220\u9664\u4ee3\u4ef7\u6602\u8d35\u2014\u2014\u505a\u65b0\u65e7\u6807\u8bb0 Main list\u548cnew list \u8bc4\u4f30 precision&recall","title":"Part 1"},{"location":"ads/ads_part_1/#preparation-before-class","text":"\u6559\u6750 \u6570\u636e\u7ed3\u6784\u6559\u6750 introduction to algorithms algorithm design \u6570\u636e\u7ed3\u6784\u5b66\u4e60\u4e0e\u5b9e\u9a8c\u6307\u5bfc \u8bc4\u5206 \u4f5c\u4e1a\uff1a10% Discussion\uff1a10% Research Topic\uff1a10% \u671f\u4e2d\uff1a10%\uff08\u53ef\u88ab\u671f\u672b\u8986\u76d6\uff09 \u671f\u672b\uff1a40%","title":"Preparation Before Class"},{"location":"ads/ads_part_1/#avl-trees","text":"\u76ee\u6807\uff1a\u52a0\u901f\u67e5\u627e \u65b9\u6cd5\uff1a\u67e5\u627e\u6811 O(height) \u9012\u589e/\u9012\u51cf\u5e8f\u5217\u9000\u5316\u6210\u94fe \u6700\u597d\u60c5\u51b5\uff08\u6811\u6700\u77ee\uff09\uff1a\u6240\u6709\u5b50\u6811\u9ad8\u5ea6\u76f8\u7b49\u2014\u2014\u592a\u82db\u523b","title":"AVL Trees"},{"location":"ads/ads_part_1/#avl","text":"\u7a7a\u6811\u5e73\u8861 \u975e\u7a7a\u6811\u5e73\u8861\u5f53\u4e14\u4ec5\u5f53 \u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u90fd\u5e73\u8861 \u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u5c0f\u4e8e\u7b49\u4e8e1 \u5e73\u8861\u56e0\u5b50BF\uff08node\uff09=\u5de6\u5b50\u6811\u9ad8\u5ea6-\u53f3\u5b50\u6811\u9ad8\u5ea6 AVL\u53ea\u80fd\u53d6-1\uff0c0\uff0c1 \u672c\u8bfe\u4e2d\u5b9a\u4e49\u7a7a\u6811\u9ad8\u5ea6\u4e3a-1 \u51e0\u4e2a\u4f8b\u5b50\uff1a \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6027\u8d28\u8f83\u597d\u7684\u6811","title":"AVL\u6811\u5b9a\u4e49"},{"location":"ads/ads_part_1/#avl_1","text":"\u6811\u7684\u65cb\u8f6c B\u9ad8\u5ea6\u589e\u52a01\uff0cA\u9ad8\u5ea6\u51cf\u5c111\u3002\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \uff0c\u4ee3\u7801\u5982\u4e0b typedef struct Node *Tree; struct Node { ElementType Element; Tree Left; Tree Right; } A->Left=B->Right; B->Right=A; return B;//\u65b0\u6839 AVL\u6811\u7684\u63d2\u5165 \uff1a \u6bcf\u63d2\u5165\u4e00\u4e2a\u65b0\u7ed3\u70b9\uff0c\u8bb0\u5f55\uff08\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\uff09\u9ad8\u5ea6\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u5e73\u8861\u56e0\u5b50\uff0c\u4e00\u4f46\u4e0d\u7b26\u5408\u6761\u4ef6 \u56e0\u5b50\u5728\u540c\u4e00\u4e2a\u65b9\u5411\u53d8\u5316 -2\uff1a\u5de6\u65cb\uff08RR Rotation\u2014\u2014\u6307\u4ece\u5931\u8861\u8282\u70b9\u5f00\u59cb\u5411\u53f3\u63d2\u4e24\u6b21\u7684\u60c5\u51b5\uff09 2\uff1a \u53f3\u65cb\uff08LL Rotation\uff0c\u4e0eRR\u5bf9\u79f0\uff09 \u4e0d\u540c\u65b9\u5411\uff1a\u628a\u6811\u9ad8\u9ad8\u65b9\u5411\u7684\u5b59\u5b50\u8f6c\u4e0a\u6765\uff0c\u8f6c\u4e24\u6b21\uff08\u4e24\u79cd\u5bf9\u79f0\u60c5\u51b5\uff0cLR\u548cRL\uff09 \u5b9e\u9645\u4e0a\uff0c\u6839\u636eAVL\u6811\u7684\u826f\u597d\u5b9a\u4e49\uff0c\u5728\u6bcf\u6b21\u63d2\u5165\u540e\u53ea\u9700\u8981\u4e00\u6b21\u64cd\u4f5c\uff08RR/LR...\uff09\u5c31\u80fd\u4f7f\u5176\u518d\u6b21\u5e73\u8861\u3002 AVL\u6811\u7684\u5220\u9664 \uff1a \u7528\u5220\u9664\u8282\u70b9\u5de6\u5b50\u6811\u7684\u6700\u5927\u8282\u70b9/\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8282\u70b9\u66ff\u6362\u4ed6\uff08\u4e0eBST\u76f8\u540c\uff09\uff0c\u518d\u5220\u9664\u3002 \u4ece\u5220\u9664\u8282\u70b9\u7684\u7236\u8282\u70b9\u5f00\u59cb\uff08\u66ff\u6362\u540e\uff09\uff0c\u8bb0\u5f55\uff08\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\uff09\u9ad8\u5ea6\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u5e73\u8861\u56e0\u5b50\uff0c\u4e00\u4f46\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u5c31\u7528insert\u4e2d\u7684\u65b9\u6cd5\u8c03\u6574\u3002\u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u591a\u6b21\u8c03\u6574\u3002","title":"\u5982\u4f55\u5f97\u5230AVL\u6811"},{"location":"ads/ads_part_1/#_1","text":"\u6811\u9ad8\u7684\u6e10\u8fdb\u4e0a\u754c \\(n_h\\) \u2014\u2014h\u9ad8\u5ea6\u7684\u6811\u9700\u8981\u7684\u6700\u5c0f\u7ed3\u70b9\u6570 \u9ad8\u5ea6\u4e3ah\u7684\u6811\uff08\u6240\u9700\u8282\u70b9\u6700\u5c11\uff09\u5982\u4e0b \u4e0e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7c7b\u4f3c\uff1a \\(F_0=0,F_1=1,F_n=F_{n-1}+F_{n-2}\\) \u800c \\(F_n\\approx\\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^i\\) \u6240\u4ee5 \\(n_h =F_{n+3}-1\\) \\(h=O(lnn)\\)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"ads/ads_part_1/#splay-trees","text":"\u76ee\u6807\uff1aM\u6b21\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(MlogN)\\) \uff0c\u5373\u6bcf\u4e2a\u64cd\u4f5c\u5e73\u5747\u590d\u6742\u5ea6\u4e3a \\(O(logN)\\) \u57fa\u672c\u601d\u60f3\uff1a\u6bcf\u6b21\u67e5\u8be2/\u63d2\u5165\uff0c\u5c06\u8be5\u5143\u7d20\u63d0\u5230\u6839\u8282\u70b9","title":"Splay Trees"},{"location":"ads/ads_part_1/#_2","text":"\u5982\u679c\u67e5\u8be2\u8282\u70b9\u7684\u7236\u4eb2\u662f\u6839\u2014\u2014\u65cb\u8f6c\u67e5\u8be2\u8282\u70b9 \u5982\u679c\u4e0d\u662f\uff0c\u5219\u6709\u7236\u4eb2\u8282\u70b9\uff08P\uff09\u548c\u7956\u7236\u8282\u70b9\uff08G\uff09 zig-zag\uff08z\u5b57\u5f62\uff09\uff1a\u8f6c\u4e24\u6b21\u5f53\u524d\u8282\u70b9 zig-zig\uff08\u4e00\u4e2a\u65b9\u5411\uff09\uff1a\u5148\u8f6c\u7236\u8282\u70b9\uff0c\u518d\u8f6c\u5f53\u524d\u8282\u70b9","title":"\u6784\u9020\u8fc7\u7a0b"},{"location":"ads/ads_part_1/#_3","text":"\u627e\u5230\u8981\u5220\u9664\u7684\u5143\u7d20X\uff08\u8fd9\u6837\u8ba9\u5176\u5728\u6839\u8282\u70b9\uff09 \u5220\u6389X\uff0c\u5f97\u5230\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811 \u627e\u5230\u5de6\u5b50\u6811\u6700\u5927\u7684\u8282\u70b9\uff0c\u5c06\u5176\u63a8\u5230\u6839\u8282\u70b9 \u8fd9\u6837\u5c31\u80fd\u76f4\u63a5\u5c06\u53f3\u5b50\u6811\u63a5\u5230\u5de6\u5b50\u6811\u7684\u53f3\u8fb9","title":"\u5220\u9664\u64cd\u4f5c"},{"location":"ads/ads_part_1/#amortized-analysisthree-normal-methods","text":"An amortized analysis guarantees the average performance of each operation in the worst case. Splay\u6811\u7684\u76ee\u6807\uff1aM\u6b21\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(MlogN)\\) \u2014\u2014\u5747\u644a\u65f6\u95f4\u4e0a\u754c( Amortized time bound ) worst-case bound >= amortized time bound >= average-case bound \u524d\u4e24\u79cd\u4e0e\u6570\u636e\u5206\u5e03\u65e0\u5173","title":"Amortized Analysis(Three normal methods)"},{"location":"ads/ads_part_1/#_4","text":"\u5bf9\u4e8e\u6240\u6709 n\uff0cn \u4e2a\u8fd0\u7b97\u5e8f\u5217\u603b\u5171\u9700\u8981\u6700\u574f\u60c5\u51b5\u65f6\u95f4\uff08determine an upper bound\uff09 T\uff08n\uff09\u3002\u56e0\u6b64\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7684\u5e73\u5747\u6210\u672c\u6216\u644a\u9500\u6210\u672c\u4e3a T\uff08n\uff09/n\u3002 \u4ee5\u6808\u4e3a\u4f8b\uff1a push\uff1a \\(O(1)\\) \uff0c pop\uff1a \\(O(1)\\) \uff0c multipop\uff08\u4e00\u6b21pop\u51fan\u4e2a\uff09\uff1a \\(min\\{k\uff0cn\\}=O(n)\\) \uff0c\u5176\u4e2dk\u662f\u5f53\u524d\u6808\u4e2d\u5143\u7d20\u6570 \u6240\u4ee5n\u6b21\u64cd\u4f5c\u4e0a\u754c\uff1a \\(O(n^2)\\) \u66f4\u7cbe\u786e\uff1a\u6808\u4e2d\u5143\u7d20\u6570\u80af\u5b9a\u5c0f\u4e8en\uff0cpush\u8fdb\u7684\u5143\u7d20\u53ea\u80fdpop\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) $$T_{amortized}= O( n )/n = O(1) $$","title":"\u805a\u5408\u5206\u6790"},{"location":"ads/ads_part_1/#_5","text":"\u4ee5\u5356\u6c7d\u6c34\u4e3a\u4f8b\uff1a a\u5356\u4e00\u74f6\u6c7d\u6c34 3\u5143 b\u7528 5\u5143 \u4e70\u6c7d\u6c34\uff0c\u5b58\u4e24\u5143\uff08credits\uff09\u5230a\u90a3\uff0c\u4e0b\u6b21\u4e70\u6c7d\u6c34\u53ef\u4ee5\u7528\u3002\u6b64\u65f6actual cost\uff1a3\u5143 \\(amortized\\ cost = actual\\ cost + credits\\) \u4e70n\u74f6\u6c7d\u6c34\uff0cbound\uff1a $$ amortized\\ cost \\geq actual\\ cost(\u53733n\u5143\uff0c\u56e0\u4e3a\u4e0d\u8d4a\u8d26) $$ \u6ce8\u610f\u4fdd\u8bc1\u6700\u7ec8\u4fe1\u7528\u4e0d\u5c0f\u4e8e0 \u56de\u5230\u6808\u64cd\u4f5c\uff1a \u5b9e\u9645\u4ee3\u4ef7\uff1apush=1, pop=1, multipop=min(sizeof(s),k) \u5747\u644a\u4ee3\u4ef7\uff1apush = 2(\u63d0\u524d\u628apop\u7684\u4ee3\u4ef7\u4ed8\u6389\uff0c\u5373\u4f7f\u4e0dpop\u8be5\u5143\u7d20), pop = multipop = 0\uff0c\u8fd9\u6837\u6240\u6709\u4ee3\u4ef7\u90fd\u662f\u5e38\u6570 Credits\uff1apush = +1, pop = -1, multipop = -min(sizeof(s),k) multipop\u65f6\u7684\u4fe1\u7528\u4e3asizeof(s)\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4fe1\u7528\u4e3a\u8d1f\u7684\u60c5\u51b5 n\u6b21\u64cd\u4f5c\u6700\u5927\u7684amortized cost\u4e3a2n\uff0c \\(T_{amortized}= O( n )/n = O(1)\\)","title":"\u6838\u7b97\u6cd5"},{"location":"ads/ads_part_1/#_6","text":"\\(\\Phi(D_i)\\) \uff1a\u52bf\u80fd\u51fd\u6570\uff0c\u8868\u793a \\(D_i\\) \u72b6\u6001\u7684\u52bf\u80fd \\(Credits =\\Phi(D_i)-\\Phi(D_{i-1})\\) ; \u5408\u6cd5\u7684\u52bf\u80fd\u51fd\u6570\uff1a\u4fdd\u8bc1 \\(\\Phi(D_{0})\\) \u662f\u6700\u5c0f\u7684\uff0c\u8fd9\u6837\u603b\u7684Credits \\(=\\Phi(D_n)-\\Phi(D_{0})\\) >0\uff0c\u5747\u644a\u4ee3\u4ef7\u662f\u5b9e\u9645\u4ee3\u4ef7\u7684\u4e0a\u754c\u3002\u4e0b\u9762\u516c\u5f0f\u4e2d \\(\\hat{c_i}\\) \u662f\u5747\u644a\u4ee3\u4ef7\uff0c \\(c_i\\) \u662f\u5b9e\u9645\u4ee3\u4ef7 $$ \\sum_{i=1}^n\\hat{c_i}=\\sum_{i=1}^n(c_i+\\Phi(D_i)-\\Phi(D_{i-1}))=\\sum_{i=1}^nc_i+\\Phi(D_n)-\\Phi(D_{0}) $$ \u518d\u6b21\u56de\u5230\u6808 \u52bf\u80fd\u51fd\u6570 \\(\\Phi(D_i)=D_i\\) \u65f6\u523b\u6808\u4e2d\u7684\u5143\u7d20\u6570 \u8ba1\u7b97\u5747\u644a\u4ee3\u4ef7\uff1a push\uff1a \\(\\hat{c_i}=c_i+\\Phi(D_i)-\\Phi(D_{i-1})=1+1=2\\) multipop\uff1a \\(\\hat{c_i}=c_i+\\Phi(D_i)-\\Phi(D_{i-1})=k'-k'=0\\) \u6bcf\u4e2a\u64cd\u4f5c\u7684\u4ee3\u4ef7\u90fd\u662fO(1)\u2014\u2014\u5747\u644a\u4ee3\u4ef7\u662fO(1) \u5e94\u7528\uff1a\u5206\u6790splay tree\u7684\u5747\u644a\u4ee3\u4ef7\u2014\u2014Amortized Analysis Using Potential Methods: \u6811\u7684\u5e38\u89c1\u52bf\u80fd\u51fd\u6570\uff1a\u8282\u70b9\u4e2a\u6570\u3001\u6811\u9ad8\u00b7\u00b7\u00b7 (\u56e0\u4e3a\u62a5\u544a\u7528\u82f1\u6587\u5199\u7684\u6240\u4ee5\u4e0b\u9762\u662f\u82f1\u6587) In tree's amortized analysis, we often use the height of tree or the amount of nodes as the potential function, which satisfy \\(\\Phi(0)\\) is the minimum. To make the potential function increasing slowly, we choose \\(\\Phi(T)=\\sum_{i\\in T}S(i)\\) , where S(i) is the number of descendants of i (i included). \\(\\Phi(T)\\) is also called rank of T, notion \\(R(T)\\) Lemma: If \\(a+b\\leq c\\) then \\(loga+logb\\leq 2logc-2\\) Same as the part of algorithm analysis, there are three situations to discuss according to the picture. If the \"X\" to be pushed is one of the childs of root, we only need one rotation. Except X and P, the \"S(i)\" didn't change, and the rotation cost \\(c_i\\) is 1. So the amortized cost $$ \\hat{c_i}=1+R_2(X)-R_1(X)+R_2(P)-R_1(P) $$ $$ \\leq 1+R_2(X)-R_1(X) $$ (shown below that \\(R_2(P)<R_1(P)\\) ) In the zig-zag case, we need two rotation, costing 2. We note that \\(R_2(X) = R_1(G) = log(the\\ number\\ of\\ nodes\\ in\\ T)\\) . So the amortized cost $$ \\hat{c_i}=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G) $$ $$ =2-R_1(X)+R_2(P)-R_1(P)+R_2(G) $$ $$ \\leq 2(R_2(X)-R_1(X)) $$ (shown below that nodes: \\(P_2+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_2(P)+R_2(G)\\leq 2R_2(X)+2\\) ) * In the zig-zig case, we need two rotation, too, costing 2. We also note that \\(R_2(X) = R_1(G)\\) . So the amortized cost $$ \\hat{c_i}=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G) $$ $$ =2-R_1(X)+R_2(P)-R_1(P)+R_2(G) $$ $$ =2-2R_1(X)+R_2(P)-R_1(P)+R_2(G)+R_1(X) $$ $$ \\leq 3(R_2(X)-R_1(X)) $$ (shown below that nodes: \\(X_1+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_1(X)+R_2(G)\\leq 2R_2(X)+2\\) ) When splay, the former \\(3R_2(X)\\) could be eliminated by the latter item's \\(-3R_1(X)\\) . After sum of all the items, we get: $$ \\hat{c_i} \\leq 1+3(R_2(X)-R_1(X))=O(logN) $$ \u7b97\u6cd5\u5bfc\u8bba\u7684\u644a\u8fd8\u5206\u6790\u4f8b\u5b50 Incrementing a binary counter(k bit in total) \u6bcf\u6b21\u4ece\u4f4e\u4f4d\u5f80\u9ad8\u4f4d\u7ffb\u8f6cbit\uff0c\u9047\u52301\u7ee7\u7eed\u7ffb\u8f6c\uff0c\u9047\u52300\u7ffb\u8f6c\u5b8c\u540e\u505c\u4e0b\u6765 worst case: \u6bcf\u6b21\u6700\u591a\u8f6ck\u4e2abits\u2014\u2014011...1=>100...0 \u805a\u5408\u5206\u6790\uff1a A[0]\u6bcf\u6b21\u90fd\u6539\u53d8 A[1]\u6bcf\u4e24\u6b21\u6539\u53d8\u4e00\u6b21 \u5047\u8bbe\u8ba1\u6570n\u6b21\uff0c\u5219A[0]\u6539\u53d8 \\(n\\) \u6b21\uff0cA[1]\u6539\u53d8 \\(\\lfloor\\frac{n}{2}\\rfloor\\) \u6b21...A[i]\u6539\u53d8 \\(\\lfloor\\frac{n}{2^i}\\rfloor\\) \u6b21 \u56e0\u6b64\u603b\u5171\u7684\u64cd\u4f5c\uff08\u7ffb\u8f6cbit\uff09\u7684\u6b21\u6570\u4e3a \\[ \\sum^{k-1}_{i=0}\\lfloor\\frac{n}{2^i}\\rfloor<n\\sum^{\\infty}_{i=0}\\frac{1}{2^i}=2n \\] \u56e0\u6b64\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\u4e3aO(n)\uff0c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)/n=O(1). \u6838\u7b97\u6cd5\uff1a \u5b9e\u9645\u4ee3\u4ef7\uff1a1\u53d8\u4e3a0 = 1, 0\u53d8\u4e3a1 = 1 \u5747\u644a\u4ee3\u4ef7\uff1a0\u53d8\u4e3a1 = 2(\u63d0\u524d\u628a1\u53d8\u4e3a0\u7684\u4ee3\u4ef7\u4ed8\u6389), 1\u53d8\u4e3a0 = 0 \u4ece0\u5f00\u59cb\u8ba1\u6570\uff0c\u80af\u5b9a\u5148\u5c060\u53d8\u4e3a1\u624d\u80fd\u53d8\u56de\u53bb\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4fe1\u7528\u4e3a\u8d1f\u7684\u60c5\u51b5 \u6211\u4eec\u77e5\u9053\u6bcf\u6b21\u6700\u591a\u53ea\u6709\u4e00\u4e2a0\u53d8\u62101 \u56e0\u6b64\u5747\u644a\u4ee3\u4ef7\u4e3aO(1) \u52bf\u80fd\u6cd5\uff1a \u9009\u53d6\u52bf\u80fd\u51fd\u6570\uff1a\u5f53\u524d1\u7684\u6570\u76ee\uff0c\u8bb0\u4e3a \\(b_i\\)","title":"\u52bf\u80fd\u6cd5"},{"location":"ads/ads_part_1/#red-black-tree","text":"tips: \u8bbf\u95ee\u7a7a\u6307\u9488\u4f1a Sigementation fault\uff0c\uff0c\u53ef\u4ee5\u6307\u5411\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff08\u54e8\u5175\uff09 \u76ee\u6807\uff1a\u6bcf\u6b21\u641c\u7d22\u90fd \\((logn)\\)","title":"Red-black Tree"},{"location":"ads/ads_part_1/#1","text":"\u7ea2\u9ed1\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u7ea2\u8272\u7684\uff0c\u8981\u4e48\u662f\u9ed1\u8272\u7684 \u6839\u8282\u70b9\u662f\u9ed1\u8272\u7684 \u6bcf\u4e2a\u53f6\u5b50\u90fd\u662f\u54e8\u5175\uff08NIL\uff09\uff0c\u54e8\u5175\u662f\u9ed1\u8272\u7684 \u5982\u679c\u8282\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u5b69\u5b50\u90fd\u662f\u9ed1\u8272\u7684 \u6bcf\u4e2a\u8282\u70b9\u5230\uff08\u80fd\u5230\u8fbe\u7684\uff09\u6240\u6709\u53f6\u5b50\u7684\u7b80\u5355\u8def\u5f84\uff0c\u7ecf\u8fc7\u7684\u9ed1\u8272\u8282\u70b9\u6570\u76f8\u540c black height: \u4e0d\u7b97\u81ea\u5df1\u3001\u4e0d\u7b97\u54e8\u5175\uff0c\u7ecf\u8fc7\u7684\u9ed1\u8272\u8282\u70b9\u6570 \u5f15\u7406\uff1a \u8bc1\u660e\uff1a","title":"1. \u7ea2\u9ed1\u6811\u5b9a\u4e49"},{"location":"ads/ads_part_1/#2","text":"\u6784\u9020\u60f3\u6cd5\uff1a\u63d2\u5165\u65b0\u8282\u70b9\u4e14\u67d3\u6210\u7ea2\u8272\u2014\u2014\u4fdd\u6301\u6027\u8d285\uff0c\u901a\u8fc7\u8fed\u4ee3\u53d8\u6362\u4fdd\u6301\u5176\u4ed6\u6027\u8d28 Insert (\u4e0d\u6ee1\u8db3\u6027\u8d28\u6709\u4e09\u79cd\u60c5\u51b5)\uff1a case 1\uff1a\u7ea2\u53d4\u53d4\uff08\u6240\u4ee5\u7237\u7237\u80af\u5b9a\u9ed1\u8272\uff09\u2014\u2014\u5c06\u7238\u7238\u548c\u53d4\u53d4\u67d3\u9ed1\uff0c\u7237\u7237\u67d3\u7ea2 case 2\uff1a\u8fd1\u53d4\u53d4\u9ed1\u2014\u2014\u65cb\u8f6c\u5230case3 case 3\uff1a\u8fdc\u53d4\u53d4\u9ed1\u2014\u2014\u7236\u4eb2\u67d3\u9ed1\uff0c\u65cb\u8f6c\u7237\u7237 \u8fd9\u6837\u4fdd\u6301\u4e86\u6bcf\u6b21\u53ea\u6709\u4e00\u6761\u89c4\u5219\u88ab\u7834\u574f \u590d\u6742\u5ea6\uff1a\u6700\u574f\u60c5\u51b5\u2014\u2014\u4e00\u76f4case 1 $$ T = O(h) = O(logn) $$ Delete \u88ab\u5220\u8282\u70b9\u662fleaf node: \u7236\u4eb2\u6307\u5411NIL \u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff1a\u7528\u513f\u5b50\u66ff\u4ee3\u4ed6 \u6709\u4e24\u4e2a\u513f\u5b50\uff1a\u7528\u5de6\u5b50\u6811\u6700\u5927\u7684/\u53f3\u5b50\u6811\u6700\u5c0f\u7684\u66ff\u4ee3\u4ed6\u3002 \u6b64\u65f6","title":"2. \u7ea2\u9ed1\u6811\u6784\u9020"},{"location":"ads/ads_part_1/#b-tree","text":"","title":"B+ Tree"},{"location":"ads/ads_part_1/#1_1","text":"","title":"1. \u5b9a\u4e49"},{"location":"ads/ads_part_1/#a-b-tree-of-order-m","text":"\u6839\u8282\u70b9\u8981\u4e48\u6ca1\u6709\u5b69\u5b50\uff0c\u8981\u4e48\u6709 \\([2,M]\\) \u4e2a\u5b69\u5b50 \u9664\u6839\u4e4b\u5916\u7684\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u6709 \\([\\lceil M/2\\rceil,M]\\) \u4e2a\u5b69\u5b50","title":"A B+ tree of order M:"},{"location":"ads/ads_part_1/#2_1","text":"\u63d2\u5165=>\u82e5\u8d85\u9650=>\u5206\u88c2 \u4fdd\u8bc1\u6709\u5e8f/\u627e\u5230\u4f4d\u7f6e\uff1a\u904d\u5386\uff08O(n)\uff09 \u5982\u679c\u63a8\u5230\u524d\u9762\u2014\u2014\u53ef\u80fdO(n)\uff0c\u56e0\u6b64\u5b9e\u9645\u64cd\u4f5c\u4e0d\u8fd9\u4e48\u505a Btree Insert(ElementType X,Btree T) { Seach from root to leaf } choose M: best 3 or 4 B+\u6811\u7684\u597d\u5904\uff1a\u76f8\u8fd1\u7684\u5143\u7d20\u79bb\u5f97\u8fd1\uff0c\u78c1\u76d8\u53cb\u597d","title":"2. \u63d2\u5165\u8fc7\u7a0b"},{"location":"ads/ads_part_1/#3","text":"","title":"3. \u5220\u9664\u8fc7\u7a0b"},{"location":"ads/ads_part_1/#inverted-file-index","text":"\u5e94\u7528\uff1a\u4fe1\u606f\u68c0\u7d22\uff0c\u641c\u7d22\u5f15\u64ce Solution 2: \u77e9\u9635\u5b58\u50a8 \u78c1\u5e26\u5047\u8bbe\uff1a\u8bcd\u548c\u8bcd\u6ca1\u6709\u987a\u5e8f Solution 3: Inverted File Index\uff08\u53c2\u8003\u56fe\u8bba\uff0c\u5c06\u77e9\u9635\u7528\u90bb\u63a5\u8868\u8868\u793a\uff09 Doc Text 1 Gold silver truck","title":"Inverted File Index"},{"location":"ads/ads_part_1/#_7","text":"\u5bf9term\u8fdb\u884c\u5904\u7406 \u53ea\u7559\u4e0b\u8bcd\u6839 \u505c\u7528\u8bcd\uff08stop words\uff09\u8fc7\u6ee4\uff1athe\u3001a\u3001what...\u2014\u2014\u6210\u672c\u5927\uff0c\u6536\u83b7\u4f4e \u83b7\u5f97term\u540e \u54c8\u5e0c \u641c\u7d22\u6811 \u5185\u5b58\u4f18\u5316 \u5185\u5b58\u4e0d\u591f\u65f6\uff0c\u628a\u5199\u597d\u7684\u8bcd\u5178\u653e\u5165disk \u91ca\u653e\u5185\u5b58\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bcd\u5178 \u5f52\u5e76\u6392\u5e8f disk\u4e0d\u591f\u65f6 Solution 1\uff1a\u5c06\u78c1\u76d8\u6309\u5b57\u6bcd\u5e8f\u653e\u5728\u4e0d\u540c\u7535\u8111\u91cc Solution 2\uff1aDocument-Partitioned index Dynamic indexing \u7269\u7406\u5220\u9664\u4ee3\u4ef7\u6602\u8d35\u2014\u2014\u505a\u65b0\u65e7\u6807\u8bb0 Main list\u548cnew list","title":"\u4f18\u5316"},{"location":"ads/ads_part_1/#_8","text":"precision&recall","title":"\u8bc4\u4f30"},{"location":"ads/ads_part_2/","text":"","title":"Ads part 2"},{"location":"ads/splay_tree/","text":"Splays Tree Insertion Insert an element x into a given tree t and push it to the root using an iterative method. Except for the empty case, there is three basecases. After insert x to the corresponding subtree, we should judge: * The first case is that the node to be inserted is root's child, just rotate once to put the node at the root. * The second case is the zig-zag case. Maybe it's better using picture to explain. The \"X\" is the node to be inserted. In the zig-zag case as shown in the picture, we should rotate X twice. * The final case is the zig-zig case. Similarly, the \"X\" is the node to be inserted. In the zig-zag case as shown in the picture, we should rotate X's parent fisrst, then rotate X. begin Insert( Tree t, ElementType x ) if t is NULL return Node(x) if t's value is larger than x t's left child = Insert( t's left child, x ) if t is root and x is t's child return RightRotation(t) if zig-zag t's left child = LeftRotation(t's left child) return RightRotation(t) if zig-zig t = RightRotation(t) t = RightRotation(t) else t's right child = Insert( t's right child, x ) //Symmetrical with the left insert, //while the rotation direction is reversed end Deletion Delete an element x into a given tree t using. ( In this project, the case where x can not be found doesn't exist .) * First find the element x in the tree t. and push x to the root using the same method as inserting. * Delete x, Then we acquire a left subtree and a right subtree of x. * Then find the max element in the left subtree and push it to the root. Obviously, now its right subtree is empty. * So we can connect the x's right subtree to the right of the left subtree directly. begin Delete( Tree t, ElementType x ) Define Tree Temp as NULL if t is NULL ERROR Find( Tree t, ElementType x )//then x is at the root FindMax( Tree t's left subtree )//Also push the max element to the root Temp = t if t's left subtree is NULL t = right subtree else t = left subtree left subtree -> right = right subtree free(temp) return t end Time Complexity Amortized Analysis Using Potential Methods: In tree's amortized analysis, we often use the height of tree or the amount of nodes as the potential function, which satisfy \\(\\Phi(0)\\) is the minimum. To make the potential function increasing slowly, we choose \\(\\Phi(T)=\\sum_{i\\in T}S(i)\\) , where S(i) is the number of descendants of i (i included). \\(\\Phi(T)\\) is also called rank of T, notion \\(R(T)\\) Lemma: If \\(a+b\\leq c\\) then \\(loga+logb\\leq 2logc-2\\) Same as the part of algorithm analysis, there are three situations to discuss according to the picture. If the \"X\" to be pushed is one of the childs of root, we only need one rotation. Except X and P, the \"S(i)\" didn't change, and the rotation cost \\(c_i\\) is 1. So the amortized cost \\(\\^c_i=1+R_2(X)-R_1(X)+R_2(P)-R_1(P)\\) \\(\\leq 1+R_2(X)-R_1(X)\\) (shown below that $ R_2(P)<R_1(P) $) In the zig-zag case, we need two rotation, costing 2. We note that \\(R_2(X) = R_1(G) = log(the\\ number\\ of\\ nodes\\ in\\ T)\\) . So the amortized cost \\(\\^c_i=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)\\) \\(=2-R_1(X)+R_2(P)-R_1(P)+R_2(G)\\) \\(\\leq 2(R_2(X)-R_1(X))\\) (shown below that nodes: \\(P_2+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_2(P)+R_2(G)\\leq 2R_2(X)+2\\) ) * In the zig-zig case, we need two rotation, too, costing 2. We also note that \\(R_2(X) = R_1(G)\\) . So the amortized cost \\(\\^c_i=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)\\) \\(=2-R_1(X)+R_2(P)-R_1(P)+R_2(G)\\) \\(=2-2R_1(X)+R_2(P)-R_1(P)+R_2(G)+R_1(X)\\) \\(\\leq 3(R_2(X)-R_1(X))\\) (shown below that nodes: \\(X_1+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_1(X)+R_2(G)\\leq 2R_2(X)+2\\) ) When splay, the former \\(3R_2(X)\\) could be eliminated by the latter item's \\(-3R_1(X)\\) . After sum of all the items, we get the amortized time complexity $$ \\^c_i \\leq 1+3(R_2(X)-R_1(X))=O(logN) $$ Similarly average time complexity is also $O(logN) $. Concerning the worst case: X is at the bottom, which depth is N(the number of nodes). Push it to root needs to rotate N times. So the worst time complexity is \\(O(N)\\) .","title":"Splay tree"},{"location":"ads/splay_tree/#splays-tree","text":"","title":"Splays Tree"},{"location":"ads/splay_tree/#insertion","text":"Insert an element x into a given tree t and push it to the root using an iterative method. Except for the empty case, there is three basecases. After insert x to the corresponding subtree, we should judge: * The first case is that the node to be inserted is root's child, just rotate once to put the node at the root. * The second case is the zig-zag case. Maybe it's better using picture to explain. The \"X\" is the node to be inserted. In the zig-zag case as shown in the picture, we should rotate X twice. * The final case is the zig-zig case. Similarly, the \"X\" is the node to be inserted. In the zig-zag case as shown in the picture, we should rotate X's parent fisrst, then rotate X. begin Insert( Tree t, ElementType x ) if t is NULL return Node(x) if t's value is larger than x t's left child = Insert( t's left child, x ) if t is root and x is t's child return RightRotation(t) if zig-zag t's left child = LeftRotation(t's left child) return RightRotation(t) if zig-zig t = RightRotation(t) t = RightRotation(t) else t's right child = Insert( t's right child, x ) //Symmetrical with the left insert, //while the rotation direction is reversed end","title":"Insertion"},{"location":"ads/splay_tree/#deletion","text":"Delete an element x into a given tree t using. ( In this project, the case where x can not be found doesn't exist .) * First find the element x in the tree t. and push x to the root using the same method as inserting. * Delete x, Then we acquire a left subtree and a right subtree of x. * Then find the max element in the left subtree and push it to the root. Obviously, now its right subtree is empty. * So we can connect the x's right subtree to the right of the left subtree directly. begin Delete( Tree t, ElementType x ) Define Tree Temp as NULL if t is NULL ERROR Find( Tree t, ElementType x )//then x is at the root FindMax( Tree t's left subtree )//Also push the max element to the root Temp = t if t's left subtree is NULL t = right subtree else t = left subtree left subtree -> right = right subtree free(temp) return t end","title":"Deletion"},{"location":"ads/splay_tree/#time-complexity","text":"Amortized Analysis Using Potential Methods: In tree's amortized analysis, we often use the height of tree or the amount of nodes as the potential function, which satisfy \\(\\Phi(0)\\) is the minimum. To make the potential function increasing slowly, we choose \\(\\Phi(T)=\\sum_{i\\in T}S(i)\\) , where S(i) is the number of descendants of i (i included). \\(\\Phi(T)\\) is also called rank of T, notion \\(R(T)\\) Lemma: If \\(a+b\\leq c\\) then \\(loga+logb\\leq 2logc-2\\) Same as the part of algorithm analysis, there are three situations to discuss according to the picture. If the \"X\" to be pushed is one of the childs of root, we only need one rotation. Except X and P, the \"S(i)\" didn't change, and the rotation cost \\(c_i\\) is 1. So the amortized cost \\(\\^c_i=1+R_2(X)-R_1(X)+R_2(P)-R_1(P)\\) \\(\\leq 1+R_2(X)-R_1(X)\\) (shown below that $ R_2(P)<R_1(P) $) In the zig-zag case, we need two rotation, costing 2. We note that \\(R_2(X) = R_1(G) = log(the\\ number\\ of\\ nodes\\ in\\ T)\\) . So the amortized cost \\(\\^c_i=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)\\) \\(=2-R_1(X)+R_2(P)-R_1(P)+R_2(G)\\) \\(\\leq 2(R_2(X)-R_1(X))\\) (shown below that nodes: \\(P_2+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_2(P)+R_2(G)\\leq 2R_2(X)+2\\) ) * In the zig-zig case, we need two rotation, too, costing 2. We also note that \\(R_2(X) = R_1(G)\\) . So the amortized cost \\(\\^c_i=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)\\) \\(=2-R_1(X)+R_2(P)-R_1(P)+R_2(G)\\) \\(=2-2R_1(X)+R_2(P)-R_1(P)+R_2(G)+R_1(X)\\) \\(\\leq 3(R_2(X)-R_1(X))\\) (shown below that nodes: \\(X_1+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_1(X)+R_2(G)\\leq 2R_2(X)+2\\) ) When splay, the former \\(3R_2(X)\\) could be eliminated by the latter item's \\(-3R_1(X)\\) . After sum of all the items, we get the amortized time complexity $$ \\^c_i \\leq 1+3(R_2(X)-R_1(X))=O(logN) $$ Similarly average time complexity is also $O(logN) $. Concerning the worst case: X is at the bottom, which depth is N(the number of nodes). Push it to root needs to rotate N times. So the worst time complexity is \\(O(N)\\) .","title":"Time Complexity"}]}