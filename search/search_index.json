{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>\u8fd9\u91cc\u662f\u751f\u547d\u7684\u8089\u8089\u7684\u7b14\u8bb0\u672c</p> <p>\u7f51\u7ad9\u7684\u76ee\u7684\u5176\u5b9e\u662f\u8ba9\u672c\u4eba\u80fd\u591f\u65b9\u4fbf\u5730\u67e5\u770b\u7b14\u8bb0</p> <p>\u4f1a\u653e\u6b63\u5728\u5b66\u4e60\u7684\u8bfe\u7a0b\u7684\u8bb0\u5f55</p> <p>\u672c\u7f51\u7ad9\u6bd4\u8f83\u7b80\u964b\uff08\u4f46\u770b\u7b14\u8bb0\u7684\u76ee\u7684\u5176\u5b9e\u5b8c\u5168\u80fd\u591f\u6ee1\u8db3\u4e86\ud83d\ude04</p> <p>\u5148\u7528\u4e00\u4e2a\u9ed8\u8ba4\u7684\u4e3b\u9898</p> <p>\u5b66\u597d\u524d\u7aef\u540e\u4e00\u5b9a\u8981\u5efa\u4e00\u4e2a\u6f02\u4eae\u7684\u4e2a\u4eba\u4e3b\u9875\ud83d\ude24</p> <p>\u4eca\u65e5\u8ba1\u5212\uff1a</p> <ol> <li>oop \u4f5c\u4e1a</li> <li>\u9a6c\u539f\u8bfb\u4e66\u8bfb\u4e00\u534a</li> <li>\u6d41\u6c34\u7ebf CPU \u753b\u597d\u56fe</li> </ol> <p>\u5468\u516d\uff08\u8981\u8865\u8bfe\uff09\uff1a</p> <ol> <li>\u9a6c\u539f\u8bfb\u4e66\u8bfb\u5b8c</li> <li>Minisql 1/5</li> </ol> <p>\u5468\u65e5\uff1a</p> <ol> <li>\u6d41\u6c34\u7ebf CPU \u5b8c\u6210\uff08\u4e00\u6574\u5929\u611f\u89c9\u5e94\u8be5\u5dee\u4e0d\u591a</li> <li>\u9a6c\u539f\u8bfb\u4e66\u62a5\u544a</li> </ol>"},{"location":"#weekly-plan","title":"Weekly Plan","text":""},{"location":"#week-3","title":"Week 3","text":"<ul> <li>\u67e5\u7f3a\u8865\u6f0f\uff0c\u7b14\u8bb0\u5199\u597d</li> <li>oop \u4f5c\u4e1a</li> <li>Minisql 1/5</li> <li>\u9a6c\u539f\u8bfb\u4e66\u62a5\u544a</li> <li>\u6d41\u6c34\u7ebf CPU</li> </ul>"},{"location":"#week-4","title":"Week 4","text":"<ul> <li>\u519b\u7406\u8bba\u6587</li> <li>Minisql 3/5</li> </ul>"},{"location":"#week-5","title":"Week 5","text":"<ul> <li>Minisql 4/5</li> </ul>"},{"location":"#week-6","title":"Week 6","text":"<ul> <li>Minisql \u62a5\u544a\u5199\u597d</li> </ul> <p>\u5f85\u529e\u4e8b\u9879</p> <p>\u4e0d\u662f\uff0c\u600e\u4e48\u8fd9\u4e48\u591a</p> <ul> <li> <p>oop \u4f5c\u4e1a</p> <ul> <li>5.18 \u53f7\u622a\u6b62</li> </ul> </li> <li> <p>\u9a6c\u539f\u8bfb\u4e66\u62a5\u544a</p> <ul> <li>\u5b57\u6570 2000 \u4ee5\u5185</li> <li>\u65f6\u95f4 5 - 7 \u5468</li> </ul> </li> <li> <p>\u519b\u7406\u8bba\u6587</p> <ul> <li>6.17 \u622a\u6b62</li> <li>1000 - 5000 \u5b57</li> </ul> </li> <li> <p>Mini sql</p> <ul> <li>6.20 \u622a\u6b62</li> </ul> </li> </ul>"},{"location":"#_1","title":"\u8003\u8bd5\u4e00\u89c8","text":"\u8003\u8bd5\u79d1\u76ee\uff08\u8003\u8bd5\u65f6\u95f4\u6392\u5e8f\uff09 \u5b66\u5206 \u8003\u8bd5\u65f6\u95f4 \u8003\u8bd5\u65b9\u5f0f \u6570\u636e\u5e93\u7cfb\u7edf 4.0*50% = 2.0 06\u670821\u65e5(08:00-10:00) \u53ef\u5e26 A4 \u7eb8 \u9a6c\u514b\u601d\u4e3b\u4e49\u57fa\u672c\u539f\u7406\uff08H\uff09 3.0*40% = 1.2 06\u670821\u65e5(14:00-16:00) \u95ed\u5377 \u519b\u4e8b\u7406\u8bba 2.0*40% = 0.8 06\u670822\u65e5(10:30-12:30) \u5f00\u5377 \u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1 4.5*40% = 1.8 06\u670822\u65e5(14:00-16:00) \u53ef\u5e26 A4 \u7eb8 \u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790 4.0*40% = 1.6 06\u670824\u65e5(10:30-12:30) - \u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1 2.5*50% = 1.25 06\u670828\u65e5(10:30-12:30) -"},{"location":"Matlab/","title":"Matlab","text":"<p>Function Handles: </p> <ul> <li>\u65b9\u6cd5\u4e00\uff1a@function_name</li> <li>\u65b9\u6cd5\u4e8c\uff1avar = feval('function_name', arguments)</li> </ul>"},{"location":"Matlab/#_1","title":"\u6570\u7ec4\u7684\u5e94\u7528","text":"<ul> <li>\u521d\u59cb\u5316\uff1ax = [0.5, 1.5, 2, 3.2, 1.5, 0.4];</li> <li>\u6570\u7ec4\u8fd0\u7b97\uff1aa = [0 4 9 8 3 5] &lt;= 4 \u2014\u2014 \u5f97\u5230 [1 1 0 0 1 0] \u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u5c0f\u4e8e\u7b49\u4e8e\u5224\u65ad\uff0c\u53d8\u91cf\u7c7b\u578b\u53d8\u4e3a logical</li> </ul>"},{"location":"Matlab/#_2","title":"\u77e9\u9635","text":"<p>rotate-\u9006\u65f6\u9488</p> <ul> <li>product: <code>.prod()</code></li> </ul> <pre><code>\n</code></pre>"},{"location":"memoire/","title":"\u5907\u5fd8\u5f55","text":"<p>\u51fa\u73b0\u5947\u602abug\u7684\u65f6\u5019\uff08\u7279\u522b\u662f\u51e0\u5929\u524d\u8fd8\u597d\u7684\u65f6\u5019</p> <p>\u8bb0\u5f97\u66f4\u65b0<code>sudo apt update &amp;&amp; sudo apt upgrade</code></p>"},{"location":"memoire/#mkdocs","title":"MkDocs","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy</code> - Refreash the project online.</li> </ul>"},{"location":"memoire/#ufw","title":"ufw","text":"<ul> <li><code>sudo ufw status</code> - \u67e5\u770b\u9632\u706b\u5899\u72b6\u6001</li> <li><code>sudo ufw enable</code> - \u5f00\u542f\u9632\u706b\u5899 \uff08\u62d2\u7edd\u4f20\u5165\uff0c\u5141\u8bb8\u4f20\u51fa\uff09</li> <li><code>sudo ufw disable</code> - \u5173\u95ed\u9632\u706b\u5899</li> <li><code>sudo systemctl stop ufw</code> <code>sudo systemctl disable ufw</code> - \u6c38\u4e45\u5173\u95ed\u9632\u706b\u5899</li> </ul>"},{"location":"memoire/#_2","title":"\u91cd\u5b9a\u5411","text":"<ul> <li><code>./your_program &lt; input.txt</code> - \u7528input.txt\u91cd\u5b9a\u5411\u4e3a\u7a0b\u5e8f\u7684\u8f93\u5165</li> </ul>"},{"location":"memoire/#_3","title":"\u4e0b\u8f7d\u3001\u89e3\u538b\u6587\u4ef6","text":"<ul> <li><code>wget http://www.diag.uniroma1.it/challenge9/code/ch9-1.1.tar.gz</code> - \u4e0b\u8f7d\u6587\u4ef6</li> <li><code>tar -zxvf ch9-1.1.tar.gz</code> - \u89e3\u538b\u6587\u4ef6 </li> </ul>"},{"location":"memoire/#git","title":"git","text":"<ul> <li><code>git init</code> - \u5c06\u5f53\u524d\u76ee\u5f55\u521d\u59cb\u5316\u4e3agit\u4ed3\u5e93\uff08\u540e\u9762\u53ef\u4ee5\u8ddf\u6307\u5b9a\u76ee\u5f55\uff09</li> <li><code>echo \"site/\" &gt;&gt; .gitignore</code> - \u5ffd\u7565site\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u66f4\u6539</li> <li><code>git clone &lt;repo&gt;</code> - \u514b\u9686\u5230\u5f53\u524d\u76ee\u5f55\uff08\u540e\u9762\u53ef\u4ee5\u8ddf\u6307\u5b9a\u76ee\u5f55\uff09 <li><code>git add .``git commit -m '\u7b2c\u4e00\u6b21\u7248\u672c\u63d0\u4ea4'</code> - \u63d0\u4ea4with message \u201c\u7b2c\u4e00\u6b21\u7248\u672c\u63d0\u4ea4\u201d\u3001</li> <li><code>git config --global user.name \"runoob\"``git config --global user.email test@runoob.com</code> - \u66f4\u6539git\u914d\u7f6e\uff08\u6ca1\u6709global\u5219\u53ea\u5bf9\u5f53\u524d\u4ed3\u5e93\u6709\u6548\uff09 git clone git pull  git pus</li>"},{"location":"memoire/#python","title":"Python","text":"<ul> <li><code>python3 -m venv .venv</code> - \u521b\u5efa\u540d\u4e3a .venv \u7684\u865a\u62df\u73af\u5883</li> <li><code>source .venv/bin/activate</code> - \u542f\u52a8\u865a\u62df\u73af\u5883</li> <li><code>deactivate</code> - \u505c\u7528</li> </ul>"},{"location":"memoire/#java","title":"Java","text":"<p>\u4e3a\u4e86\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u6d45\u5b66\u4e00\u4e0b</p>"},{"location":"memoire/#try-catch","title":"try-catch","text":"<p>\u5728Java\u4e2d\uff0ctry-catch \u5757\u7528\u4e8e\u6355\u83b7\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5f02\u5e38\u7ec8\u6b62\u7684\u4ee3\u7801\u5757\u4e2d\u7684\u5f02\u5e38\uff0c\u5e76\u5728\u53d1\u751f\u5f02\u5e38\u65f6\u6267\u884c\u4e00\u4e9b\u5904\u7406\u903b\u8f91\uff0c\u800c\u4e0d\u662f\u8ba9\u7a0b\u5e8f\u4e2d\u65ad\u6216\u5d29\u6e83\u3002</p> java<pre><code>public class TryCatchExample {\n    public static void main(String[] args) {\n        try {\n            // \u53ef\u80fd\u4f1a\u5f15\u53d1\u5f02\u5e38\u7684\u4ee3\u7801\u5757\n            int result = divide(10, 0); // \u9664\u6cd5\u64cd\u4f5c\uff0c\u5206\u6bcd\u4e3a0\u4f1a\u5bfc\u81f4\u5f02\u5e38\n            System.out.println(\"Result: \" + result); // \u8be5\u884c\u4e0d\u4f1a\u6267\u884c\uff0c\u56e0\u4e3a\u5f02\u5e38\u4f1a\u5728\u8fd9\u884c\u4e4b\u524d\u53d1\u751f\n        } catch (ArithmeticException e) {\n            // \u6355\u83b7\u5230\u7b97\u672f\u5f02\u5e38\u65f6\u6267\u884c\u7684\u4ee3\u7801\u5757\n            System.out.println(\"Exception occurred: \" + e.getMessage());\n        }\n    }\n\n    public static int divide(int numerator, int denominator) {\n        return numerator / denominator; // \u9664\u6cd5\u64cd\u4f5c\uff0c\u53ef\u80fd\u4f1a\u5f15\u53d1\u7b97\u672f\u5f02\u5e38\n    }\n}\n</code></pre> <pre><code>try {\n    // \u53ef\u80fd\u4f1a\u5f15\u53d1\u5f02\u5e38\u7684\u4ee3\u7801\u5757\n} catch (ExceptionType1 e1) {\n    // \u5904\u7406 ExceptionType1 \u7c7b\u578b\u5f02\u5e38\u7684\u4ee3\u7801\u5757\n} catch (ExceptionType2 e2) {\n    // \u5904\u7406 ExceptionType2 \u7c7b\u578b\u5f02\u5e38\u7684\u4ee3\u7801\u5757\n} catch (ExceptionType3 e3) {\n    // \u5904\u7406 ExceptionType3 \u7c7b\u578b\u5f02\u5e38\u7684\u4ee3\u7801\u5757\n}\n// \u53ef\u9009\u7684 finally \u5757\u53ef\u4ee5\u5728 try \u6216 catch \u5757\u4e4b\u540e\u4f7f\u7528\uff0c\u7528\u4e8e\u6267\u884c\u6e05\u7406\u6216\u6536\u5c3e\u64cd\u4f5c\nfinally {\n    // finally \u5757\u4e2d\u7684\u4ee3\u7801\u65e0\u8bba\u662f\u5426\u53d1\u751f\u5f02\u5e38\u90fd\u4f1a\u6267\u884c\n}\n</code></pre> <p>try \u5757\u4e2d\u5305\u542b\u53ef\u80fd\u4f1a\u5f15\u53d1\u5f02\u5e38\u7684\u4ee3\u7801\uff0c\u800c catch \u5757\u4e2d\u5305\u542b\u5904\u7406\u7279\u5b9a\u7c7b\u578b\u5f02\u5e38\u7684\u4ee3\u7801\u3002\u4f60\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a catch \u5757\u6765\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u5f02\u5e38\uff0c\u4e5f\u53ef\u4ee5\u53ea\u5b9a\u4e49\u4e00\u4e2a catch \u5757\u6765\u5904\u7406\u6240\u6709\u5f02\u5e38\u3002finally \u5757\u662f\u53ef\u9009\u7684\uff0c\u7528\u4e8e\u6267\u884c\u65e0\u8bba\u662f\u5426\u53d1\u751f\u5f02\u5e38\u90fd\u9700\u8981\u6267\u884c\u7684\u4ee3\u7801\uff0c\u6bd4\u5982\u8d44\u6e90\u7684\u91ca\u653e\u3002</p>"},{"location":"CO/CO/","title":"Chapter 1\u30013","text":"<ul> <li> <p>\u52a9\u6559\uff1a\u79e6\u5609\u4fca\u3001\u90ed\u5bb6\u8c6a</p> </li> <li> <p>\u6210\u7ee9\u6784\u6210   </p> </li> </ul>"},{"location":"CO/CO/#chapter-1-introduction","title":"Chapter 1: Introduction","text":""},{"location":"CO/CO/#0","title":"0. \u5386\u53f2","text":"<ul> <li> <p>\u7b2c\u4e00\u53f0\u53ef\u7f16\u7a0b\u7535\u5b50\u8ba1\u7b97\u673a\uff1aENIAC</p> <ul> <li> <p>10\u8fdb\u5236</p> </li> <li> <p>\u901a\u8fc7\u5f00\u5173\u7f16\u7a0b</p> </li> <li> <p>\u65e0\u5b58\u50a8\u90e8\u5206</p> </li> </ul> </li> <li> <p>\u51af\u00b7\u8bfa\u4f0a\u66fc\u7684\u8ba1\u7b97\u673a\u8bbe\u8ba1\u7406\u8bba\u2014\u2014\u4e94\u4e2a\u57fa\u672c\u90e8\u5206   </p> </li> <li> <p>\u5f97\u5230EDSAC\u2014\u2014\u6709\u5b58\u50a8\u90e8\u5206\u7684\u8ba1\u7b97\u673a</p> </li> </ul> <p>\u51e0\u4ee3\u8ba1\u7b97\u673a\u7684\u6f14\u53d8\uff1a</p> <ul> <li> <p>1~4\u4ee3\uff1a\u771f\u7a7a\u7ba1-&gt;\u6676\u4f53\u7ba1-&gt;\u96c6\u6210\u7535\u8def-&gt;\u5927\u89c4\u6a21\u96c6\u6210\u7535\u8def</p> </li> <li> <p>\u7b2c5\u4ee3\uff1a</p> </li> <li> <p>\u6700\u65b0\uff1a</p> <ul> <li> <p>RISC\uff1a\u7cbe\u7b80\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a\u2014\u2014CPU\u5904\u7406\u7b80\u5355</p> <ul> <li> <p>RISC-5</p> </li> <li> <p>MIPS</p> </li> </ul> </li> <li> <p>CISC\uff1a\u590d\u6742\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a\u2014\u2014\u6307\u4ee4\u6761\u6570\u5c11</p> </li> <li> <p>80x86</p> </li> </ul> </li> </ul>"},{"location":"CO/CO/#1","title":"1. \u4ecb\u7ecd","text":"<ul> <li> <p>\u53d1\u5c55\u8fdb\u5c55\u2014\u2014\u6469\u5c14\u5b9a\u5f8b</p> </li> <li> <p>\u5e94\u7528</p> <ul> <li> <p>\u624b\u673a</p> </li> <li> <p>\u4e07\u7ef4\u7f51</p> </li> <li> <p>......</p> </li> </ul> </li> </ul>"},{"location":"CO/CO/#2-eight-great-ideas","title":"2. Eight Great Ideas","text":"<ol> <li> <p>\u6469\u5c14\u5b9a\u5f8b</p> </li> <li> <p>\u62bd\u8c61\u5316   </p> </li> <li> <p>Make common case fast</p> </li> <li> <p>......</p> </li> <li> <p>\u5c42\u6b21\u5b58\u50a8\u2014\u2014\u53c8\u5927\u53c8\u5feb</p> </li> <li> <p>\u53ef\u9760\u6027\u2014\u2014\u5907\u4efd</p> </li> </ol>"},{"location":"CO/CO/#4","title":"4. \u786c\u4ef6\u7cfb\u7edf","text":"<ul> <li> <p>\u663e\u793a</p> </li> <li> <p>\u4e3b\u677f</p> </li> <li> <p>CPU\u91cc\uff1a</p> <ul> <li> <p>DataPath</p> </li> <li> <p>Control</p> </li> <li> <p>cache memory \u2014\u2014SRAM\u9759\u6001\u5b58\u50a8\uff0c\u9020\u4ef7\u9ad8</p> </li> </ul> </li> <li> <p>Memory</p> </li> <li> <p>Network</p> </li> </ul>"},{"location":"CO/CO/#6-performence","title":"6. Performence","text":"<ul> <li> <p>Response time\uff1a\u5b8c\u6210\u4e00\u4e2atask\u9700\u8981\u7684\u65f6\u95f4</p> </li> <li> <p>Throughput\uff1a\u5355\u4f4d\u65f6\u95f4\u5b8c\u6210\u7684\u4efb\u52a1\u6570</p> </li> <li> <p>\u201cX is n time faster than Y\u201d\uff1a Y \u6240\u7528\u65f6\u95f4\u662f X \u7684 n \u500d</p> </li> <li> <p>CPU time = \u65f6\u949f\u5468\u671f\u6570 \\(\\times\\) \u4e00\u4e2a\u5468\u671f\u957f\u5ea6</p> </li> <li> <p>\u5c06\u4e00\u4e2a\u6307\u4ee4\u5206\u6210\u51e0\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u4e00\u4e2a\u5468\u671f(CPI = Cycle per Instruction)</p> </li> <li> <p>\u5219 </p> </li> </ul> \\[ CPU\\ time = \u6307\u4ee4\u6570 \\times CPI \\times \u4e00\u4e2a\u5468\u671f\u957f\u5ea6  \\] \\[ = \\frac{\u6307\u4ee4\u6570 \\times CPI}{\u65f6\u949f\u9891\u7387} \\]"},{"location":"CO/CO/#7","title":"7. \u4e0d\u53ef\u80fd\u7684\u6027\u80fd\u63d0\u5347","text":"<ul> <li> <p>Power Wall\uff1a\u63d0\u5347\u6027\u80fd\u8017\u80fd\u5de8\u5927\uff0c\u6e29\u5ea6\u9ad8</p> </li> <li> <p>Memory Wall\uff1a\u4e8c\u5c42\u7f13\u51b2\u533aL2 cache\u53d8\u5927\u3001\u8868\u73b0\u53d8\u5dee\uff1bCPU\u6bd4\u5185\u5b58\u5feb\u5f97\u591a</p> </li> <li> <p>ILP Wall\uff1a\u96be\u4ee5\u5e76\u884c\u5904\u7406</p> </li> </ul>"},{"location":"CO/CO/#8-multiprocessors","title":"8. Multiprocessors","text":"<ul> <li> <p>\u786c\u4ef6\u4e0a\u7684\u5e76\u884c\uff1a\u591a\u6838</p> </li> <li> <p>Amdahl's Law:   $$   T_{improved}=\\frac{T_{affected}}{improvement \\ t \\ factor}+T_{unaffected}   $$</p> <ul> <li> <p>make common cases fast</p> </li> </ul> </li> <li> <p>MIPS as a Performance Metric</p> <ul> <li> <p>millions of instructions per second</p> </li> <li> <p>\u4e0d\u80fd\u7cbe\u786e\u53cd\u6620CPU\u6027\u80fd</p> </li> <li> <p>\u56e0\u4e3a\u6307\u4ee4\u6240\u5360\u5468\u671f\u6570\u4e0d\u540c</p> </li> </ul> </li> </ul> <p>assignment:1-1, 1-2, 1-4, 1-6, 1-7, 1-14</p>"},{"location":"CO/CO/#chapter-3-arithmetic-for-computer","title":"Chapter 3: Arithmetic for Computer","text":""},{"location":"CO/CO/#31-introduction","title":"3.1 Introduction","text":"<ul> <li> <p>\u8bfb\u3001\u5199\u5185\u5b58\uff1a</p> <ul> <li> <p>lw, sw: load word, \u8bfb\u53d632\u4f4d\u957f\u5ea6\u7684\u5185\u5b58</p> </li> <li> <p>ld, sd: load double word, 64\u4f4d</p> </li> <li> <p>lb, sb: load byte, \u4e00\u4e2a\u5b57\u8282</p> </li> <li> <p>\u6839\u636e\u8d77\u59cb\u5730\u5740\u8bfb\u53d6\u4e0d\u540c\u957f\u5ea6\u7684\u5185\u5bb9</p> </li> </ul> </li> <li> <p>ALU\u76f8\u5173\uff1a</p> <ul> <li>slt x1 x2,x3: set if less than, x1=(x2&lt;x3)</li> </ul> </li> <li> <p>\u5206\u652f\u8df3\u8f6c\u6307\u4ee4\uff1a</p> <ul> <li>beq, bne, jal: \u6709\u6761\u4ef6/\u65e0\u6761\u4ef6\u8df3\u8f6c</li> </ul> </li> </ul>"},{"location":"CO/CO/#32-possible-representation","title":"3.2 Possible representation","text":"<p>\u5df2\u7ecf\u4e86\u89e3\u76841's\u30012's\u6570\u7565</p> <ul> <li> <p>2's Biased notation</p> <ul> <li> <p>\\(= 2's complement + 2^n\\)</p> </li> <li> <p>\u6700\u5c0f\uff1a\\(-2^n\\)\uff0c\u8868\u793a\u4e3a000000000000\u00b7\u00b7\u00b7</p> </li> <li> <p>\u6700\u5927\uff1a\\(2^n\\)\uff0c11111111111\u00b7\u00b7\u00b7\u00b7</p> </li> <li> <p>\u4fbf\u4e8e\u6bd4\u8f83\u5927\u5c0f\uff08\u76f8\u5f53\u4e8e\u65e0\u7b26\u53f7\u6570\uff09</p> </li> </ul> </li> </ul>"},{"location":"CO/CO/#33-arithmetic","title":"3.3 Arithmetic","text":"<ul> <li> <p>Overflow\uff1a\u6ea2\u51fa\u5224\u65ad</p> <ul> <li> <p>\\(V = C_n \\oplus C_{n-1}\\)</p> </li> <li> <p>\u7b26\u53f7\u4f4d\u662f\u5426\u8fdb\u4f4d\u3001\u6700\u9ad8\u6570\u503c\u4f4d\u662f\u5426\u8fdb\u4f4d</p> </li> </ul> </li> </ul>"},{"location":"CO/CO/#34-multiplication","title":"3.4 Multiplication","text":"<p>\u7531\u79fb\u4f4d\u548c\u52a0\u6cd5\u7ec4\u6210</p> <ul> <li> <p>\u4e3a\u65b9\u4fbf\u8bf4\u660e\uff0c\u7ad6\u5f0f\u4e0a\u65b9\u7684\u662f\u88ab\u4e58\u6570\uff0c\u4e0b\u65b9\u662f\u4e58\u6570</p> </li> <li> <p>\u4e58\u6570\u662f1\uff1a\u88ab\u4e58\u6570\u79fb\u4f4d\u3001\u52a0\u5230\u7ed3\u679c\u4e2d</p> </li> <li> <p>\u4e58\u6570\u662f0\uff1a\u88ab\u4e58\u6570\u79fb\u4f4d\u3001add 0  \\(4\\times 4\\) =&gt;8\u4f4d\u52a0\u6cd5\u5668</p> </li> <li> <p>\u5927\u4e14\u6162\uff1a\\(64\\times64\\)=&gt;128\u4f4d\u52a0\u6cd5\u5668\u752864\u6b21</p> </li> </ul> <p>\u6539\u8fdb\uff1a</p> <ul> <li> <p>\u4e0d\u79fb\u88ab\u4e58\u6570\uff0c\u800c\u662f\u53f3\u79fb\u57fa\uff08\u5f97\u6570\uff09\uff0c\u56e0\u4e3a\u4f4e\u4f4d\u4e0d\u53c2\u4e0e\u540e\u7eed\u8fd0\u7b97</p> </li> <li> <p>\u52a0\u6cd5\u5668\u4f4d\u6570\u51cf\u534a </p> </li> </ul> <p>\u8fdb\u4e00\u6b65\uff1a\u5c06\u4e58\u6570\u653e\u5728\u57fa\u4e2d </p> <p>\u4e58\u6cd5\u4e0d\u80fd\u7528\u8865\u7801</p> <ul> <li> <p>\u6709\u7b26\u53f7\u6570\u7684\u4e58\u6cd5</p> <ul> <li> <p>\u5c06\u7b26\u53f7\u4fdd\u5b58</p> </li> <li> <p>\u8f6c\u6362\u4e3a\u7edd\u5bf9\u503c</p> </li> <li> <p>\u540c\u53f7\u4e3a\u6b63\uff0c\u5f02\u53f7\u4e3a\u8d1f</p> </li> </ul> </li> </ul> <p>Booth's Algorithm \uff1f</p> <ul> <li>\u4e0d\u592a\u61c2\u8fd9\u4e2a\uff0c\u653e\u51e0\u5f20\u56fe\uff0c\u4e0d\u8003\u5c31\u4e0d\u89e3\u91ca\u4e86  </li> <li>\u9ed8\u8ba4\\(C_{-1}\\)=0  </li> </ul> <p>\u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a \u7528\u591a\u4e2aALU\u5e76\u884c\u5b9e\u73b0</p>"},{"location":"CO/CO/#35-divide","title":"3.5 Divide","text":"<p>\u9664\u6cd5\u5b9e\u73b0\u57fa\u672c\u601d\u60f3\uff1a</p> <ol> <li> <p>\u5c06\u88ab\u9664\u6570\u6bcf\u6b21\u5de6\u79fb\uff0c\u51cf\u6389\u9664\u6570</p> </li> <li> <p>\u5982\u679c\u7ed3\u679c\u5927\u4e8e\u7b49\u4e8e0\uff0c\u5219\u6709\u6548\uff0c\u5728\u5546\u4e0a\u52a0\u4e00\u4e2a1</p> </li> <li> <p>\u5426\u5219\u65e0\u6548\uff0c\u5c06\u9664\u6570\u52a0\u56de\u53bb\uff0c\u5728\u5546\u4e0a\u52a0\u4e00\u4e2a0</p> </li> <li> <p>\u9700\u8981\u8fed\u4ee365\u6b21\uff0864\u4f4d\uff09     </p> </li> </ol> <p>\u5177\u4f53\u5b9e\u73b0\uff1a</p> <p>\u9664\u6570\u653e\u5728\u9ad8\u4f4d\uff0c\u88ab\u9664\u6570\u653e\u5728\u4f4e\u4f4d\uff0c\u6bcf\u6b21\u53f3\u79fb\u9664\u6570   </p> <p>\u6539\u8fdb\uff1a\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\u3002</p> <p>\u5c06\u88ab\u9664\u6570\u5de6\u79fb\uff0c\u79fb\u51fa\u6765\u7684\u4f4d\u7f6e\u653e\u5546\uff0c\u9ad8\u4f4d\u51cf\u5269\u4e0b\u6765\u7684\u662f\u4f59\u6570\uff0c\u4f1a\u591a\u79fb\u4e00\u4f4d\u3002\u56e0\u6b64\u6700\u540e\u8981\u628a\u9ad8\u4f4d\u53f3\u79fb\u4e00\u4f4d </p> <ul> <li> <p>\u7b26\u53f7\u7ea6\u5b9a\uff1a\u4f59\u6570\u548c\u88ab\u9664\u6570\u7b26\u53f7\u4e00\u81f4</p> </li> <li> <p>\u8f6f\u4ef6\u68c0\u67e5\u9664\u6570\u662f\u5426\u4e3a0\uff08\u5904\u7406\u5668\u4e0d\u7ba1\uff09</p> </li> </ul>"},{"location":"CO/CO/#36-float","title":"3.6 Float","text":"<ul> <li> <p>Bias: single\u2014\u2014127, double\u2014\u20141023</p> </li> <li> <p>1\u662f\u9690\u542b\u7684\uff08\u79d1\u5b66\u8ba1\u6570\u6cd5\uff09</p> </li> </ul> <p>\u4f8b\uff1a\\(15=1111=1.111\\times2^3\\)</p> <p>float: 0 10000010 111000...</p> <p>(Exponet = 3+127 = 130)</p> <p> \u5927\u7ea6\u76f8\u5f53\u4e8e6\u4f4d\u5341\u8fdb\u5236\u5c0f\u6570\u7cbe\u5ea6 </p> <ul> <li> <p>Exponent=00...0\u2014\u2014\u9690\u542b\u7684\u9996\u4f4d\u662f0</p> </li> <li> <p>0 00...0 00...0 =    </p> </li> </ul> <p>\u5982\u4f55\u8fdb\u884c\u8fd0\u7b97\uff1a</p> <ul> <li> <p>\u52a0\u6cd5</p> <ol> <li> <p>Alignment\uff08\u5bf9\u9f50\uff09</p> </li> <li> <p>The proper digits have to be added\uff08\u5c0f\u7684\u5f80\u5927\u7684\u9760\uff09</p> </li> <li> <p>Addition of significands</p> </li> <li> <p>Normalization of the result\uff08\u5f52\u4e00\u5316\uff09</p> </li> <li> <p>Rounding\uff08\u820d\u5165\uff0c\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u5f52\u4e00\u5316\uff09</p> </li> </ol> </li> </ul> <p></p> <ul> <li>\u4e58\u6cd5\uff1a</li> </ul> <p></p> <ul> <li>\u6307\u6570\u76f8\u52a0\uff0c\u8fd8\u8981\u51cf\u53bb127\uff08bias\uff09 </li> </ul> <p>Accurate Arithmeticd</p> <ul> <li> <p>\u4e3a\u63d0\u5347\u7cbe\u5ea6\uff0c\u6700\u591a\u52a0\u4e09\u4f4d(guard, round, sticky)</p> <ul> <li> <p>guard\u4f4d\u548cround\uff1a\u5728\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u591a\u4fdd\u7559\u4e24\u4f4d</p> </li> <li> <p>sticky\u4f4d\uff1a\u5728\u7ed3\u679c\u4f4d\u7684\u53f3\u8fb9\u5982\u6709\u4e0d\u4e3a0\u7684bit\uff0c\u5219\u4e3a1</p> <ul> <li>\u53ef\u4ee5\u5206\u8fa80.500000...0\u548c0.500000...1</li> </ul> </li> </ul> </li> </ul> <p>round\u65b9\u5f0f\u662f\u53ef\u9009\u7684</p>"},{"location":"CO/CO_2/","title":"Chapter 2","text":""},{"location":"CO/CO_2/#21-introduction","title":"2.1 Introduction","text":"<p>\u8ba1\u7b97\u673a\u7684\u8bed\u8a00\uff1a\u6307\u4ee4\u548c\u6307\u4ee4\u96c6</p> <p>\u8bbe\u8ba1\u76ee\u6807\uff1a\u6700\u5927\u5316\u8868\u73b0\u3001\u6700\u5c0f\u5316\u6d88\u8017\u3001\u51cf\u5c11\u8bbe\u8ba1\u65f6\u95f4</p> <p>\u6211\u4eec\u9009\u62e9\u7684\u6307\u4ee4\u96c6\uff1aRISC-V</p> <p>\u6307\u4ee4\u96c6\u51b3\u5b9a\uff1a</p> <ul> <li>\u6307\u4ee4\u600e\u6837\u5728\u5185\u90e8\u5b58\u50a8</li> <li>\u6709\u591a\u5c11 operand</li> <li>\u6307\u4ee4\u96c6\u4e2d\u7684\u6307\u4ee4\u600e\u6837\u6267\u884c</li> <li>\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\u548c\u5927\u5c0f</li> </ul>"},{"location":"CO/CO_2/#22-operations-of-the-computer-hardware","title":"2.2 Operations of the Computer Hardware","text":"<p>\u6bcf\u6761\u6307\u4ee4\u4e00\u4e2a\u8fd0\u7b97\uff0c\u4e09\u4e2a\u53d8\u91cf\uff08a = b + c\uff09</p> <p>\u8bbe\u8ba1\u539f\u7406\uff1a\u7b80\u5355\u6e90\u81ea\u89c4\u6574\uff0c\u8ba9\u6240\u6709\u8fd0\u7b97\u90fd\u4fdd\u6301\u4e09\u4e2a\u53d8\u91cf</p> <p>\u5c06\u590d\u6742\u7684\u9ad8\u7ea7\u6307\u4ee4\u8f6c\u6362\u4e3a\u53ea\u6709\u4e09\u4e2a\u64cd\u4f5c\u6570\u7684\u6c47\u7f16\u6307\u4ee4\uff1a</p> c<pre><code>f = ( g + h ) \u2013 ( i + j );\n</code></pre> RISC-V<pre><code>add t0, g, h // temporary variable t0 contains g + h\nadd t1, i, j // temporary variable t1 contains i + j\nsub f, t0, t1 // f gets t0 \u2013 t1\n</code></pre>"},{"location":"CO/CO_2/#23-operands-of-the-computer-hardware","title":"2.3 Operands of the Computer Hardware","text":"<p>Register Operands\uff08\u6bd4 Memory \u8bbf\u95ee\u5feb\uff09</p> <ul> <li>RISC-V \u4e2d 32 \u4e2a 64 \u4f4d\uff08doubleword\uff09\u5bc4\u5b58\u5668</li> <li>\u8bbe\u8ba1\u539f\u74062\uff1a\u8d8a\u5c11\u8d8a\u5feb\uff0c\u4e0d\u8d85\u8fc7 32 \u4e2a\u5bc4\u5b58\u5668</li> </ul> <p> </p> <p>Memory Operands</p> <ul> <li>\u53ef\u4ee5\u5b58\u50a8\u66f4\u591a\u7684\u6570\u636e\u4ee5\u53ca\u6210\u7247\u7684\u6570\u636e\uff08\u6570\u7ec4\u7b49\uff09</li> <li>\u7528 ld(load doubleword) \u8bfb\u53d6\u5230\u5bc4\u5b58\u5668\u3001sd(save doubleword) \u5b58\u50a8\u6765\u81ea\u5bc4\u5b58\u5668</li> <li>Memory is byte addressed\uff1aEach address identifies an 8-bit byte</li> <li>RISC-V \u662f\u5c0f\u7aef\uff0c\u4e14\u4e0d\u9700\u8981\u5b57\u5bf9\u9f50</li> </ul> <p></p> <p></p> <ul> <li>Memory \u9700\u8981\u66f4\u591a\u6761\u6307\u4ee4</li> </ul> c<pre><code>g = h + A[8] ; // A is an array of 100 doublewords\n( Assume: g ---- x20 h ---- x21 base address of A ---- x22 )\n</code></pre> RISC-V<pre><code>ld x9, 64(x22) // temporary reg x9 gets A[8]\nadd x20, x21, x9 // g = h + A[8]\n</code></pre> c<pre><code>g = h + A[i] ; // A is an array of 100 doublewords\n( Assume: g, h, i -- x1, x2, x4 base address of A -- x3 )\n</code></pre> RISC-V<pre><code>add x5, x4, x4 # temp reg x5 = 2 * i\nadd x5, x5, x5 # temp reg x5 = 4 * i\nadd x5, x5, x5 # temp reg x5 = 8 * i\nadd x5, x5, x3 # x5 = address of A[i] (8 * i + x3)\nld $x6, 0(x5) # temp reg x6 = A[i]\nadd x1, x2, x6 # g = h + A[i]\n</code></pre> <p>Constant</p> <p>\u83b7\u53d6\u65b9\u6cd5:</p> <ol> <li>\u63d0\u524d\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u7528 load \u6307\u4ee4\u83b7\u5f97</li> <li>\u653e\u5728\u6307\u4ee4\u4e2d\uff08\u5c0f\u7684\u6570\u7528\u7684\u591a\uff0c\u907f\u514d load\uff0cmake common case fast\uff09</li> </ol>"},{"location":"CO/CO_2/#24-signed-and-unsigned-numbers","title":"2.4 signed and unsigned numbers","text":"<p>2's \u8865\u7801\u90a3\u4e9b\u4e1c\u897f</p>"},{"location":"CO/CO_2/#25-representing-instruncrions-in-the-computer","title":"2.5 Representing Instruncrions in the computer","text":"<p>\u8bbe\u8ba1\u539f\u5219 4\uff1a\u597d\u7684\u8bbe\u8ba1\u9700\u8981\u597d\u7684\u6298\u8877\uff0c\u5c3d\u7ba1\u6709\u7684\u6307\u4ee4\u4e0d\u9700\u8981 32 bits\uff0c\u6211\u4eec\u8fd8\u662f\u4ee4\u5176\u5168\u4e3a 32 bits</p> <p>\u6307\u4ee4\u683c\u5f0f\uff1a </p> <ul> <li> <p>I \u578b\u6307\u4ee4\uff1a\u6ce8\u610f imm \u662f 2's \u8868\u793a\uff0c\u9700\u8981\u7b26\u53f7\u6269\u5c55\u5230\u76f8\u5e94\u4f4d\u6570</p> </li> <li> <p>\u9ad8\u7ea7\u6307\u4ee4-&gt;\u6c47\u7f16\u6307\u4ee4-&gt;\u673a\u5668\u7801</p> </li> </ul> <p>\u5165\u4fb5\u66f4\u6539\u7a0b\u5e8f</p>"},{"location":"CO/CO_2/#26-logical-operations","title":"2.6 Logical Operations","text":"<p>\u79fb\u4f4d\u3001\u4e0e\u3001\u6216\u3001\u5f02\u6216\u3001\u975e</p> <p></p> <ul> <li>useful and\uff1a\u4fdd\u7559\u67d0\u4e9b\u4f4d\uff0c\u5c06\u5176\u4ed6\u4f4d\u8bbe\u4e3a 0</li> <li>or\uff1a\u4fdd\u7559\u67d0\u4e9b\u4f4d\uff0c\u5c06\u5176\u4ed6\u4f4d\u8bbe\u4e3a 1</li> </ul>"},{"location":"CO/CO_2/#27-instruction-for-making-decision","title":"2.7 Instruction for making decision","text":"<p>\u5206\u652f\u8df3\u8f6c</p> <p>c<pre><code>f ( i = = j ) f = g + h ; else f = g \u2013 h; \n</code></pre> ( Assume: f ~ j ---- x19 ~ x23 ) RISC-V<pre><code>bne x22, x23, ELSE // go to ELSE if i != j\nadd x19, x20, x21 // f = g + h ( skipped if i not equals j )\nbeq x0, x0, EXIT\nELSE: sub x19, x20, x21 // f = g - h ( skipped if i equals j )\nEXIT:\n</code></pre></p> <p>\u5faa\u73af</p> c<pre><code>while ( save[i] = = k )\n    i += 1 ;\n</code></pre> <p>( Assume: i and k---- x22 and x24 base of save ---- x25 )</p> RISC-V<pre><code>Loop:   slli x10, x22, 3 // Temp reg x10 = i * 8\n        add x10, x10, x25 // x10 = address of save[i]\n        ld x9, 0(x10) // x9 gets save[i]\n        bne x9, x24, Exit // go to Exit if save[i] != k\n        addi x22, x22, 1 // i += 1\n        beq x0, x0, Loop // go to Loop\nExit:\n</code></pre> <p>\u5176\u4ed6\u7684\u6761\u4ef6\u8df3\u8f6c\uff08\u6709\u7b26\u53f7\u6570\u7684\u6bd4\u8f83\uff09\uff1a</p> <ul> <li> <p><code>blt rs1, rs2, L1</code></p> <p>\u5982\u679crs1&lt;rs2\uff0c\u8df3\u8f6c\u5230Lable L1\u5904</p> </li> <li> <p><code>bge rs1, rs2, L1</code></p> <p>\u5982\u679crs1&gt;=rs2\uff0c\u8df3\u8f6c\u5230Lable L1\u5904</p> </li> </ul> <p>\u4e5f\u53ef\u4ee5\u7528 slt \u6307\u4ee4\u8fdb\u884c\u8df3\u8f6c</p> <ul> <li> <p><code>slt x2, x3, x4</code></p> <p>set on less than\u2014\u2014\u5982\u679cx3&lt;x4\uff0c\u5c06x2\u8bbe\u4e3a1\uff082's \u6709\u7b26\u53f7\u6570\u7684\u6bd4\u8f83\uff09</p> </li> </ul> C<pre><code>if (a &lt; b), goto Less\n</code></pre> use blt<pre><code>blt x6, x7, Less\n</code></pre> use slt<pre><code>        slt x5, x6, x7 # x5 = 1 if x6 &lt; x7 ( a &lt; b) \n        bne x5, x0, Less # go to Less if x5 != 0 (that is, if a &lt; b)\n        \u2026\u2026 \nLess:\n</code></pre> <p>slt \u4e5f\u88ab\u7528\u6765\u4ea7\u751f '1'</p> <p>\u65e0\u7b26\u53f7\u6570\u6bd4\u8f83\u7684\u6307\u4ee4\uff1abltu, bgeu</p> <ul> <li><code>bgeu x20, x11, Outbound</code></li> </ul> <p>Case/Switch \u8bed\u53e5</p> <ul> <li>\u8f6c\u6362\u6210\u6c47\u7f16\u4ee3\u7801\u540e\uff0c\u5206\u652f\u8bed\u53e5\u5728memory\u4e2d\u50cf\u6570\u7ec4\u4e00\u6837\u8fde\u7eed\u5b58\u50a8</li> <li>\u6839\u636e\u504f\u79fb\u91cf\u8bbf\u95ee\uff08jump address table\uff09</li> </ul> <p></p> c<pre><code>switch ( k ) {\ncase 0 : f = i + j ; break ; /* k = 0 */\ncase 1 : f = g + h ; break ; /* k = 1 */\ncase 2 : f = g - h ; break ; /* k = 2 */\ncase 3 : f = i - j ; break ; /* k = 3 */\n}\n</code></pre> RISC-V<pre><code>        lt x25, x0, Exit // test if k &lt; 0 \n        bge x25, x5, Exit // if k &gt;= 4, go to Exit\n        slli x7, x25, 3 // temp reg x7 = 8 * k\n        add x7, x7, x6 // x7 = address of JumpTable[k]\n        ld x7, 0(x7) // x7 gets JumpTable[k]\n        jalr x1, 0(x7) // jump entrance\nExit:\n</code></pre> <p></p> <p>Basic blocks: \u4e00\u6bb5\u6ca1\u6709\u8df3\u8f6c\u7684\u8fde\u7eed\u6307\u4ee4\uff0c\u53ef\u4ee5\u88ab\u7f16\u8bd1\u5668\u4f18\u5316</p>"},{"location":"CO/CO_2/#28-supporting-procedures-in-conputer-hardware","title":"2.8 Supporting Procedures in Conputer Hardware","text":"<p>\u8fc7\u7a0b\u8c03\u7528\uff08\u51fd\u6570\uff09</p> <p>step\uff1a</p> <ol> <li>Place Parameters in a place where the procedure can access them \uff08in registers x10~x17\uff09</li> <li>Transfer control to the procedure</li> <li>Acquire the storage resources needed for the procedure</li> <li>Perform the desired task</li> <li>Place the result value in a place where the calling program can access it </li> <li>Return control to the point of origin (address in x1)</li> </ol> <p><code>jal x1, Lable</code> - \u8df3\u8f6c\u5230 Lable\uff0cPC + 4 \u5b58\u5230 x1</p> <p><code>jalr x0, 0(x1)</code> - jumps to 0 + address in x1</p> <p>\u9700\u8981\u7528\u66f4\u591a\u7684\u5bc4\u5b58\u5668</p> <ul> <li> <p>\u8fc7\u7a0b\u8c03\u7528\u4e2d\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\uff1a</p> <ul> <li>x10~x17\uff1a\u4f20\u9012\u53c2\u6570\u548c\u8fd4\u56de\u7ed3\u679c\u76848\u4e2a\u5bc4\u5b58\u5668</li> <li>x1\uff1a\u8bb0\u5f55return\u5730\u5740\u7684\u5bc4\u5b58\u5668</li> </ul> </li> <li> <p>stack \u662f\u5b58\u50a8\u6570\u636e\u7684\u7406\u60f3\u5730\u65b9</p> </li> <li>Stack grow from higher address to lower address</li> <li>Push: sp= sp-8</li> <li>Pop: sp = sp+8</li> </ul> <p>Leaf procedure\uff1a\u4e0d\u4f1a\u8c03\u7528\u522b\u7684\u8fc7\u7a0b\u7684\u8fc7\u7a0b</p> <ul> <li>\u628a\u8981\u7528\u7684\u5bc4\u5b58\u5668\u5b58\u5230\u6808\u4e2d\uff0c\u7528\u5b8c\u540e\u518dld\u56de\u6765</li> </ul> C<pre><code>long long int leaf_example (\nlong long int g, long long int h,\nlong long int i, long long int j) {\nlong long int f;\n    f = (g + h) - (i + j);\n    return f;\n}\n</code></pre> <ul> <li>Arguments g, \u2026, j in x10, \u2026, x13, f in x20</li> <li>temporaries x5, x6</li> <li>Need to save x5, x6, x20 on stack</li> </ul> <p>leaf_example:<pre><code>leaf_example:\n    addi sp,sp,-24\n    sd x5,16(sp)\n    sd x6,8(sp)\n    sd x20,0(sp)// Save x5, x6, x20 on stack\n    add x5,x10,x11// x5 = g + h\n    add x6,x12,x1// x6 = i + j\n    sub x20,x5,x6// f = x5 \u2013 x6\n    addi x10,x20,0// copy f to return register\n    ld x20,0(sp)\n    ld x6,8(sp)\n    ld x5,16(sp)// Resore x5, x6, x20 from stack\n    addi sp,sp,24\n    jalr x0,0(x1)// Return to caller\n</code></pre> Register Usage</p> <ul> <li>x5-x7\uff0cx28-x31\uff1atemporary register\uff08\u968f\u4fbf\u7528\uff09</li> <li>x8-x9\uff0cx18-x27\uff1asaved register\uff08\u9700\u8981\u538b\u6808\uff09</li> </ul> <p>Non-leaf procedure</p> <ul> <li>return\u7684\u5730\u5740\u4f1a\u6539\u53d8</li> <li>\u56e0\u6b64\u9700\u8981\u628a\u8fd4\u56de\u5730\u5740 x1 \u538b\u6808</li> <li>\u4ee5\u53ca\u5b58\u50a8\u7ed3\u679c\u7684\u5bc4\u5b58\u5668\u4e5f\u8981\u538b\u6808</li> </ul> <p>\u9012\u5f52\u6c42\u9636\u4e58\u4e3a\u4f8b</p> C<pre><code>long long fact ( long long n ) \n{\n    if ( n &lt; 1 ) return ( 1 ) ;\n    else return ( n * fact ( n - 1 ) ) ;\n}\n</code></pre> <p>argument n is in x10, and results in x10</p> <pre><code>fact:   addi sp, sp, 16 // adjust stack for 2 items\n        sd x1, 8(sp) // save the return address\n        sd x10, 0(sp) // save the argument n\n        addi x5, x10, -1 // x5 = n - 1\n        bge x5, x0, L1 // if n &gt;= 1, go to L1(else)\n        addi x10, x0, 1 // return 1 if n &lt;1\n        addi sp, sp, 16 // Recover sp (Why not recover x1and x10 ?)\n        jalr x0, 0(x1) // return to caller\n\nL1: addi x10, x10, -1 // n &gt;= 1: argument gets ( n - 1 )\n    jal x1, fact // call fact with ( n - 1 )\n    add x6, x10, x0\n    ld x10, 0(sp) // restore argument n\n    ld x1, 8(sp) // restore the return address\n    addi sp, sp, 16 // adjust stack pointer to pop 2 items\n    mul x10, x10, x6 // return n*fact ( n - 1 )\n    jalr x0, 0(x1) // return to the caller\n</code></pre> <p>\u9012\u5f52\u7684\u574f\u5904\uff1a\u6d88\u8017\u5927\u91cf\u8d44\u6e90\u4fdd\u62a4\u5bc4\u5b58\u5668\u7684\u503c\u3001\u9700\u8981\u5927\u91cf\u5185\u5b58\u7a7a\u95f4\uff08\u538b\u6808\uff09\uff0cloop\u53ef\u4ee5\u89e3\u51b3\uff08\u7279\u522b\u662f\u5c3e\u9012\u5f52\uff09</p> <p>\u603b\u7ed3\uff08\u662f\u5426\u9700\u8981\u4fdd\u7559\uff09</p> <p></p> <ul> <li>Procedure frame and frame pointer ( x8 or fp ) - \u4fdd\u5b58 C \u4e2d\u7684\u81ea\u52a8\u53d8\u91cf</li> <li>Global pointer ( x3 or gp ) - \u4fdd\u5b58 C \u4e2d\u7684\u9759\u6001\u53d8\u91cf</li> </ul> <p></p> <p></p>"},{"location":"CO/CO_2/#29-communication-with-people","title":"2.9 communication with people","text":"<p>\u5b57\u7b26\u7684\u8868\u793a\u65b9\u6cd5:</p> <ul> <li>ascii\u7801\uff08128\u4e2a\u5b57\u7b26\uff09</li> <li>unicode\uff0816-bit/32-bit\uff09</li> </ul> <p>load\u548cstore\u6307\u4ee4</p> <ul> <li>Load byte/halfword/word: Sign extend to 64 bits in rd<ul> <li>lb rd, offset(rs1)</li> <li>lh rd, offset(rs1)</li> <li>lw rd, offset(rs1)</li> </ul> </li> <li>Load byte/halfword/word unsigned: Zero extend to 64 bits in rd<ul> <li>lbu rd, offset(rs1)...</li> </ul> </li> <li>Store byte/halfword/word: Store rightmost 8/16/32 bit<ul> <li>sb rs2, offset(rs1)</li> <li>sh rs2, offset(rs1)</li> <li>sw rs2, offset(rs1)</li> </ul> </li> </ul> <p>\u5b57\u7b26\u4e32\u7684\u8868\u793a\u65b9\u6cd5</p> <ul> <li>Place the length of the string in the first position(JAVA)</li> <li>An accompanying variable has the length</li> <li>A character in the last position to mark the end of a string(C)</li> </ul> <p>\u62f7\u8d1d\u5b57\u7b26\u4e32\u7684\u4f8b\u5b50</p> <pre><code>void strcpy ( char x[ ] , char y[ ] )\n{\n    size_t i ;\n    i = 0 ;\n    while ( ( x[ i ] = y[ i ] ) != \u2018\\ 0\u2019 ) /* copy and test byte */\n        i += 1 ;\n    }\n</code></pre> <p>( Assume: i -- x19\uff0c x\u2019s base --x10, y\u2019s base ----x11) <pre><code>strcpy: addi sp, sp, -8 // adjust stack for 1 doubleword\n        sd x19, 0(sp) // save x19\n        add x19, x0, x0 // i = 0\nL1:     add x5, x19, x11 // address of y[ i ] in x5\n        lbu x6, 0(x5) // x6 = y [ i ]\n        add x7, x19, x10 // address of x[ i ] in x7\n        sb x6, 0(x7) // x[ i ] = y[ i ]\n        beq x6, x0, L2 // if y[ i ] == 0, go to L2 \n        addi x19, x19, 1 // i = i + 1\n        jal x0, L1 // go to L1 \nL2:     ld x19, 0(sp) // restore x19\n        addi sp, sp, 8 // pop 1 doubleword off stack\n        jalr x0, 0(x1) // return\n</code></pre></p> <p>\u4f18\u5316\uff1a\u53f6\u5b50\u7a0b\u5e8f\u5148\u4f7f\u7528\u4e0d\u9700\u8981 save \u7684 temp \u5bc4\u5b58\u5668\uff0c\u518d\u4f7f\u7528\u5fc5\u987b save \u7684</p>"},{"location":"CO/CO_2/#210-addressing-for-wide-immediate-and-addresses","title":"2.10 Addressing for Wide Immediate and Addresses","text":"<p><code>lui rd, constant</code> - U\u578b\u6307\u4ee4\uff08\u524d20\u4f4d\u662f\u7acb\u5373\u6570\uff0c\u63a5\u4e0b\u67655\u4f4d\u662f\u76ee\u7684\u5bc4\u5b58\u5668\uff0c\u6700\u540e\u662f\u64cd\u4f5c\u7b26\uff09</p> <p>\u5c06\u7acb\u5373\u6570\u5b58\u5728\u76ee\u7684\u5bc4\u5b58\u5668\u4e2d\uff0c\u540e\u9762\u8865\u96f6</p>   `lui x19, 976 `   <p></p> <p>\u5982\u679c\u6211\u4eec\u60f3\u8981 <code>li  b0000 0000 0011 1101 0000 1001 0000 0000</code></p> <p>\u5fc5\u987b\u5206\u4e24\u6b65\uff1a<code>lui 0000 0000 0011 1101 0000</code> <code>addi 1001 0000 0000</code>\uff08\u5bc4\u5b58\u5668\u7565\uff09</p> <p>\u5bc4\u5b58\u5668\u7684\u9ad832\u4f4d\u4f1a\u8fdb\u884c\u7b26\u53f7\u6269\u5145</p> <p>Branch Addressing</p> <p><code>bne x10, x11, 2000</code> - SB\u578b\u6307\u4ee4\uff082000 - \u8df3\u8f6c\u504f\u79fb\u91cf\uff09</p> <p></p> <ul> <li>\u7acb\u5373\u6570\u672b\u5c3e\u8865\u96f6\uff08\u76f8\u5f53\u4e8e\u4e58\u4e8c\uff09</li> </ul> <p>\u8df3\u8f6c\u8303\u56f4\uff1a\\(\\pm 2^{12}\\)\u4e2abyte\uff0c\u5373\\(\\pm 4\\)k\u4e2a\u5b57\u8282</p> <p>Jump Addressing</p> <p>\u65e0\u6761\u4ef6\u8df3\u8f6c</p> <p><code>jal x0, 2000</code> - j\u578b\u6307\u4ee4\uff08\u53ea\u6709\u8fd9\u4e00\u6761\uff09</p> <p></p> <p>\u8df3\u8f6c\u8303\u56f4\\(\\pm 1\\)G\u5b57\u8282</p> <ul> <li>For long jumps, eg, to 32-bit absolute address<ul> <li>lui: load address[31:12] to temp register</li> <li>jalr: add address[11:0] and jump to target</li> </ul> </li> </ul> \u4e00\u6b21\u8df3\u8f6c\u4e0d\u4e86<pre><code>beq x10, x0, L1\n\n// \u8f6c\u6362\u6210\n    bne x10, x0, L2\n    jal x0, L1\nL2\n</code></pre> <p>\u5bfb\u5740Summary</p> <p></p>"},{"location":"CO/CO_2/#211-parallelism-and-instructions-synchronization","title":"2.11 Parallelism and Instructions: Synchronization","text":"<p>\u5728load\u548csave\u65f6\uff0c\u53ef\u80fd\u6709\u5e76\u884c\u7684\u7a0b\u5e8f\u5bfc\u81f4\u5730\u5740\u4e0d\u53ef\u7528\uff0c\u64cd\u4f5c\u5931\u8d25\uff0c\u56e0\u6b64\u52a0\u5165\u5224\u65ad</p> <ul> <li>Load reserved: lr.d rd,(rs1)<ul> <li>\u628a rs1 \u5730\u5740\u91cc\u7684\u503c\u5b58\u5728 rd \u4e2d</li> <li>\u4fdd\u6301\u5730\u5740\u5b58\u653e\u7684\u4e1c\u897f\u4e0d\u53d8</li> </ul> </li> <li>Store conditional: sc.d rd,(rs1),rs2<ul> <li>\u628a rs2 \u7684\u503c\u5b58\u5728 rs1 \u4e2d\u7684\u5730\u5740\u91cc</li> <li>\u6210\u529f\u65f6\uff08location \u6ca1\u53d8\uff09\u8fd4\u56de0</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de\u975e\u96f6\u503c</li> </ul> </li> </ul> <p>Example 1: atomic swap(to test/set lock variable)</p> <pre><code>again:  lr.d x10,(x20)\n        sc.d x11,(x20),x23 // X11 = status\n        bne x11,x0,again // branch if store failed\n        addi x23,x10,0 // X23 = loaded value\n</code></pre> <p>Example 2: lock <pre><code>        addi x12,x0,1 // copy locked value\nagain:  lr.d x10,(x20) // read lock\n        bne x10,x0,again // check if it is 0 yet\n        sc.d x11,(x20),x12 // attempt to store\n        bne x11,x0,again // branch if fails\n</code></pre></p> <p>Unlock: <code>sd x0,0(x20) // free lock</code></p> <p>\u5176\u4ed6\u6307\u4ee4</p> <ul> <li><code>aulpc</code></li> </ul> <p>M: integer multiply, divide, remainder \uf070 A: atomic memory operations \uf070 F: single-precision floating point \uf070 D: double-precision floating point \uf070 C: compressed instructions</p>"},{"location":"CO/CO_2/#212-translating-and-starting-a-program","title":"2.12 Translating and Starting a Program","text":"<p>object file \u548c executable file</p> <ul> <li> <p>\u9759\u6001\u94fe\u63a5\uff1a\u5c06\u5e93\u6587\u4ef6\u6574\u4e2acopy\uff0c\u4e0d\u5b9e\u65f6\u66f4\u65b0</p> </li> <li> <p>\u52a8\u6001\u94fe\u63a5\uff08Dynamic Linking\uff09</p> </li> <li> <p>Lazy Linkage: </p> </li> <li> <p>Java application</p> </li> </ul>"},{"location":"CO/CO_2/#213-c-example","title":"2.13 C Example","text":"<p>\u8c03\u7528\u5b50\u51fd\u6570\uff1a\u5c06\u9700\u8981\u4fdd\u6301\u7684\u5bc4\u5b58\u5668\u5b58\u8d77\u6765</p> <ul> <li>\u5b58\u5230\u6808\u4e2d</li> <li>\u5b58\u5230\u53e6\u4e00\u5bc4\u5b58\u5668\u2014\u2014\u6548\u7387\u66f4\u9ad8</li> </ul> <p>\u7ea6\u5b9a\uff1a</p> <ul> <li>\u7236\u51fd\u6570\u4fdd\u8bc1\uff1a\u5b50\u51fd\u6570\u80fd\u968f\u4fbf\u4f7f\u7528temporary registers (x5-x7, x28-x31)\uff0c\u8fd4\u56de\u7ed9\u7236\u51fd\u6570\u7684\u65f6\u5019\uff0cx5-x7, x28-x31\u7684\u503c\u53ef\u4ee5\u88ab\u6539\u53d8\u3002</li> <li>\u5b50\u51fd\u6570\u4fdd\u8bc1\uff1a\u8fd4\u56de\u7ed9\u7236\u51fd\u6570\u7684\u65f6\u5019\uff0csaved registers(x18-x27) \u4fdd\u6301\u7236\u51fd\u6570\u8c03\u7528\u5b50\u51fd\u6570\u524d\u7684\u503c\u3002</li> </ul> <p>\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u6548\u679c</p> <p></p> <p>\u6548\u679c\u4e0e\u7b97\u6cd5\u6709\u5173</p> <p>\u7b97\u6cd5\u5f88\u91cd\u8981</p> <p>\u4e0a\u8282\u8bfe\uff1ab\u3001j\u3001u\u578b\u6307\u4ee4</p> <p>Leaf - temperor register</p> <p>Father - saved register</p> <p>\u8bbf\u95ee\u6570\u7ec4\u7684\u4e24\u4e2a\u65b9\u5f0f</p> <ul> <li>\u7d22\u5f15 - <code>array[i]</code></li> <li>\u6307\u9488 - <code>*p = array[0]</code>\uff0c\u901a\u8fc7<code>*p</code>\u8bbf\u95ee</li> </ul> <p></p> <ul> <li>\u6570\u7ec4\u5927\u65f6\uff0c\u540e\u8005\u597d\uff08\u524d\u8005\u9700\u8981 i \u4e58 size\uff09</li> <li>\u5927\u5c0f\u4e3a 0 \u65f6\uff0c\u4f1a\u65e0\u9650\u5faa\u73af\uff08\u9700\u8981\u5224\u65ad\uff09</li> </ul> <p>\u5b9e\u9645\u4e0a\u5728\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u4e0b\u65e0\u533a\u522b</p>"},{"location":"CO/CO_2/#214-real-stuff-mips-x86","title":"2.14 Real Stuff: MIPS &amp; x86","text":"<p>MIPS \u548c Risc-5 \u7684\u76f8\u4f3c\u70b9\uff1a</p> <ul> <li>\u6307\u4ee4 32 \u4f4d</li> <li>32 \u4e2a\u76ee\u7684\u5bc4\u5b58\u5668\uff0c32\u4e2a\u6d6e\u70b9\u5bc4\u5b58\u5668</li> <li>\u5185\u5b58\u53ea\u80fd\u7528 load/save \u8bbf\u95ee</li> </ul> <p>\u4e0d\u540c\u70b9\uff1a</p> <ul> <li>\u5206\u652f\u8df3\u8f6c\u4e0d\u540c MIPS \u53ea\u7528 slt\u3001sltu\uff0c\u518d\u7528 beq\u3001bne</li> </ul> <p></p> <p>\u4e0a\u56fe MIPS \u4e2d\uff0cRs2 \u662f\u76ee\u7684\u5bc4\u5b58\u5668\uff08ld \u5b58\u6570\u636e\u5230 Rs2 \u4e2d\uff0cst \u628a Rs2 \u4e2d\u7684\u6570\u636e\u5b58\u5230\u5185\u5b58\u4e2d\uff09</p> <p>X86\uff1a\u591a\u5e74\u6539\u8fdb\u5f97\u5230\uff0c\u517c\u5bb9</p> <p>\u4ee5 386 \u4e3a\u4f8b</p> <ul> <li>\u6bcf\u6761\u6307\u4ee4\u6709\u4e24\u4e2a\u64cd\u4f5c\u7b26,\u53ef\u4ee5\u5728\u4e00\u6761\u6307\u4ee4\u8bfb\u53d6\u3001\u8ba1\u7b97\u3001\u5b58\u56de</li> <li>\u591a\u79cd\u5bfb\u5740\u6a21\u5f0f</li> <li>\u6307\u4ee4\u6709\u957f\u6709\u77ed</li> </ul>"},{"location":"CO/CO_3/","title":"Chapter 4","text":""},{"location":"CO/CO_3/#introduction","title":"Introduction","text":"<p>\u5f71\u54cd CPU \u8868\u73b0\u7684\u56e0\u7d20\uff1a</p> <ul> <li>Instruction count: ISA \u548c \u7f16\u8bd1\u5668\u51b3\u5b9a</li> <li>CPI \u548c\u65f6\u949f\u5468\u671f\u957f\u5ea6: \u786c\u4ef6\u51b3\u5b9a</li> </ul> <p>\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e24\u79cd\u7248\u672c CPU\uff1a\u5355\u5468\u671f\u548c\u6d41\u6c34\u7ebf</p> <p>\u6307\u4ee4\u7684\u5927\u7c7b\uff1a</p> <ul> <li>Memory reference: ld, sd</li> <li>Arithmetic/logical: add, sub, and, or, slt</li> <li>Control transfer: beq\uff0cjal</li> </ul> <p>\u6240\u6709\u6307\u4ee4\u90fd\u6709\u7684\u4e24\u6b65\uff1a\u5185\u5b58\u53d6\u6307\uff0c\u8bd1\u7801\u8bfb\u5bc4\u5b58\u5668</p> <p>CPU \u4e2d\u7684\u91cd\u8981\u6a21\u5757\uff1aALU\u3001Memery\uff08\u6307\u4ee4\u53ea\u8bfb\uff0c\u6570\u636e\u53ef\u8bfb\u5199\uff09\u3001Regfile\u3001\u7acb\u5373\u6570\u4ea7\u751f\u5668</p> <p></p> <p>\u7ec4\u6210\u7684 CPU \u5927\u81f4\u5982\u4e0b\uff1a</p> <p></p> <p>\u591a\u8def\u4fe1\u53f7\u7684\u5730\u65b9\u90fd\u9700\u8981\u591a\u8def\u9009\u62e9\u5668</p> <p>\u591a\u8def\u9009\u62e9\u5668\u9700\u8981\u63a7\u5236\u4fe1\u53f7</p> <p>\u90fd\u52a0\u5165\u5b8c\u5584\u540e\u5f97\u5230\u4e0b\u9762\u7684 CPU </p>"},{"location":"CO/CO_3/#building-a-datapath","title":"Building a datapath","text":"<p>Datapath\uff1aElements that process data and addresses in the CPU</p> <ul> <li>RISC-V \u6307\u4ee4\u96c6\uff1a     </li> </ul> <p>\u5bc4\u5b58\u5668\u548c\u5185\u5b58\uff1a</p> <ul> <li>32 \u4e2a\u5bc4\u5b58\u5668\uff0cx0 \u6052\u7b49\u4e8e 0</li> <li>\\(2^{61}\\) memory words\uff0c\u4e00\u4e2a word 4 \u4e2a byte\uff08\u53ef\u4ee5\u8bbf\u95ee Mem[0]\u3001Mem[8] \u00b7\u00b7\u00b7 Mem[18446744073709551608]\uff09</li> </ul> <p></p> <p>\u6267\u884c\u6307\u4ee4\u7684\u6b65\u9aa4\uff1a</p> <ol> <li>Fetch</li> <li>Instruction decoding &amp; Read Operand</li> <li>Executive Control</li> <li>Memory access</li> <li>Write results to register</li> <li>Modify PC (branch)</li> </ol> <p>\u5b8c\u6574\u7684\u6570\u636e\u901a\u8def\uff08\u6ce8\u610f imm \u51fa\u53bb\u540e\u7684 shift left 1 \u662f\u56e0\u4e3a SB \u578b\u6307\u4ee4\u4e0d\u5b58\u7acb\u5373\u6570\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u4ee5\u4fbf\u83b7\u5f97\u66f4\u5927\u7684\u8df3\u8f6c\u8303\u56f4\uff09</p> <p></p>"},{"location":"CO/CO_3/#control-unit","title":"Control Unit","text":"<p>\u9700\u8981\u53c2\u7167\u7684\u6307\u4ee4\u90e8\u5206\uff08\u84dd\u8272\uff09</p> <p></p> <p>\u53ef\u4ee5\u591a\u5c42\u89e3\u7801\u751f\u6210 ALU \u63a7\u5236\u4fe1\u53f7\uff08\u8fd9\u6837\u5728\u5f00\u59cb\u65f6\u53ef\u4ee5\u53ea\u4f20 ins[6:0]\uff09</p> <p></p> <p>\u6b64\u65f6\u7684 Decoder\uff1a</p> <p></p> <p>\u6216\u8005\u4e00\u5c42\u7528case\u8bed\u53e5test</p> <p>Performence\uff08cycle time\uff09\u53d6\u51b3\u4e8e\u6700\u6162\u7684\u6307\u4ee4\uff0c\u4e00\u4e9b\u90e8\u4ef6\u5728\u67d0\u4e9b\u6307\u4ee4\u6ca1\u6709\u7528\u5230</p> <p>\u63d0\u5347\uff1a\u6d41\u6c34\u7ebf</p>"},{"location":"CO/CO_3/#exception","title":"Exception","text":"<ul> <li>CPU \u5185\u90e8\u7684\u4e2d\u65ad\u4fe1\u53f7\uff08\u540c\u6b65\uff09\u2014\u2014 Exception</li> <li>CPU \u5916\u90e8\uff08\u5f02\u6b65\uff09\u2014\u2014 Interuption</li> </ul> <p>\u5904\u7406\u4e2d\u65ad\u4fe1\u53f7\uff1a</p> <ol> <li>\u4fdd\u5b58 CPU \u72b6\u6001<ol> <li>\u4fdd\u5b58\u88ab\u6253\u65ad\u7684\u4fe1\u53f7\u7684 PC\uff0cIn RISC-V \u4fdd\u5b58\u5728 Supervisor Exception Program Counter\uff08mEPC\uff09</li> <li>\u4fdd\u5b58\u95ee\u9898\u7684\u8bf4\u660e\uff0cIn RISC-V \u4fdd\u5b58\u5728 Supervisor Exception Cause Register (mCAUSE)</li> </ol> </li> <li> <p>\u5904\u7406\u5f02\u5e38\uff1a\u8df3\u8f6c\u5230 mtvec \u5bc4\u5b58\u5668\u63d0\u4f9b\u7684\u5730\u5740\u89e3\u51b3\u95ee\u9898</p> <ol> <li>\u8bfb\u53d6 mCAUSE\uff0c\u5e76\u8f6c\u81f3\u76f8\u5173\u5904\u7406\u7a0b\u5e8f</li> <li>\u786e\u5b9a\u9700\u8981\u8fdb\u884c\u7684\u64cd\u4f5c</li> <li>\u53ef\u884c\u7684\u8bdd\u5904\u7406\u5b8c\u6bd5\u540e\u56de\u5f52</li> <li>\u4e0d\u884c\u7684\u8bdd\u7ec8\u6b62\u7a0b\u5e8f\uff0c\u62a5\u544a SEPC\u3001SCAUSE</li> </ol> </li> <li> <p>\u56de\u5230\u6b63\u5e38\u6d41\u7a0b\uff08In RISC-V \u673a\u5668\u6a21\u5f0f\uff0c\u4f7f\u7528MRET\u9000\u51fa\u6307\u4ee4\uff0c\u8fd4\u56de\u5230SEPC\u5b58\u50a8\u7684pc\u5730\u5740\u5f00\u59cb\u6267\u884c\uff09</p> </li> </ol> <p>\u6839\u636e\u4ee5\u4e0a\u6d41\u7a0b\uff0c\u6211\u4eec\u9700\u8981\uff1a</p> <ul> <li>Transfer control to exception handler &amp; return from exception</li> <li>Control status registers</li> <li>CSR instructions</li> </ul> <p>RISC-V \u7684\u6743\u9650\u6a21\u5f0f\uff08\u673a\u5668\u6a21\u5f0f\u6743\u9650\u6700\u9ad8\u4e14\u5fc5\u987b\u63d0\u4f9b\uff09</p> <p>\u5728\u673a\u5668\u6a21\u5f0f\uff08M \u6a21\u5f0f\uff09\u4e0b\u8fd0\u884c\u7684\u4ee3\u7801\u901a\u5e38\u672c\u8d28\u4e0a\u662f\u53ef\u4fe1\u7684\uff0c\u56e0\u4e3a\u5b83\u5bf9\u673a\u5668\u5b9e\u73b0\u5177\u6709\u4f4e\u7ea7\u8bbf\u95ee\u6743\u9650\u3002</p> <p>M \u6a21\u5f0f\u53ef\u7528\u4e8e\u7ba1\u7406 RISC-V \u4e0a\u7684\u5b89\u5168\u6267\u884c\u73af\u5883\u3002 </p> <p>\u5b9e\u73b0\u591a\u4e2a\u6743\u9650 mode \u66f4\u52a0\u5b89\u5168</p> <p>Control and Status Registers (CSRs)</p> <ul> <li>additional set of registers\uff0c\u53ef\u4ee5\u88ab CSR \u6307\u4ee4\u8bbf\u95ee\uff08\u67d0\u4e9b\u6a21\u5f0f\uff09</li> <li>CSR \u6307\u4ee4\u5206\u4e3a\uff1a atomically read-modify-write CSR \u548c\u6240\u6709\u5176\u4ed6\u7279\u6743\u6307\u4ee4</li> </ul> <p>\u6307\u4ee4\u683c\u5f0f\uff1a</p> <ul> <li>12 \u4f4d\u53ef\u8bbf\u95ee 4096 \u4e2a CSRs</li> <li>\u524d\u4e24\u4f4d\uff1a\u8bfb\u5199\u6a21\u5f0f\u9009\u62e9</li> <li> <p>\u63a5\u4e0b\u6765\u4e24\u4f4d\uff1a\u6a21\u5f0f\uff08\u673a\u5668\u6a21\u5f0f\u3001\u7528\u6237\u6a21\u5f0f\u7b49\uff09</p> </li> <li> <p>\u4e2d\u65ad\u4e2d\u4f7f\u7528\u7684 MSRs\uff1a   </p> <ul> <li> <p>mstatus(0x300)</p> <p>Machine STATUS register\uff1a\u4e3b\u8981\u7528\u4e8e\u4fdd\u8bc1\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u4e0b\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u539f\u5b50\u6027\u3002      * mie/mip(0x304/344)</p> <p>Machine Interrupt Enable register: \u63a7\u5236\u80fd\u5426\u54cd\u5e94\u4e2d\u65ad</p> <ul> <li>MEIE\u3001SEIE and UEIE enable external interrupt</li> <li>MSIE\u3001SSIE &amp; USIE enable software interrupts</li> <li>MTIE\u3001STIE and UTIE enable timer interrupts</li> </ul> <p>Machine interrupt-pending register </p> </li> <li> <p>mtvec</p> <p>Machine Trap-Vector Base-Address Register\uff1a\u5305\u542b vector base address \u548c vector mode </p> <p>BASE \u5b57\u6bb5\u4e2d\u7684\u503c\u5fc5\u987b\u59cb\u7ec8\u5728 4 \u5b57\u8282\u8fb9\u754c\u4e0a\u5bf9\u9f50\uff0c\u5e76\u4e14 MODE \u8bbe\u7f6e\u53ef\u80fd\u4f1a\u5bf9 BASE \u5b57\u6bb5\u4e2d\u7684\u503c\u65bd\u52a0\u989d\u5916\u7684\u5bf9\u9f50\u7ea6\u675f\u3002</p> <p>     * mepc</p> <p>Machine Exception Program Counter: \u8bb0\u5f55\u56de\u6765\u7684\u5730\u5740\uff08\u6700\u540e\u4e24\u4f4d\u4e3a 0\uff0c\u56e0\u4e3a\u5730\u5740\u662f 4 \u7684\u500d\u6570\uff09</p> <p></p> <p>Exception\uff1amepc = PC</p> <p>Interruption\uff1a mepc = PC + 4</p> </li> <li> <p>mcause</p> <p>\u7b2c\u4e00\u4f4d\u662f 1 - \u4e2d\u65ad\uff0c0 - \u5f02\u5e38 </p> </li> </ul> </li> </ul>"},{"location":"CO/CO_3/#_1","title":"\u6d41\u6c34\u7ebf","text":"<p>\u6bcf\u4e2a\u9636\u6bb5\u4e4b\u95f4\u52a0\u4e00\u4e2a\u7f13\u51b2\u5668\uff0c\u8bb0\u5f55\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f</p>"},{"location":"CO/CO_3/#hazard","title":"Hazard\u2014\u2014\u5192\u9669","text":"<ul> <li>Structure hazard: \u7ade\u4e89\u786c\u4ef6\u8d44\u6e90<ul> <li>\u5c06\u6307\u4ee4\u548c data memory \u5206\u5f00</li> <li>\u5907\u4efd\u786c\u4ef6</li> <li>\u5148\u8bfb\u540e\u5199\u7684\u7ea6\u675f</li> <li>\u4e0d\u7ba1\uff08\u6982\u7387\u5c0f\uff09</li> </ul> </li> <li>Data hazard: \u9700\u8981\u7b49\u5f85\u524d\u4e00\u6761\u6307\u4ee4\u6267\u884c\u5b8c</li> </ul> <pre><code>// x19 \u5728\u8fde\u7eed\u4e24\u6761\u6307\u4ee4\u4e2d\u4f7f\u7528\nadd x19, x0, x1\nsub x2, x19, x3\n</code></pre> <p>\u89e3\u51b3\u65b9\u6cd5\u4e00\uff1a\u505c\u987f\u4e24\u4e2a\u5468\u671f\uff08\u6548\u7387\u4f4e\uff09</p> <p></p> <p>\u89e3\u51b3\u65b9\u6cd5\u4e8c\uff1a\u524d\u9012 </p> <p>\u4f46\u4e00\u4e9b\u65f6\u5019\u4e0d\u80fd\u76f4\u63a5\u524d\u9012\uff0c\u5fc5\u987b bubble </p> <p>forwarding \u6761\u4ef6\u5224\u65ad\uff1a</p> <ul> <li>\u5f53\u524d\u6307\u4ee4 rs1 == \u4e0a\u4e00\u6307\u4ee4 rd?</li> <li>\u4e0a\u4e00\u6307\u4ee4 RegWrite == 1?</li> <li>rd != 0</li> </ul> <p>\u6570\u636e\u901a\u8def\uff1a </p> <p>\u5982\u679c\u591a\u4e2a buffer \u91cc\u90fd\u6709\u5f53\u524d\u6307\u4ee4\u7684 rs1/rs2\uff0c\u4f18\u5148\u6700\u65b0\u7684 buffer</p> <pre><code>if (MEM/WB.RegWrite and (MEM/WB.RegisterRd \u2260 0)\n    and not (EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0)\n        and (EX/MEM.RegisterRd = ID/EX.RegisterRs1))\n    and (MEM/WB.RegisterRd = ID/EX.RegisterRs1))\n    orwardA = 01\n\nif (MEM/WB.RegWrite and (MEM/WB.RegisterRd \u2260 0)\n    and not (EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0)\n        and (EX/MEM.RegisterRd = ID/EX.RegisterRs2))\n    and (MEM/WB.RegisterRd = ID/EX.RegisterRs2))\n    ForwardB = 01\n</code></pre> <ul> <li>Control Hazard: Control \u4fe1\u53f7\u7684\u4ea7\u751f\u4f9d\u8d56\u524d\u4e00\u6761\u6307\u4ee4</li> </ul> <p>Example: branch \u6307\u4ee4 </p>"},{"location":"DailyLife/DailyLife/","title":"DailyLife","text":"<p>\u8fd9\u91cc\u662f\u65e5\u5e38\u751f\u6d3b\u7684\u8bb0\u5f55\ud83d\ude00</p> <p>\u547d\u8fd0\u7684\u9f7f\u8f6e\u5f00\u59cb\u8f6c\u52a8</p>"},{"location":"DailyLife/DailyLife/#wonderful-everyday","title":"Wonderful Everyday\ud83c\udf3b","text":""},{"location":"DailyLife/DailyLife/#20244","title":"2024.4","text":"<p>\u6211\u53bb\uff0c\u611f\u89c9\u6211\u5988\u5355\u4f4d\u5f85\u9047\u4e0d\u9519\uff0c\u4e0d\u77e5\u9053\u8fd9\u4e2a\u96be\u4e0d\u96be </p>"},{"location":"DailyLife/DailyLife/#20243","title":"2024.3","text":"<p>2024.3.16\u6478\u5230\u7684\u732b </p> <p>\u7ffb\u76f8\u518c\u5c45\u7136\u57282023.9.19\u9047\u5230\u8fc7\uff0c\u62cd\u4e86\u7167\u7247\u5b58\u8d77\u6765 </p> <p>\u8fd8\u53d1\u7ed9lulu\u770b\u4e86</p> <p>\u602a\u4e0d\u5f97\u5979\u8bf4\u6709\u70b9\u773c\u719f</p>"},{"location":"DataBase/DataBase/","title":"\u6570\u636e\u5e93\u7cfb\u7edf - \u4ecb\u7ecd\u548c\u5173\u7cfb\u6a21\u578b","text":"<ul> <li>Database Management System\uff08DBMS\uff09</li> <li>\u6210\u7ee9\u6784\u6210\uff1a    \u8003\u8bd5\u53ef\u5e26A4\u7eb8</li> <li>\u6559\u6750\uff1aDatabase System Concepts (7th Edition)</li> <li>1, 2, 3, 4, 5, 6, 7,      12, 13, 14, 15, 16, 17, 18, 19</li> </ul>"},{"location":"DataBase/DataBase/#lecture-1-introduction","title":"Lecture 1: Introduction","text":""},{"location":"DataBase/DataBase/#purpose","title":"Purpose","text":"<ul> <li>\u6570\u636e\u5e93\uff1a\u957f\u671f\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u5185\u3001\u6709\u7ec4\u7ec7\u7684\u3001\u53ef\u5171\u4eab\u7684\u6570\u636e\u96c6\u5408</li> <li>\u6570\u636e\u5e93\u7cfb\u7edf\uff08DBMS\uff09\uff1a\u6570\u636e\u5e93 + \u53ef\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u7684\u7a0b\u5e8f</li> <li>DBMS\u7684\u7279\u5f81</li> <li>\u6570\u636e\u8bbf\u95ee\u9ad8\u6548\u3001\u7a33\u5b9a\u3001\u53ef\u6269\u5c55</li> <li>\u7f29\u77ed\u5e94\u7528\u7684\u5f00\u53d1\u65f6\u95f4</li> <li>\u6570\u636e\u72ec\u7acb\u6027\uff08physical\u548clogical\uff09</li> <li>\u6570\u636e\u5b8c\u6574\u6027\u548c\u5b89\u5168\u6027</li> <li> <p>\u5e76\u53d1\u8bbf\u95ee\u548c\u9c81\u68d2\u6027\uff08\u6613\u6062\u590d</p> </li> <li> <p>DBMS VS File-Processing System </p> </li> <li>\u6587\u4ef6\u5904\u7406\u7cfb\u7edf\u7531\u4f20\u7edf\u7684\u64cd\u4f5c\u7cfb\u7edf \uff08OS\uff09 \u652f\u6301\u3002</li> </ul>"},{"location":"DataBase/DataBase/#view","title":"View","text":"<ul> <li>\u5982\u679c\u60f3\u8981\u9690\u85cf</li> <li>\u65b0\u5efa\u4e00\u4e2a\u8868\uff1a\u7a7a\u95f4\u3001\u540c\u6b65\u95ee\u9898</li> <li>\u540c\u4e00\u5f20\u8868\u4e0a\u7528\u4e0d\u540c\u7684\u89c6\u56fe</li> </ul>"},{"location":"DataBase/DataBase/#database-langueage","title":"Database Langueage","text":"<ul> <li>Data Definition Language (DDL) </li> <li>Data Manipulation Language (DML) </li> <li>Data Control Language (DCL) </li> <li>SQL = DDL+ DML+DCL </li> </ul>"},{"location":"DataBase/DataBase/#transaction-management","title":"Transaction Management","text":"<ul> <li>\u5e76\u53d1\u8bbf\u95ee\u5e26\u6765\u95ee\u9898</li> <li>\u6570\u636e\u5e93\u4fdd\u8bc1\u539f\u5b50\u6027\u3001\u4e00\u81f4\u6027\u3001\u9694\u79bb\u6027\u3001\u6301\u4e45\u6027</li> </ul>"},{"location":"DataBase/DataBase/#database-architecture","title":"Database Architecture","text":"<ul> <li>Storage Manager </li> <li>Query Processor\uff1a\u63cf\u8ff0\u6027\u8bed\u53e5\u8f6c\u5316\u6210\u64cd\u4f5c </li> <li>Overall System Structure </li> <li>Application Architecture </li> </ul>"},{"location":"DataBase/DataBase/#lecture-2-relational-model","title":"Lecture 2: Relational Model","text":""},{"location":"DataBase/DataBase/#structure-of-relational-databases","title":"Structure of Relational Databases","text":"<p>\u57fa\u672c\u7ed3\u6784\uff1a\u7b1b\u5361\u5c14\u79ef     {width=400px}   * \u53ef\u7528\u4e8c\u7ef4\u8868\u8868\u793a   * \u53cd\u6620\u7279\u5b9a\u610f\u4e49\u7684\u5b50\u96c6\u5c31\u662f\u5173\u7cfb\uff0c\u4f8b\u5982\uff1a   {width=300px} * \u5bfc\u5e08\u2014\u2014\u5c5e\u6027\uff08attribute\uff09   * \u5c5e\u6027\u503c\u2014\u2014\u539f\u5b50\u6027\uff08\u4e0d\u53ef\u5206\u5272\uff09   * \u6240\u6709\u53ef\u53d6\u7684\u503c\u2014\u2014\u57df</p> <p>Key * \u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5173\u7cfb\u4e2d\u53e6\u4e00\u4e2a\u5c5e\u6027\u7684\u503c\u7684\u5c5e\u6027   * \u4f8b\u5982\u77e5\u9053\u5b66\u53f7\u53ef\u4ee5\u786e\u5b9a\u5b66\u751f\uff0c\u5b66\u53f7\u662fkey</p> <ul> <li>Foreign Key\uff08\u5916\u952e\uff09</li> <li>\u5728\u5f53\u524d\u8868\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\uff0c\u4f46\u5728\u53e6\u4e00\u5f20\u8868\u53ef\u4ee5<ul> <li>\u4e13\u4e1a\u53f7\u4e0d\u80fd\u786e\u5b9a\u5b66\u751f\uff0c\u4f46\u5728\u53e6\u4e00\u5f20{\u4e13\u4e1a\u53f7\uff0c\u4e13\u4e1a}\u7684\u8868\u91cc\u53ef\u4ee5\u786e\u5b9a\u4e13\u4e1a</li> </ul> </li> </ul>"},{"location":"DataBase/DataBase/#fundamental-relational-algebra-operations","title":"Fundamental Relational-Algebra Operations","text":"<p>6\u4e2a\u57fa\u672c\u64cd\u4f5c\uff1a\u6536\u52301-2\u4e2a\u8868\uff0c\u8fd4\u56de\u4e00\u4e2a\u8868 * Select      \u9009\u62e9 \uff08\u6a2a\u5411\u5207\u5272\uff09   * \u7b26\u53f7\uff1a$\\sigma_{branch-name=\u2018Perryridge\u2019 }(account) $   * ?: Note that, the selection conditions need to aim at the attribute values of the same tuple, when we conduct section operation. </p> <ul> <li>Project     \u6295\u5f71 \uff08\u7eb5\u5411\u5207\u5272\u2014\u2014\u6ce8\u610f\u76f8\u540c\u7684\u96c6\u5408\u5143\u7d20\u8981\u5408\u5e76\uff09</li> <li>Union       \u5e76 </li> <li>set difference      \u5dee\uff08\u96c6\u5408\u5dee\uff09</li> <li>Cartesian product      \u7b1b\u5361\u513f\u79ef </li> <li>Rename      \u6539\u540d\uff08\u91cd\u547d\u540d\uff09 </li> </ul> <p>Example Queries 5: Find the names of all customers who have a loan at the Perryridge branch. </p> <p>\u65b9\u6cd51\uff1a\uf0d5customer-name(\uf073branch-name=\u2018Perryridge\u2019  (\uf073borrower.loan-number = loan.loan-number(borrower x loan)))  \u65b9\u6cd52\uff1a\uf0d5customer-name(\uf073borrower.loan-number = loan.loan-number  (borrower x (\uf073branch-name=\u2018Perryridge\u2019 (loan))))  * \u9700\u8981\u4e58\u7684\u4e1c\u897f\u66f4\u5c11\uff0c\u8282\u7701\u5f00\u9500</p> <p>Example Queries 7: Find the largest account balance (i.e., self-comparison). </p> <ul> <li>\u6539\u540d\u7684\u7528\u5904</li> </ul>"},{"location":"DataBase/DataBase/#additional-relational-algebra-operations","title":"Additional Relational-Algebra Operations","text":"<p>Four basic operators</p> <ul> <li>Set intersection      \u4ea4    \u53ef\u4ee5\u7528\u5dee\u6765\u8868\u793a\uff1aA \u2229 B = A - (A - B)</li> <li>Natural join            \u81ea\u7136\u8fde\u63a5    \u591a\u4e2a\u8868\u7684\u64cd\u4f5c\u7ecf\u5e38\u7528\u5230</li> </ul> <p>\u7531\u7b1b\u5361\u5c14\u79ef\u548c\u9009\u62e9\u7ec4\u6210   * Notion: \\(\\gamma \\bowtie s\\) </p> <ul> <li>Division                  \u9664   \u7b1b\u5361\u5c14\u79ef\u7684\u9006\u8fd0\u7b97   {width=450px}</li> </ul> <ul> <li>Notion: $ r \\div s$ <p>\u7528\u57fa\u672c\u64cd\u4f5c\u63a8\u5bfc</p> </li> <li>Assignment            \u8d4b\u503c    \\(&lt;-\\)</li> </ul> <p>Summary: * Union, set difference, Set intersection \u4e3a\u53cc\u76ee\u3001\u7b49\u5143\u8fd0\u7b97  * Cartesian product, Natural join, Division \u4e3a\u53cc\u76ee\u8fd0\u7b97  * Project, select \u4e3a\u5355\u76ee\u8fd0\u7b97</p> <ul> <li>\u4f18\u5148\u7ea7\uff1a\u5355\u76ee&gt;\u591a\u76ee\uff0c\u4e58\u9664&gt;\u52a0\u51cf</li> </ul>"},{"location":"DataBase/DataBase/#extended-relational-algebra-operations","title":"Extended Relational-Algebra Operations","text":"<p>Generalized Projection: \u5e7f\u4e49\u6295\u5f71 * \u53ef\u4ee5\u7528\u4ee3\u6570\u8fd0\u7b97\u4ea7\u751f\u4e00\u4e2a\u65b0\u5c5e\u6027</p> <p>Aggregate Functions: \u805a\u5408\u51fd\u6570 * Aggregation function takes a collection of values and returns a single value as a result.  avg: average value  min: minimum value  max: maximum value  sum: sum of values  count: number of values </p> <p>\u5f0f\u5b50\u524d\u9762\u52a0\u5c5e\u6027A\uff1a\u6839\u636e\u5c5e\u6027A\u5206\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u5173\u7cfb</p> <p>E.g., \u6c42\u5e73\u5747\u5b58\u6b3e\u4f59\u989d                 $g_{avg(balance)}(account) $</p>"},{"location":"DataBase/DataBase/#modification-of-the-database","title":"Modification of the Database","text":"<p>\u6570\u636e\u5e93\u66f4\u6539\u64cd\u4f5c: Deletion,  Insertion,  Updating  All these operations are expressed using the assignment operator. </p>"},{"location":"DataBase/DataBase2/","title":"\u6570\u636e\u5e93\u7cfb\u7edf - sql\u8bed\u8a00","text":"<p>Structured Query Language\u2014\u2014\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00 \u4e0e\u56fd\u9645\u6807\u51c6\u4e0d\u540c\u2014\u2014\u6ca1\u4eba\u8981 \u4e0e\u56fd\u9645\u6807\u51c6\u76f8\u540c\u2014\u2014\u6613\u66ff\u4ee3</p>"},{"location":"DataBase/DataBase2/#data-definition-language","title":"Data Definition Language","text":"<p><pre><code>CREATE TABLE branch\n              (branch_name    char(15) not null, \n                branch_city   varchar(30), \n                assets        numeric(8,2),\n                primary key (branch_name)) \n</code></pre> Domain Types:</p> <ul> <li>char(n): Fixed length character string, with user-specified length. </li> <li>varchar(n): Variable length character strings, with user-specified maximum length n. </li> <li>int: Integer (a finite subset of the integers that is machine-dependent). </li> <li>smallint: Small integer (a machine-dependent subset of the integer domain type). </li> <li>numeric(p, d): Fixed point number, with user-specified precision of p digits, with d digits to the right of decimal point. </li> <li>real, double precision: Floating point and double-precision floating point numbers, with machine-dependent precision. </li> </ul> <p>DROP TABLE r\uff1a\u5c06\u6570\u636e\u548c\u8868\u90fd\u5220\u6389</p>"},{"location":"DataBase/DataBase2/#basic-structure","title":"Basic Structure","text":"<p>\u64cd\u4f5c\u7684\u793a\u4f8b\u6570\u636e\u5e93</p> <p><code>loan(loan-number, branch-name, amount)</code></p> <p><code>borrower(customer-name, loan-number)</code></p> <p>The select clause <pre><code>Select branch_name, balance from account  where balance &gt;= 500 \n\nSELECT distinct branch_name FROM loan -- distinct: remove duplicates\nSELECT all branch_name FROM loan -- all: allow duplicates, default \n\nSELECT loan_number  \nFROM loan \nWHERE amount BETWEEN 90000 AND 100000 -- amount &gt;=90000 &amp;&amp; amount &lt;=100000\n</code></pre></p> <p>The where clause </p> <p>The from clause </p> <p>The rename operation  <pre><code>SELECT customer_name, T.loan_number, S.amount \nFROM borrower as T, loan as S -- as: rename\nWHERE T.loan_number = S.loan_number \n-- \u6539\u540d\u8d77\u5230\u7b80\u5316\u4f5c\u7528\n</code></pre> rename \u66f4\u5173\u952e\u7684\u4f5c\u7528\u2014\u2014\u590d\u5236\u4e00\u5f20\u8868\uff0c\u8d77\u6bd4\u8f83\u4f5c\u7528 <pre><code>--Find the names of all branches that have greater assets \n--than some branch located in city Brooklyn.\n\nSELECT distinct T.branch_name\nFROM branch as T, branch as S\nWHERE T.assets &gt; S.assets and S.branch_city = \u2018Brooklyn\u2019 \n</code></pre></p> <p>String operations </p> <ul> <li> <p>\u901a\u914d\u7b26</p> <ul> <li>% --- matches any substring (likes * in the file system). </li> <li>_ --- matches any character (like ? in the file system). </li> </ul> </li> </ul> <pre><code>--Find the names of all customers \n--whose name includes the substring \u201c\u6cfd\u201d. \n\nSELECT customer_name\nFROM customer\nWHERE customer_name LIKE \u2018%\u6cfd%\u2019 \n\n\n--Match the name \u201cMain%\u201d \n\nLIKE \u2018Main\\%\u2019 escape  \u2018\\\u2019\n</code></pre> <p>Ordering the display of tuples  <pre><code>-- List in alphabetic order the names of all \n-- customers having a loan in Perryridge branch. \n\nSELECT distinct customer_name\nFROM borrower A, loan B \nWHERE A.loan_number = B.loan_number and \nbranch_name = \u2018Perryridge\u2019 \norder by customer_name \n</code></pre></p> <p>Duplicates </p>"},{"location":"DataBase/DataBase2/#set-operations","title":"Set Operations","text":"<p>UNION, INTERSECT, and EXCEPT \u5206\u522b\u662f\u5e76\u3001\u4ea4\u3001\u5dee\u96c6</p> <ul> <li> <p>\u4f7f\u7528\u96c6\u5408\u8fd0\u7b97\u7b26\u65f6\uff0c\u81ea\u52a8\u53bb\u91cd</p> </li> <li> <p>\u5982\u679c\u4e0d\u60f3\u53bb\u91cd - UNION ALL, INTERSECT ALL, and EXCEPT ALL.</p> </li> </ul> set op example<pre><code>-- Find all customers who have a loan or an account or both. \n(SELECT customer_name FROM depositor) \nUNION \n(SELECT customer_name FROM borrower) \n\n-- Find all customers who have both a loan and an account. \n(SELECT customer_name FROM depositor) \nINTERSECT \n(SELECT customer_name FROM borrower) \n</code></pre>"},{"location":"DataBase/DataBase2/#aggregate-functions","title":"Aggregate Functions","text":"<p>\u805a\u5408\u51fd\u6570</p> <p><code>account(account-number, branch-name, balance)</code></p> <p><code>depositor(customer-name, account-number)</code></p> <pre><code>-- Find the number of depositors for each branch. \n\n-- \u65e0distinct: \u8d26\u6237\u6570\nSELECT branch_name, count(customer_name) tot_num \nFROM depositor, account \nWHERE depositor.account_number=account.account_number \nGROUP BY branch_name \n\n-- \u6709distinct: \u5ba2\u6237\u6570\uff08\u540c\u4e00\u4e2a\u4eba\u53ef\u80fd\u6709\u591a\u4e2a\u8d26\u6237\uff09\nSELECT branch_name, count(distinct customer_name) as tot_num \nFROM depositor D, account A \nWHERE D.account_number = A.account_number \nGROUP BY branch_name \n</code></pre> <p>Having Clause <pre><code>SELECT A.branch_name, avg(balance) \nFROM account A, branch B \nWHERE A.branch_name = B.branch_name and \n        branch_city =\u2018Brooklyn\u2019 \nGROUP BY A.branch_name \nHAVING avg(balance) &gt; 1200 \n-- Having &amp; where\n-- \u8868\u8c61\uff1ahaving\u540e\u6709\u805a\u5408\u51fd\u6570\uff0c\u5bf9\u805a\u5408\u51fd\u6570\u7684\u7ed3\u679c\u8fdb\u884c\u64cd\u4f5c\n-- \u5b9e\u9645\uff1a\u6267\u884c\u987a\u5e8f\u4e0d\u540c\n</code></pre></p> <p>Summury <pre><code>-- The format of SELECT statement: \n\nSELECT &lt;[DISTINCT] c1, c2, \u2026&gt; \nFROM &lt;r1, \u2026&gt; \n[WHERE &lt;condition&gt;] \n[GROUP BY &lt;c1, c2, \u2026&gt; [HAVING &lt;cond2&gt;]] \n[ORDER BY &lt;c1 [DESC] [, c2 [DESC|ASC], \u2026]&gt;] \n</code></pre></p> <p>\u6267\u884c\u987a\u5e8f:</p> <p>From \u2192 where \u2192 group (aggregate) \u2192 having \u2192 select \u2192 distinct \u2192 order by</p>"},{"location":"DataBase/DataBase2/#null-values","title":"Null Values","text":"<p>\u5f53\u524d\u4e0d\u77e5\u9053\u7684\u503c</p>"},{"location":"DataBase/DataBase2/#nested-subqueries","title":"Nested Subqueries","text":"<p>\u5d4c\u5957\u67e5\u8be2</p> <p>some: \u8868\u4e2d\u67d0\u4e9b\u503c\u7684\u503c <pre><code>--Find all branches that have greater assets \n--than some branch located in Brooklyn. \nSELECT distinct branch_name \nFROM branch \nWHERE assets &gt;  some -- \u5982\u679c\u4e0d\u52a0\uff1aasset&gt;\u8868\uff0c\u65e0\u610f\u4e49\n            (SELECT assets \n            FROM branch \n            WHERE branch_city = \u2018Brooklyn\u2019) \n</code></pre> </p> <p>all: \u8868\u4e2d\u6240\u6709\u7684\u503c</p> <ul> <li>(!=all)=not in</li> <li>(=all)!=in\u2014\u2014\u5fc5\u987b\u662f\u96c6\u5408\u7684\u76f8\u7b49  </li> </ul> <p>\u9664\u6cd5\u7684\u5b9e\u9645\u5199\u6cd5\uff08\u201c\u6240\u6709\u201d\uff09</p> <ul> <li>not exists \u2014\u2014 \u5dee\u96c6\u7ed3\u679c\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u8bf4\u660e\u9664\u5f97\u5c3d <pre><code>SELECT distinct S.customer_name \nFROM depositor as S \nWHERE not exists ( \n                    (SELECT branch_name \n                    FROM branch \n                    WHERE branch_city = \u2018Brooklyn\u2019) \n                    EXCEPT \n                    (SELECT distinct R.branch_name \n                    FROM depositor as T, account as R \n                    WHERE T.account_number = R.account_number \n                    and S.customer_name = T.customer_name)) \n</code></pre></li> </ul>"},{"location":"DataBase/DataBase2/#views","title":"Views","text":"<p>\u4e5f\u662f\u4e00\u5f20\u8868\uff0c\u9690\u85cf\u4e86\u4e00\u4e9b\u4fe1\u606f</p> <pre><code>  CREAT view all_customer as \n         ((SELECT branch_name, customer_name \n          FROM depositor, account \n          WHERE depositor.account_number = account.account_number) \n       union\n          (SELECT branch_name, customer_name \n          FROM borrower, loan \n          WHERE borrower.loan_number = loan.loan_number)) \n</code></pre>"},{"location":"DataBase/DataBase2/#derived-relations","title":"Derived Relations","text":"<p><pre><code>Query 1:  SELECT branch_name, avg_bal \n                 FROM (SELECT branch_name, avg(balance) \n                     FROM account \n                     GROUP BY branch_name) -- \u5148\u5efa\u7acb\u4e00\u4e2a\u672c\u5730\u89c6\u56fe\n                     as result (branch_name, avg_bal) \n                 WHERE avg_bal &gt; 500 \n\nQuery 2:  SELECT branch_name, avg(balance) \n                 FROM account \n                 GROUP BY branch_name \n                 HAVING avg(balance) &gt; 500 \n</code></pre> With Clause</p> <ul> <li>The WITH clause allows views to be defined locally for a query, rather than globally.  <pre><code>      WITH max_balance(value) as \n                SELECT max(balance) \n                FROM account \n      SELECT account_number \n      FROM account, max_balance \n      WHERE account.balance = max_balance.value \n</code></pre></li> <li>\u66f4\u590d\u6742\u7684\u4e00\u4e2a\u4f8b\u5b50 <pre><code>--Find all branches where the total account deposit is greater \n--than the average of the total account deposits at all branches.\n     WITH branch_total(branch_name, a_bra_total) as \n        SELECT branch_name, sum(balance) \n        FROM account \n        GROUP BY branch_name \n     WITH total_avg(value) as \n        SELECT avg(a_bra_total) \n        FROM branch_total \n     SELECT branch_name, a_bra_total \n     FROM branch_total A, total_avg B \n     WHERE A.a_bra_total &gt;= B.value \n</code></pre> \u79bb\u5f00\u8fd9\u6761\u8bed\u53e5\uff0clocal view\u4e0d\u5b58\u5728</li> </ul>"},{"location":"DataBase/DataBase2/#modification-of-the-database","title":"Modification of the Database","text":"<p>\u6570\u636e\u5e93\u7684\u4fee\u6539</p> <p>Delete: <code>DELETE FROM &lt;table | view&gt; [WHERE &lt;condition&gt;]</code></p> <pre><code>-- Delete all account records at the Perryridge branch. \n\nDELETE FROM account \nWHERE branch_name = \u2018Perryridge\u2019 \n</code></pre> <p>branch(branch-name, branch-city, assets) </p> <p>account(account-number, branch-name, balance) </p> <p>depositor(customer-name, account-number) </p> <p>Example query 1<pre><code>-- Delete all accounts and relevant information at depositor\n-- for every branch located in Needham city. \n\nDELETE FROM account \nWHERE branch_name in (SELECT branch_name \n                     FROM branch\n                     WHERE branch_city = \u2018Needham\u2019) \nDELETE FROM depositor \nWHERE account_number in (SELECT account_number \n                        FROM branch B, account A \n                        WHERE branch_city = \u2018Needham\u2019 \n                        and B.branch_name = A.branch_name)  \n\n-- \u9519\u8bef\u793a\u8303\n\nDELETE FROM account, depositor, branch -- \u4e0d\u5141\u8bb8\u540c\u65f6\u4ece\u591a\u4e2a\u8868\u4e2d\u5220\u9664\u6570\u636e\nWHERE account.accont_number = depositor.account_number \n         and branch.branch_name = account.branch_name \n         and branch_city = \u2018Needham\u2019 \n</code></pre> \u7591\u95ee\uff1a\u5982\u679c\u7b2c\u4e00\u4e2aDELETE\u8bed\u53e5\u6210\u529f\u5220\u9664\u4e86\u7b26\u5408\u6761\u4ef6\u7684\u8d26\u6237\u4fe1\u606f\uff0c\u4e3a\u4ec0\u4e48\u7b2c\u4e8c\u6761\u8bed\u53e5\u8fd8\u80fd\u627e\u5230\u88ab\u5220\u9664\u7684\u4fe1\u606f\u5462\uff1f</p> <p>Chatgpt\uff1a\u5982\u679c\u60a8\u4f7f\u7528\u4e86\u5b50\u67e5\u8be2\uff0c\u5e76\u4e14\u5b50\u67e5\u8be2\u4f9d\u8d56\u4e8e\u5916\u90e8\u67e5\u8be2\u7684\u6570\u636e\uff0c\u90a3\u4e48\u5728\u6267\u884c\u5b50\u67e5\u8be2\u65f6\u4f1a\u4f7f\u7528\u5916\u90e8\u67e5\u8be2\u5f00\u59cb\u65f6\u7684\u6570\u636e\u72b6\u6001\uff08\u4e5f\u79f0\u4e3a\u201cconsistent read\u201d\uff09\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u5916\u90e8\u67e5\u8be2\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u5220\u9664\u4e86\u67d0\u4e9b\u6570\u636e\uff0c\u5b50\u67e5\u8be2\u4e5f\u4f1a\u4f7f\u7528\u5916\u90e8\u67e5\u8be2\u5f00\u59cb\u65f6\u7684\u6570\u636e\u72b6\u6001\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5b50\u67e5\u8be2\u627e\u5230\u5df2\u88ab\u5220\u9664\u7684\u6570\u636e\u3002\u8fd9\u88ab\u79f0\u4e3a\u201c\u4e00\u81f4\u6027\u8bfb\u53d6\u201d\u6216\u201c\u4e00\u81f4\u6027\u5feb\u7167\u201d\u3002</p> Example query 2<pre><code>-- Delete the record of all accounts with balances\n-- below the average at the bank. \n\nDELETE FROM account \nWHERE balance &lt; (SELECT avg(balance) \n               FROM account) \n</code></pre> <ul> <li> <p>\u95ee\u9898\uff1a\u5220\u9664\u5143\u7ec4\u65f6\uff0cavg(balance)\u4f1a\u6539\u53d8</p> </li> <li> <p>sql\u7684\u89e3\u51b3\u65b9\u6848\uff1a\u5728\u540c\u4e00SQL\u8bed\u53e5\u5185\uff0c\u9664\u975e\u5916\u5c42\u67e5\u8be2\u7684\u5143\u7ec4\u53d8\u91cf\u5f15\u5165\u5185\u5c42\u67e5\u8be2\uff0c\u5426\u5219\u5c42\u67e5\u8be2\u53ea\u8fdb\u884c\u4e00\u6b21\u3002</p> </li> </ul> <p>Insertion: <code>INSERT INTO &lt;table|view&gt; [(c1, c2,\u2026)] VALUES (e1, e2, \u2026)</code></p> <p>\u4e5f\u53ef\u4ee5\u662f <code>INSERT INTO &lt;table|view&gt; [(c1, c2,\u2026)] SELECT e1, e2, \u2026 FROM \u2026</code></p> <pre><code>-- Add a new tuple to account: \n\nINSERT INTO account \nVALUES (\u2018A_9732\u2019, \u2018Perryridge\u2019, 1200) --\u9700\u8981\u6309\u987a\u5e8f\n-- or equivalently \nINSERT INTO account (branch_name, balance, account_number) \nVALUES (\u2018Perryridge\u2019, 1200, \u2018A_9732\u2019)  -- \u786e\u5b9a\u680f\u76ee\u540e\uff0c\u4e0d\u9700\u8981\u6309\u987a\u5e8f\n</code></pre> <ul> <li>VALUES \u53ef\u4ee5\u662f null \uff0c\u5982\u679c\u672a\u6307\u5b9a VALUES \uff0c\u9ed8\u8ba4\u4e3a\u7a7a</li> </ul> <pre><code>-- Provide as a gift for all loan customers of the Perryridge branch,\n-- a $200 savings account.  Let the loan number serve as\n-- the account number for the new savings account. \n\n-- Step 1: \n         insert into account \n         SELECT loan_number, branch_name, 200 \n         FROM loan \n         WHERE branch_name = \u2018Perryridge\u2019 \n-- Step 2: \n         insert into depositor \n         SELECT customer_name, A.loan_number \n         FROM loan A, borrower B \n         WHERE A.branch_name = \u2018Perryridge\u2019 and \n               A.loan_number = B.loan_number \n</code></pre> <ul> <li>\u5c06 SELECT \u8bed\u53e5 insert into \u524d\uff0c\u4f1a\u5148\u5c06 SELECT \u8bed\u53e5\u6267\u884c\u5b8c</li> </ul> <p>\u56e0\u6b64\uff0c\u4e0b\u9762\u7684\u8bed\u53e5\u53ef\u884c</p> <pre><code>INSERT INTO table1 \nSELECT * \nFROM table1 \n</code></pre> <p>Updates: <code>UPDATE &lt;table | view&gt; SET [&lt;c1 = e1 , c2 = e2, \u2026&gt;] [WHERE &lt;condition&gt;]</code></p> Example<pre><code>-- Increase all accounts with balances over $10,000 by 6%,\n-- all other accounts receive 5%. \n\nUPDATE account \nSET balance = balance * 1.06 \nWHERE balance &gt; 10000 \nUPDATE account \nSET balance = balance * 1.05 \nWHERE balance &lt;= 10000 \n\n-- again, order important\n-- Can be done better using the case statement(regardless of order)\n\nUPDATE account \nSET balance = case \n               when balance &lt;= 10000 \n               then balance * 1.05 \n               else balance * 1.06 \n              end \n</code></pre> <p>\u66f4\u65b0\u89c6\u56fe\uff1a</p>"},{"location":"DataBase/DataBase2/#joined-relations","title":"Joined Relations","text":""},{"location":"DataBase/DataBase3/","title":"Advanced SQL","text":""},{"location":"DataBase/DataBase3/#sql-data-types-and-schemas","title":"SQL Data Types and Schemas","text":""},{"location":"DataBase/DataBase3/#integrity-constraints","title":"Integrity Constraints","text":""},{"location":"DataBase/DataBase3/#domain-constraints","title":"Domain Constraints","text":""},{"location":"DataBase/DataBase3/#referential-integrity","title":"Referential Integrity","text":""},{"location":"DataBase/DataBase3/#assertions","title":"Assertions","text":""},{"location":"DataBase/DataBase3/#triggers","title":"Triggers","text":""},{"location":"DataBase/DataBase3/#authorization","title":"Authorization","text":"<p>\u4fdd\u6301\u6570\u636e\u7684\u4e00\u81f4\u6027\u3001\u5b8c\u6574\u6027\uff08\u4f1a\u6709\u6d88\u8017\uff09</p> <p>\u4e5f\u53ef\u4ee5\u5728\u6570\u636e\u5e93\u4e4b\u5916\u5224\u65ad</p> trigger<pre><code>-- \u4e00\u4e2a\u89e6\u53d1\u5668\n-- \u5f53\u628a\u4e00\u4e2a\u4eba\u7684\u914d\u5076\u8bbe\u6210 null \u65f6\uff0c\u4fdd\u8bc1\u4ed6\u914d\u5076\u7684\u914d\u5076\u4e5f\u88ab\u8bbe\u6210 null\n\nBegin \n    update Person set spouse = NULL \n    where id = orow.spouse, spouse = nrow.id\nEnd \n</code></pre> assertion<pre><code>-- \u4e00\u4e2a\u65ad\u8a00\n-- \u68c0\u6d4b\u82e5\u5e72\u914d\u5076\u89c4\u5219\n\nCreate assertion spouse_assert1 check \n     (not exists (select * from Person as p1, Person as p2 \n             where p1.spouse = p2.id and (p1.id != p2.spouse \n             or p1.gender = p2.gender))) \n</code></pre>"},{"location":"DataBase/DataBase3/#embedded-sql","title":"Embedded SQL","text":"<p>\u7531\u4e8e\u6570\u636e\u5e93\u529f\u80fd\u7684\u5c40\u9650\u6027\uff0c\u5e38\u642d\u914d C++\u3001Java \u7b49\u8bed\u8a00\u6765\u4f7f\u7528\u3002\u4f9d\u8d56\u7684\u7f16\u7a0b\u8bed\u8a00\u5c31\u53eb\u505a Host language (\u5bbf\u4e3b\u8bed\u8a00)</p> <p><code>EXEC SQL</code> - \u7528\u4e8e\u5d4c\u5165 SQL \u8bed\u53e5\u5230\u5bbf\u4e3b\u8bed\u8a00\u4e2d</p> \u5355\u884c\u67e5\u8be2<pre><code>    EXEC SQL BEGIN DECLARE SECTION; \n    char V_an[20], bn[20]; \n    float  bal; \n    EXEC SQL END DECLARE SECTION; \n    \u2026\u2026. \n    scanf(\u201c%s\u201d, V_an);   // \u8bfb\u5165\u8d26\u53f7,\u7136\u540e\u636e\u6b64\u5728\u4e0b\u9762\u7684\u8bed\u53e5\u83b7\u5f97bn, bal\u7684\u503c \n    EXEC SQL SELECT branch_name, balance INTO :bn, :bal FROM \n    account WHERE account_number = :V_an; \n    END_EXEC\n    printf(\u201c%s, %s, %f\u201d, V_an, bn, bal); \n</code></pre> <p>\u591a\u884c\u67e5\u8be2\u53ca\u4fee\u6539\u65f6\u7528\u5230\u6e38\u6807 \u591a\u884c\u67e5\u8be2<pre><code>Exec SQL include SQLCA;  // SQL\u901a\u8baf\u533a\uff0c\u662f\u5b58\u653e\u8bed\u53e5\u7684\u6267\u884c\u72b6\u6001\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d//\u6709 \n        \u4e00\u4e2a\u53d8\u91cfsqlcode\u6307\u793a\u6bcf\u6b21\u6267\u884cSQL\u8bed\u53e5\u7684\u8fd4\u56de\u4ee3\u7801\uff08success, not_success\uff09\u3002 \nExec SQL BEGIN DECLARE SECTION; \n    char bn[20], bc[30]; \nExec SQL END DECLARE SECTION; \nExec SQL DECLARE branch_cur CURSOR FOR \n    Select branch_name, branch_city From branch; \n    \u2026\u2026 \nExec SQL OPEN branch_cur; \n    While (1) {Exec SQL FETCH branch_cur INTO :bn, :bc; \n                       if (sqlca.sqlcode &lt;&gt; SUCCESS) BREAK; \n                       \u2026\u2026   // \u7531\u5bbf\u4e3b\u8bed\u53e5\u5bf9bn, bc\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u76f8\u5173\u5904\u7406 \n                     } \nExec SQL CLOSE branch_cur; \n</code></pre></p> \u5355\u884c\u4fee\u6539<pre><code>\n</code></pre>"},{"location":"DataBase/DataBase3/#dynamic-sql","title":"Dynamic SQL","text":""},{"location":"DataBase/DataBase3/#odbc-and-jdbc","title":"ODBC and JDBC","text":"<p>ODBC</p> <ul> <li>\u7f16\u7a0b\u8981\u70b9<ol> <li>\u5206\u914d\u73af\u5883\u53e5\u67c4 <code>HENV henv; SQLAllocEnv ( &amp;henv );</code></li> <li>2</li> <li>3</li> <li>2</li> </ol> </li> </ul> Example<pre><code>int ODBCexample()   // \u7a0b\u5e8f\u7ed3\u6784 \n    { \n       RETCODE error; \n       HENV env;   /* environment */ \n       HDBC conn;   /* database connection */ \n       SQLAllocEnv(&amp;env); \n       SQLAllocConnect(env, &amp;conn);   /* \u5efa\u7acb\u8fde\u63a5\u53e5\u67c4 */ \n       SQLConnect (conn, \u201cMySQLServer\u201d, SQL_NTS, \u201cuser\u201d, SQL_NTS, \u201cpassword\u201d, \n                       SQL_NTS);  /* \u5efa\u7acb\u7528\u6237user\u4e0e\u6570\u636e\u6e90\u7684\u8fde\u63a5\uff0c  SQL_NTS\u8868\u793a\u524d \n                       \u4e00\u53c2\u91cf\u4ee5null\u7ed3\u5c3e */ \n       { \u2026. Main body of program \u2026 }   // See next pages \n       SQLDisconnect(conn); \n       SQLFreeConnect(conn); \n       SQLFreeEnv(env); \n    }\nint main()\n{\n    char branchname[80]; \n         float balance; \n         int lenOut1, lenOut2; \n         HSTMT stmt; \n              SQLAllocStmt(conn, &amp;stmt);   /* \u4e3a\u8be5\u8fde\u63a5\u5efa\u7acb\u6570\u636e\u533a\uff0c\u5c06\u6765\u5b58\u653e\u67e5\u8be2\u7ed3\u679c */ \n         char * sqlquery = \u201cselect branch_name, sum (balance) from account \n                                    group by branch_name\u201d;   /* \u88c5\u914dSQL\u8bed\u53e5 */ \n         error = SQLExecDirect(stmt, sqlquery, SQL_NTS); /* \u6267\u884csql\u8bed\u53e5,\u67e5\u8be2\u7ed3\u679c\u5b58\u653e\u5230 \n                    \u6570\u636e\u533astmt \uff0c\u540c\u65f6sql\u8bed\u53e5\u6267\u884c\u72b6\u6001\u7684\u8fd4\u56de\u503c\u9001\u53d8\u91cferror*/ \n      if (error == SQL_SUCCESS) { \n          SQLBindCol(stmt, 1, SQL_C_CHAR, branchname,80, &amp;lenOut1); \n          SQLBindCol(stmt, 2, SQL_C_FLOAT, &amp;balance, 0, &amp;lenOut2); \n          /* \u5bf9stmt\u4e2d\u7684\u8fd4\u56de\u7ed3\u679c\u6570\u636e\u52a0\u4ee5\u5206\u79bb\uff0c\u5e76\u4e0e\u76f8\u5e94\u53d8\u91cf\u7ed1\u5b9a\u3002\u7b2c1\u9879\u6570\u636e\u8f6c\u6362\u4e3aC\u7684\u5b57\u7b26\n          \u7c7b\u578b\uff0c\u9001\u53d8\u91cfbranchname(\u6700\u5927\u957f\u5ea6\u4e3a80)\uff0c lenOut1\u4e3a\u5b9e\u9645\u5b57\u7b26\u4e32\u957f\u5ea6\uff08\u82e5\uff1d-1\u4ee3\u8868\n          null\uff09\uff0c\u7b2c2\u9879\u6570\u636e\u8f6c\u6362\u4e3aC\u7684\u6d6e\u70b9\u7c7b\u578b\u9001\u53d8\u91cfbalance\u4e2d */ \n          while ( SQLFetch(stmt) &gt;= SQL_SUCCESS) { /* \u9010\u884c\u4ece\u6570\u636e\u533astmt\u4e2d\u53d6\u6570\u636e\uff0c\u653e\u5230\u7ed1\u5b9a\u53d8\u91cf\u4e2d */ \n          printf (\u201c %s  %d\\n\u201d, branchname, balance); \n                /*  \u5bf9\u53d6\u51fa\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406*/       \u2026 \u2026          } \n                          }   \u2026\u2026 \n        } \n          SQLFreeStmt(stmt, SQL_DROP);  /* \u91ca\u653e\u6570\u636e\u533a*/ \n</code></pre> <p>JDBC \u8fde\u63a5\u6570\u636e\u5e93<pre><code>public static void JDBCexample(String dbid, String userid, String passwd) \n{ \n    try { \n          Class.forName (\"oracle.jdbc.driver.OracleDriver\"); \n          Connection conn = DriverManager.getConnection \n                    (\"jdbc:oracle:thin:@aura.bell_labs.com:2000:bankdb\", userid, passwd); \n           Statement stmt = conn.createStatement(); \n            \u2026 Do Actual Work \u2026. \n          stmt.close(); \n           conn.close(); \n          } \n     catch (SQLException sqle) { \n          System.out.println(\"SQLException : \" + sqle); \n                        } \n} \n</code></pre></p> update<pre><code>    try { \n           stmt.executeUpdate(\"insert into account values \n                                           ('A_9732', 'Perryridge', 1200)\"); \n         } catch (SQLException sqle) { \n            System.out.println(\"Could not insert tuple. \" + sqle); \n                               } \n</code></pre> query<pre><code>    ResultSet rset = stmt.executeQuery(\"select branch_name, avg(balance) \n                                                               from account \n                                                               group by branch_name\"); \n    while (rset.next()) { \n          System.out.println(rset.getString(\"branch_name\") + \"  \" + rset.getFloat(2));\n                     } \n</code></pre> <p>SQL Injection</p> <p>Prepared Statement </p>"},{"location":"DataBase/DataBase4/","title":"Entity-Relationship Model \u2014\u2014 Database System","text":""},{"location":"DataBase/DataBase4/#e-r-diagram","title":"E-R Diagram","text":"<ul> <li> <p>\u5c5e\u6027\u8868\u793a\uff08\u666e\u901a\u5c5e\u6027\u3001\u7b26\u5408\u5c5e\u6027\u3001\u591a\u503c\u5c5e\u6027\u3001\u6d3e\u751f\u5c5e\u6027\uff09</p> <p>\u6cd5\u4e00\uff1a</p> </li> </ul> <pre><code>\u6cd5\u4e8c\uff1a\n</code></pre> <ul> <li>\u4e00\u5bf9\u4e00/\u591a\u5bf9\u591a\u5173\u7cfb\u8868\u793a</li> <li>\u7bad\u5934\u6307\u5411\u7684\u662f\u201c\u4e00\u201d</li> <li> <p>\u6ca1\u6709\u7bad\u5934\u7684\u662f\u201c\u591a\u201d</p> <p>alternative notion:    * 0..*    * 1..1</p> </li> <li> <p>\u591a\u5143\u5173\u7cfb\u8f6c\u6362\u4e3a\u4e8c\u5143\u5173\u7cfb</p> </li> </ul>"},{"location":"DataBase/DataBase4/#weak-entity-sets","title":"Weak Entity Sets","text":"<p>\u5f31\u5b9e\u4f53\uff1a\u6ca1\u6709 Primary key</p> <ul> <li>\u8ddf\u522b\u7684\u5b9e\u4f53\u4ea7\u751f\u5173\u7cfb\u540e\u624d\u80fd\u552f\u4e00\u51b3\u5b9a\u81ea\u5df1</li> <li>\u6bcf\u4e2a\u5c5e\u6027\u4e0b\u9762\u90fd\u753b\u865a\u7ebf</li> </ul> <p>\u603b\u7ed3\uff1aE-R</p>"},{"location":"DataBase/DataBase4/#extended","title":"Extended","text":"<ul> <li>\u7bad\u5934\u5206\u5f00\uff1a\u4e24\u4e2a\u5b9e\u4f53\u53ef\u80fd\u6709\u91cd\u5408</li> <li>\u7bad\u5934\u5408\u5e76\uff1a\u6ca1\u6709\u91cd\u5408\u5173\u7cfb</li> </ul> <p>\u5b8c\u5168\u6027\u7ea6\u675f\uff1a</p> <ul> <li>\u4e24\u6761\u7ebf\uff1a\u5b8c\u5168\u6cdb\u5316\uff08\u5206\u4e3a\u591a\u4e2a\u4e2a\u6b63\u4ea4\u7684\u5b50\u96c6\uff0c\u5408\u5e76\u540e\u662f\u5168\u96c6\uff09</li> <li>\u5355\u7ebf\uff1a\u90e8\u5206\u6cdb\u5316\uff08\u53ef\u4ee5\u5b58\u5728\u4e0d\u5c5e\u4e8e\u4e0b\u9762\u5b50\u96c6\uff0c\u4f46\u5c5e\u4e8e\u5168\u96c6\u7684\u5143\u7d20\uff09</li> </ul> <p>Summary of Symbols</p>"},{"location":"DataBase/DataBase4/#design-of-an-e-r-database-schema","title":"Design of an E-R Database Schema","text":"<p>\u5c06 E-R \u56fe\u8f6c\u6362\u4e3a\u8868</p>"},{"location":"DataBase/DataBase4/#relational-database-design","title":"Relational Database Design","text":""},{"location":"DataBase/DataBase4/#first-normal-form","title":"First Normal Form","text":"<p>Domain is atomic if its elements are considered to be indivisible units. </p> <p>Examples of non-atomic domains: </p> <p>Composite attributes --- set of names </p> <p>Multi-value attribute --- a person\u2019s phones </p> <p>Complex data type--- object-oriented </p> <p>\u7b2c\u4e00\u8303\u5f0f\uff081NF\uff09\uff1a\u6240\u6709\u7684\u5c5e\u6027\u90fd\u5177\u6709\u539f\u5b50\u6027\uff08\u4e0d\u53ef\u5206\u5272\uff09</p>"},{"location":"DataBase/DataBase4/#pitfalls-in-relational-database-design","title":"Pitfalls in Relational Database Design","text":""},{"location":"DataBase/DataBase4/#functional-dependencies","title":"Functional Dependencies","text":""},{"location":"DataBase/DataBase4/#decomposition","title":"Decomposition","text":""},{"location":"DataBase/DataBase4/#boyce-codd-normal-form","title":"Boyce-Codd Normal Form","text":""},{"location":"DataBase/DataBase4/#third-normal-form","title":"Third Normal Form","text":""},{"location":"DataBase/DataBase4/#multivalued-dependencies","title":"Multivalued Dependencies","text":""},{"location":"DataBase/DataBase4/#fourth-normal-form","title":"Fourth Normal Form","text":""},{"location":"DataBase/DataBase5/","title":"Relational Database Design","text":"<p>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8303\u5f0f\u6570\u8d8a\u5927\uff0c\u8bbe\u8ba1\u8d8a\u4e25\u683c</p>"},{"location":"DataBase/DataBase5/#first-normal-form","title":"First Normal Form","text":""},{"location":"DataBase/DataBase5/#pitfalls-in-relational-database-design","title":"Pitfalls in Relational Database Design","text":""},{"location":"DataBase/DataBase5/#functional-dependencies","title":"Functional Dependencies","text":""},{"location":"DataBase/DataBase5/#decomposition","title":"Decomposition","text":""},{"location":"DataBase/DataBase5/#boyce-codd-normal-form","title":"Boyce-Codd Normal Form","text":"<ul> <li> <p>BC \u8303\u5f0f\u7684\u5b9a\u4e49\uff1aA relation schema R is in BCNF, with respect to a set F of functional dependencies, if for all functional dependencies in \\(F^+\\) of the form \\(\\alpha\\rightarrow \\beta\\), where \\(\\alpha \\subseteq R\\) and \\(\\beta \\subseteq R\\), at least one of the following holds: </p> <ul> <li>\\(\\alpha\\rightarrow \\beta\\) is trivial \uff08\u663e\u800c\u6613\u89c1\uff09(i.e., \\(\\beta \\in \\alpha\\)). </li> <li>\\(\\alpha\\) \u662f R \u7684 superkey (i.e., \\(R \\subseteq \\alpha\\), \\(\\alpha\\rightarrow R\\)) </li> </ul> <p>\u5bf9\u6240\u6709\u7684 \\(\\alpha\\rightarrow \\beta\\) \u90fd\u6ee1\u8db3</p> </li> </ul> <p>\u201c\u8d85\u952e\u201d\uff08Superkey\uff09\u7528\u4e8e\u63cf\u8ff0\u4e00\u7ec4\u5c5e\u6027\u7684\u96c6\u5408\uff0c\u8fd9\u7ec4\u5c5e\u6027\u7684\u503c\u80fd\u591f\u552f\u4e00\u5730\u786e\u5b9a\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\u7684\u6bcf\u4e00\u6761\u8bb0\u5f55\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u5c5e\u6027\u96c6\u5408\u80fd\u591f\u786e\u4fdd\u5728\u5173\u7cfb\u4e2d\u7684\u6bcf\u4e00\u884c\u4e2d\u90fd\u552f\u4e00\u5730\u6807\u8bc6\u4e00\u6761\u8bb0\u5f55\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5c5e\u6027\u96c6\u5408\u5c31\u662f\u4e00\u4e2a\u8d85\u952e\u3002</p> <p>\u8d85\u952e\u53ef\u4ee5\u662f\u5355\u4e2a\u5c5e\u6027\uff0c\u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\u5c5e\u6027\u7684\u7ec4\u5408\u3002\u5176\u4e2d\uff0c\u6700\u5c0f\u7684\u8d85\u952e\u88ab\u79f0\u4e3a\u5019\u9009\u952e\uff08\u4faf\u6548\u7801\uff09\uff08Candidate Key\uff09\u3002\u5982\u679c\u4e00\u4e2a\u5173\u7cfb\u4e2d\u53ea\u6709\u4e00\u4e2a\u5019\u9009\u952e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5019\u9009\u952e\u4e5f\u662f\u4e3b\u952e\uff08Primary Key\uff09\uff0c\u7528\u6765\u552f\u4e00\u5730\u6807\u8bc6\u5173\u7cfb\u4e2d\u7684\u6bcf\u4e00\u884c\u3002</p> <p>\u8fd1\u4f3c\u4e8e\u7b2c 3.5 \u8303\u5f0f</p>"},{"location":"DataBase/DataBase5/#third-normal-form","title":"Third Normal Form","text":"<ul> <li> <p>\u7b2c\u4e09\u8303\u5f0f\u7684\u5b9a\u4e49\uff1aA relation schema R is in third normal form (3NF) if for all \\(\\alpha,\\ \\beta\\) in \\(F^+\\), \u81f3\u5c11\u6ee1\u8db3\u4e0b\u9762\u7684\u4e00\u6761: </p> <ul> <li>\\(\\alpha\\rightarrow \\beta\\) is trivial \uff08\u663e\u800c\u6613\u89c1\uff09(i.e., \\(\\beta \\in \\alpha\\)). </li> <li>\\(\\alpha\\) is a superkey for R.  Each attribute A in \uf062 \u2013 \uf061 is contained in a candidate key for R (\u5373A \uf0ce \uf062 \u2013 \uf061\u662f\u4e3b\u5c5e\u6027, \u82e5\uf061 \uf0c7 \uf062  = \uf0c6, \u5219A = \uf062\u662f\u4e3b\u5c5e\u6027).  Note: each attribute may be in a different candidate key. </li> </ul> </li> </ul> <p>Example: R = (J,K,L)   F = (JK \\(\\rightarrow\\) L, L \\(\\rightarrow\\) K)</p> <p>J: student, K: course, L: teacher (\u4e00\u95e8\u6709\u591a\u4e2a\u6559\u5e08,\u4e00\u4e2a\u6559\u5e08\u4e0a\u4e00\u95e8\u8bfe, \u4e00\u4e2a\u5b66\u751f\u9009\u591a\u95e8\u8bfe, \u4e00\u95e8\u8bfe\u6709\u591a\u4e2a\u5b66\u751f\u9009) </p> \u6784\u9020\u7b2c\u4e09\u8303\u5f0f\u7684\u4f2a\u4ee3\u7801<pre><code>Let Fc be a canonical cover for F; // \u6b63\u5219\u8986\u76d6\ni := 0; \nfor each functional dependency a -&gt; b in Fc do \n    {if none of the schemas Rj, 1 &lt; j &lt;= i contains a b\n          then begin \n            i := i  + 1; // \u5c06Fc\u4e2d\u7684\u6bcf\u4e2a a -&gt; b \u5206\u89e3\u4e3a\u5b50\u6a21\u5f0fRi := (a, b), \n            Ri := (a b) // \u4ece\u800c\u4fdd\u8bc1 dependency-preserving. \n          end} \nif none of the schemas Rj, 1 &lt; j &lt;= i contains a candidate key for R then \nbegin \n    i := i  + 1; \n    Ri := any candidate key for R; // \u4fdd\u8bc1\u81f3\u5c11\u5728\u4e00\u4e2aRi\u4e2d\u5b58\u5728R\u7684\u5019\u9009\u7801, \u4ece\u800c\u4fdd\u8bc1 lossless-join. \nend \nreturn (R1, R2, ..., Ri) \n</code></pre> <p>Example: For a relation schema R(A, B, C, D) with F = {AB -&gt; C, C -&gt; D, D -&gt; A}. </p> <ol> <li>\u6c42 Candidate Key</li> <li>\u8f6c\u6362\u6210 BC \u8303\u5f0f</li> <li></li> </ol> <ol> <li> <p>\u5148\u4f5c\u56fe\uff0c\u627e\u5230\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u7bad\u5934\u6307\u7740\u7684\u5c5e\u6027\uff0c\u4e00\u5b9a\u662f Candidate Key \u7684\u4e00\u90e8\u5206\uff0c\u672c\u4f8b\u4e2d\u4e3a B</p> <p>\u53d1\u73b0 AB/BC/BD \u90fd\u80fd\u4f5c\u4e3a Candidate Key</p> </li> <li> <p>a</p> </li> </ol>"},{"location":"DataBase/DataBase5/#multivalued-dependencies","title":"Multivalued Dependencies","text":""},{"location":"DataBase/DataBase5/#fourth-normal-form","title":"Fourth Normal Form","text":""},{"location":"DataBase/DataBase6/","title":"Storage and File Structure","text":""},{"location":"DataBase/DataBase6/#physical-storage-media","title":"Physical Storage Media","text":"<p>\u91cd\u8981\u5c5e\u6027\uff1a</p> <ul> <li>\u8bfb\u5199\u901f\u5ea6</li> <li>\u82b1\u8d39</li> <li>\u53ef\u9760\u6027</li> </ul> <p>DB \u7684\u6548\u7387\u548c\u53ef\u9760\u6027\u4e0e\u5408\u7406\u7684\u5b58\u50a8\u5c42\u6b21\u6709\u5173\u3002</p> <p>\u591a\u5c42\u6b21\u5b58\u50a8\uff1a </p> <p>vollatile: \u6613\u5931</p>"},{"location":"DataBase/DataBase6/#magnetic-disks","title":"Magnetic Disks","text":"<ul> <li> <p>\u6570\u636e\u4f20\u8f93\u8bf7\u6c42\u5230\u4f20\u8f93\u5f00\u59cb\u7684\u65f6\u95f4 = Seek time(\u5bfb\u9053\u65f6\u95f4) +  Rotational latency(\u65cb\u8f6c\u7b49\u5f85\u65f6\u95f4) </p> <ul> <li>Seek time: \u5230\u8fbe\u6b63\u786e\u7684\u8f68\u9053\u6240\u9700\u7684\u65f6\u95f4</li> <li>Rotational latency time: it takes for the sector to be accessed to appear under the head.  </li> <li>CPU \u901f\u5ea6\u53d8\u5feb\uff0c\u800c\u62ff\u5230\u6570\u636e\u7684\u901f\u5ea6\u63d0\u5347\u4e0d\u660e\u663e</li> </ul> </li> <li> <p>Data-transfer rate</p> </li> </ul>"},{"location":"DataBase/DataBase6/#raid-levels","title":"RAID Levels","text":"<ul> <li>Level 1: \u5c06\u6570\u636e\u5907\u4efd\u4e00\u4efd</li> <li>Level 5: \u4e94\u5757\u786c\u76d8\uff0c\u8f6e\u6d41\u4f5c\u4e3a\u5176\u4ed6\u6570\u636e\u7684\u5f02\u6216\u7ed3\u679c\uff0c\u6709\u6548\u5b58\u50a8\u7a7a\u95f4\u4e3a\u56db\u5757\u3002\u635f\u574f\u4e00\u5757\u53ef\u4ee5\u7528\u5176\u4ed6\u5757\u6062\u590d</li> </ul> <p>\u6570\u636e\u5e93\u4e00\u822c\u7528 RAID 1\uff0cRAID 5 \u7528\u4e8e\u6570\u636e\u91cf\u7279\u522b\u5927\u7684\u60c5\u51b5</p>"},{"location":"DataBase/DataBase6/#storage-access","title":"Storage Access","text":"<p>\u5305\uff08block\uff09\u662f\u8bfb\u53d6\u7684\u57fa\u672c\u5355\u5143</p> <p>Buffer-Replacement(\u7f13\u51b2\u533a\u4e0d\u591f\uff0c\u9700\u8981\u5c06\u539f\u6709\u7684 block \u66ff\u6362)\u7684\u4e24\u79cd\u7b56\u7565\uff1a</p> <ul> <li>LRU(Least Recently Used\uff0c\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7b56\u7565): \u628a\u6700\u5c11\u8bbf\u95ee\u7684\u90e8\u5206\u8986\u76d6<ul> <li>\u4e0d\u9002\u5408\u7684\u60c5\u51b5\uff1a\u591a\u8868\u7684\u81ea\u7136\u8fde\u63a5\uff0c\u5728 for \u5faa\u73af\u4e2d\uff0c\u6700\u5c11\u4f7f\u7528\u7684\u8868\u53cd\u800c\u6700\u53ef\u80fd\u4e0b\u4e00\u4e2a\u88ab\u8bbf\u95ee</li> </ul> </li> <li>MRU(Most Recently Used\uff0c\u6700\u8fd1\u5e38\u7528\u4f7f\u7528\u7b56\u7565)</li> </ul> <p>Pinned block (\u88ab\u9489\u4f4f\u7684\u5757): Memory block that is not allowed to be written back to disk. (\u5982\u5f53\u524d\u5757\u6b63\u5728\u88ab\u4f7f\u7528\u65f6) </p>"},{"location":"DataBase/DataBase6/#application-program-interfacesql","title":"Application Program Interface(SQL)","text":""},{"location":"OC/oc/","title":"OC","text":"<p>\u8fd9\u91cc\u662foc\u5c0f\u6545\u4e8b\u680f\u76ee</p> <p>\u5927\u6982\u662f\u7231\u624b\u827a\u4e16\u754c\u89c2\u4e0b\u7f16\u7684\u5c0f\u4f5c\u6587</p>"},{"location":"ads/ads_part_1/","title":"\u9ad8\u7ea7\u6570\u636e\u4e0e\u7b97\u6cd5\u5206\u6790\u2014\u2014Part 1","text":""},{"location":"ads/ads_part_1/#preparation-before-class","title":"Preparation Before Class","text":"<ul> <li> <p>\u6559\u6750</p> <p>\u6570\u636e\u7ed3\u6784\u6559\u6750</p> <p>introduction to algorithms</p> <p>algorithm design</p> <p>\u6570\u636e\u7ed3\u6784\u5b66\u4e60\u4e0e\u5b9e\u9a8c\u6307\u5bfc</p> </li> <li> <p>\u8bc4\u5206</p> <p>\u4f5c\u4e1a\uff1a10%</p> <p>Discussion\uff1a10%</p> <p>Research Topic\uff1a10%</p> <p>\u671f\u4e2d\uff1a10%\uff08\u53ef\u88ab\u671f\u672b\u8986\u76d6\uff09</p> <p>\u671f\u672b\uff1a40%</p> </li> </ul>"},{"location":"ads/ads_part_1/#avl-trees","title":"AVL Trees","text":"<ul> <li> <p>\u76ee\u6807\uff1a\u52a0\u901f\u67e5\u627e</p> </li> <li> <p>\u65b9\u6cd5\uff1a\u67e5\u627e\u6811</p> <ul> <li> <p>O(height)</p> </li> <li> <p>\u9012\u589e/\u9012\u51cf\u5e8f\u5217\u9000\u5316\u6210\u94fe</p> </li> <li> <p>\u6700\u597d\u60c5\u51b5\uff08\u6811\u6700\u77ee\uff09\uff1a\u6240\u6709\u5b50\u6811\u9ad8\u5ea6\u76f8\u7b49\u2014\u2014\u592a\u82db\u523b</p> </li> </ul> </li> </ul>"},{"location":"ads/ads_part_1/#avl","title":"AVL\u6811\u5b9a\u4e49","text":"<ul> <li> <p>\u7a7a\u6811\u5e73\u8861</p> </li> <li> <p>\u975e\u7a7a\u6811\u5e73\u8861\u5f53\u4e14\u4ec5\u5f53</p> <ul> <li> <p>\u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u90fd\u5e73\u8861</p> </li> <li> <p>\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u5c0f\u4e8e\u7b49\u4e8e1</p> </li> </ul> </li> <li> <p>\u5e73\u8861\u56e0\u5b50BF\uff08node\uff09=\u5de6\u5b50\u6811\u9ad8\u5ea6-\u53f3\u5b50\u6811\u9ad8\u5ea6</p> <ul> <li>AVL\u53ea\u80fd\u53d6-1\uff0c0\uff0c1</li> </ul> </li> </ul> <p>\u672c\u8bfe\u4e2d\u5b9a\u4e49\u7a7a\u6811\u9ad8\u5ea6\u4e3a-1</p> <p>\u51e0\u4e2a\u4f8b\u5b50\uff1a  </p> <p>\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6027\u8d28\u8f83\u597d\u7684\u6811</p>"},{"location":"ads/ads_part_1/#avl_1","title":"\u5982\u4f55\u5f97\u5230AVL\u6811","text":"<ul> <li>\u6811\u7684\u65cb\u8f6c  B\u9ad8\u5ea6\u589e\u52a01\uff0cA\u9ad8\u5ea6\u51cf\u5c111\u3002\u590d\u6742\u5ea6\u4e3a\\(O(1)\\)\uff0c\u4ee3\u7801\u5982\u4e0b <pre><code>typedef struct Node *Tree;\nstruct Node\n{\n    ElementType Element;\n    Tree Left;\n    Tree Right;\n}\n\nA-&gt;Left=B-&gt;Right;\nB-&gt;Right=A;\nreturn B;//\u65b0\u6839\n</code></pre></li> </ul> <p>AVL\u6811\u7684\u63d2\u5165\uff1a</p> <p>\u6bcf\u63d2\u5165\u4e00\u4e2a\u65b0\u7ed3\u70b9\uff0c\u8bb0\u5f55\uff08\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\uff09\u9ad8\u5ea6\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u5e73\u8861\u56e0\u5b50\uff0c\u4e00\u4f46\u4e0d\u7b26\u5408\u6761\u4ef6</p> <ul> <li> <p>\u56e0\u5b50\u5728\u540c\u4e00\u4e2a\u65b9\u5411\u53d8\u5316</p> <p>-2\uff1a\u5de6\u65cb\uff08RR Rotation\u2014\u2014\u6307\u4ece\u5931\u8861\u8282\u70b9\u5f00\u59cb\u5411\u53f3\u63d2\u4e24\u6b21\u7684\u60c5\u51b5\uff09</p> <p>2\uff1a \u53f3\u65cb\uff08LL Rotation\uff0c\u4e0eRR\u5bf9\u79f0\uff09 </p> </li> <li> <p>\u4e0d\u540c\u65b9\u5411\uff1a\u628a\u6811\u9ad8\u9ad8\u65b9\u5411\u7684\u5b59\u5b50\u8f6c\u4e0a\u6765\uff0c\u8f6c\u4e24\u6b21\uff08\u4e24\u79cd\u5bf9\u79f0\u60c5\u51b5\uff0cLR\u548cRL\uff09 </p> </li> </ul> <p>\u5b9e\u9645\u4e0a\uff0c\u6839\u636eAVL\u6811\u7684\u826f\u597d\u5b9a\u4e49\uff0c\u5728\u6bcf\u6b21\u63d2\u5165\u540e\u53ea\u9700\u8981\u4e00\u6b21\u64cd\u4f5c\uff08RR/LR...\uff09\u5c31\u80fd\u4f7f\u5176\u518d\u6b21\u5e73\u8861\u3002</p> <p>AVL\u6811\u7684\u5220\u9664\uff1a</p> <p>\u7528\u5220\u9664\u8282\u70b9\u5de6\u5b50\u6811\u7684\u6700\u5927\u8282\u70b9/\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8282\u70b9\u66ff\u6362\u4ed6\uff08\u4e0eBST\u76f8\u540c\uff09\uff0c\u518d\u5220\u9664\u3002</p> <p>\u4ece\u5220\u9664\u8282\u70b9\u7684\u7236\u8282\u70b9\u5f00\u59cb\uff08\u66ff\u6362\u540e\uff09\uff0c\u8bb0\u5f55\uff08\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\uff09\u9ad8\u5ea6\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u5e73\u8861\u56e0\u5b50\uff0c\u4e00\u4f46\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u5c31\u7528insert\u4e2d\u7684\u65b9\u6cd5\u8c03\u6574\u3002\u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u591a\u6b21\u8c03\u6574\u3002</p>"},{"location":"ads/ads_part_1/#_1","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<p>\u6811\u9ad8\u7684\u6e10\u8fdb\u4e0a\u754c</p> <p>\\(n_h\\)\u2014\u2014h\u9ad8\u5ea6\u7684\u6811\u9700\u8981\u7684\u6700\u5c0f\u7ed3\u70b9\u6570</p> <p>\u9ad8\u5ea6\u4e3ah\u7684\u6811\uff08\u6240\u9700\u8282\u70b9\u6700\u5c11\uff09\u5982\u4e0b </p> <p>\u4e0e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7c7b\u4f3c\uff1a</p> <p>\\(F_0=0,F_1=1,F_n=F_{n-1}+F_{n-2}\\)</p> <p>\u800c\\(F_n\\approx\\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^i\\)</p> <p>\u6240\u4ee5  \\(n_h =F_{n+3}-1\\)</p> <ul> <li>\\(h=O(lnn)\\)</li> </ul>"},{"location":"ads/ads_part_1/#splay-trees","title":"Splay Trees","text":"<ul> <li> <p>\u76ee\u6807\uff1aM\u6b21\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\\(O(MlogN)\\)\uff0c\u5373\u6bcf\u4e2a\u64cd\u4f5c\u5e73\u5747\u590d\u6742\u5ea6\u4e3a\\(O(logN)\\)</p> </li> <li> <p>\u57fa\u672c\u601d\u60f3\uff1a\u6bcf\u6b21\u67e5\u8be2/\u63d2\u5165\uff0c\u5c06\u8be5\u5143\u7d20\u63d0\u5230\u6839\u8282\u70b9</p> </li> </ul>"},{"location":"ads/ads_part_1/#_2","title":"\u6784\u9020\u8fc7\u7a0b","text":"<ul> <li> <p>\u5982\u679c\u67e5\u8be2\u8282\u70b9\u7684\u7236\u4eb2\u662f\u6839\u2014\u2014\u65cb\u8f6c\u67e5\u8be2\u8282\u70b9</p> </li> <li> <p>\u5982\u679c\u4e0d\u662f\uff0c\u5219\u6709\u7236\u4eb2\u8282\u70b9\uff08P\uff09\u548c\u7956\u7236\u8282\u70b9\uff08G\uff09</p> <ul> <li>zig-zag\uff08z\u5b57\u5f62\uff09\uff1a\u8f6c\u4e24\u6b21\u5f53\u524d\u8282\u70b9</li> <li>zig-zig\uff08\u4e00\u4e2a\u65b9\u5411\uff09\uff1a\u5148\u8f6c\u7236\u8282\u70b9\uff0c\u518d\u8f6c\u5f53\u524d\u8282\u70b9 </li> </ul> </li> </ul>"},{"location":"ads/ads_part_1/#_3","title":"\u5220\u9664\u64cd\u4f5c","text":"<ol> <li> <p>\u627e\u5230\u8981\u5220\u9664\u7684\u5143\u7d20X\uff08\u8fd9\u6837\u8ba9\u5176\u5728\u6839\u8282\u70b9\uff09</p> </li> <li> <p>\u5220\u6389X\uff0c\u5f97\u5230\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811</p> </li> <li> <p>\u627e\u5230\u5de6\u5b50\u6811\u6700\u5927\u7684\u8282\u70b9\uff0c\u5c06\u5176\u63a8\u5230\u6839\u8282\u70b9</p> </li> <li> <p>\u8fd9\u6837\u5c31\u80fd\u76f4\u63a5\u5c06\u53f3\u5b50\u6811\u63a5\u5230\u5de6\u5b50\u6811\u7684\u53f3\u8fb9</p> </li> </ol>"},{"location":"ads/ads_part_1/#amortized-analysisthree-normal-methods","title":"Amortized Analysis(Three normal methods)","text":"<p>An amortized analysis guarantees the average performance of each operation in the worst case.</p> <ul> <li> <p>Splay\u6811\u7684\u76ee\u6807\uff1aM\u6b21\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\\(O(MlogN)\\)\u2014\u2014\u5747\u644a\u65f6\u95f4\u4e0a\u754c(Amortized time bound)</p> </li> <li> <p>worst-case bound &gt;= amortized time bound &gt;= average-case bound</p> </li> <li> <p>\u524d\u4e24\u79cd\u4e0e\u6570\u636e\u5206\u5e03\u65e0\u5173</p> </li> </ul>"},{"location":"ads/ads_part_1/#_4","title":"\u6808\u7684\u4f8b\u5b50\u4ee5\u53ca\u65b9\u6cd5\u8bf4\u660e","text":""},{"location":"ads/ads_part_1/#_5","title":"\u805a\u5408\u5206\u6790","text":"<p>\u5bf9\u4e8e\u6240\u6709 n\uff0cn \u4e2a\u8fd0\u7b97\u5e8f\u5217\u603b\u5171\u9700\u8981\u6700\u574f\u60c5\u51b5\u65f6\u95f4\uff08determine an upper bound\uff09 T\uff08n\uff09\u3002\u56e0\u6b64\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7684\u5e73\u5747\u6210\u672c\u6216\u644a\u9500\u6210\u672c\u4e3a T\uff08n\uff09/n\u3002</p> <p>\u4ee5\u6808\u4e3a\u4f8b\uff1a</p> <ul> <li> <p>push\uff1a\\(O(1)\\)\uff0c pop\uff1a\\(O(1)\\)\uff0c </p> </li> <li> <p>multipop\uff08\u4e00\u6b21pop\u51fan\u4e2a\uff09\uff1a\\(min\\{k\uff0cn\\}=O(n)\\)\uff0c\u5176\u4e2dk\u662f\u5f53\u524d\u6808\u4e2d\u5143\u7d20\u6570</p> </li> <li> <p>\u6240\u4ee5n\u6b21\u64cd\u4f5c\u4e0a\u754c\uff1a\\(O(n^2)\\)</p> </li> <li> <p>\u66f4\u7cbe\u786e\uff1a\u6808\u4e2d\u5143\u7d20\u6570\u80af\u5b9a\u5c0f\u4e8en\uff0cpush\u8fdb\u7684\u5143\u7d20\u53ea\u80fdpop\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n)\\)   $$T_{amortized}= O( n )/n = O(1)   $$</p> </li> </ul>"},{"location":"ads/ads_part_1/#_6","title":"\u6838\u7b97\u6cd5","text":"<p>\u4ee5\u5356\u6c7d\u6c34\u4e3a\u4f8b\uff1a</p> <ul> <li> <p>a\u5356\u4e00\u74f6\u6c7d\u6c343\u5143</p> </li> <li> <p>b\u75285\u5143\u4e70\u6c7d\u6c34\uff0c\u5b58\u4e24\u5143\uff08credits\uff09\u5230a\u90a3\uff0c\u4e0b\u6b21\u4e70\u6c7d\u6c34\u53ef\u4ee5\u7528\u3002\u6b64\u65f6actual cost\uff1a3\u5143</p> </li> <li> <p>\\(amortized\\ cost = actual\\ cost + credits\\)</p> </li> <li> <p>\u4e70n\u74f6\u6c7d\u6c34\uff0cbound\uff1a $$ amortized\\ cost \\geq  actual\\ cost(\u53733n\u5143\uff0c\u56e0\u4e3a\u4e0d\u8d4a\u8d26) $$</p> </li> </ul> <p>\u6ce8\u610f\u4fdd\u8bc1\u6700\u7ec8\u4fe1\u7528\u4e0d\u5c0f\u4e8e0</p> <p>\u56de\u5230\u6808\u64cd\u4f5c\uff1a</p> <ul> <li> <p>\u5b9e\u9645\u4ee3\u4ef7\uff1apush=1, pop=1, multipop=min(sizeof(s),k)</p> </li> <li> <p>\u5747\u644a\u4ee3\u4ef7\uff1apush = 2(\u63d0\u524d\u628apop\u7684\u4ee3\u4ef7\u4ed8\u6389\uff0c\u5373\u4f7f\u4e0dpop\u8be5\u5143\u7d20), pop = multipop = 0\uff0c\u8fd9\u6837\u6240\u6709\u4ee3\u4ef7\u90fd\u662f\u5e38\u6570</p> </li> <li> <p>Credits\uff1apush = +1, pop = -1, multipop = -min(sizeof(s),k)</p> </li> <li> <p>multipop\u65f6\u7684\u4fe1\u7528\u4e3asizeof(s)\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4fe1\u7528\u4e3a\u8d1f\u7684\u60c5\u51b5</p> </li> <li> <p>n\u6b21\u64cd\u4f5c\u6700\u5927\u7684amortized cost\u4e3a2n\uff0c\\(T_{amortized}= O( n )/n = O(1)\\)</p> </li> </ul>"},{"location":"ads/ads_part_1/#_7","title":"\u52bf\u80fd\u6cd5","text":"<ul> <li> <p>\\(\\Phi(D_i)\\)\uff1a\u52bf\u80fd\u51fd\u6570\uff0c\u8868\u793a\\(D_i\\)\u72b6\u6001\u7684\u52bf\u80fd</p> </li> <li> <p>\\(Credits =\\Phi(D_i)-\\Phi(D_{i-1})\\); </p> <ul> <li>\u5f53 Credits &gt; 0 \u65f6\uff0c\u52bf\u80fd\u589e\u52a0\uff0c\u76f8\u5f53\u4e8e\u628a\u63d0\u524d\u652f\u4ed8\u7684\u4ee3\u4ef7\u5b58\u50a8\u4e3a\u52bf\u80fd</li> <li>\u5f53 Credits &lt; 0 \u65f6\uff0c\u52bf\u80fd\u51cf\u5c11\uff0c\u76f8\u5f53\u4e8e\u628a\u63d0\u524d\u652f\u4ed8\u7684\u4ee3\u4ef7\u7528\u6389</li> </ul> </li> <li> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u7b97\u51fa\u5747\u644a\u4ee3\u4ef7(\\(\\hat{c_i}\\) \u662f\u5747\u644a\u4ee3\u4ef7\uff0c \\(c_i\\) \u662f\u5b9e\u9645\u4ee3\u4ef7)   $$   \\hat c_i = c_i+\\Phi(D_i)-\\Phi(D_{i-1})   $$</p> </li> <li> <p>\u5408\u6cd5\u7684\u52bf\u80fd\u51fd\u6570\uff1a\u4fdd\u8bc1\\(\\Phi(D_{0})\\)\u662f\u6700\u5c0f\u7684\uff0c\u8fd9\u6837\u603b\u7684Credits\\(=\\Phi(D_n)-\\Phi(D_{0})\\)&gt;0\uff0c\u4f7f\u5f97\u5747\u644a\u4ee3\u4ef7\u662f\u5b9e\u9645\u4ee3\u4ef7\u7684\u4e0a\u754c\u3002 $$ \\sum_{i=1}^n\\hat{c_i}=\\sum_{i=1}^n(c_i+\\Phi(D_i)-\\Phi(D_{i-1}))=\\sum_{i=1}^nc_i+\\Phi(D_n)-\\Phi(D_{0}) $$</p> </li> </ul> <p>\u518d\u6b21\u56de\u5230\u6808</p> <ul> <li> <p>\u52bf\u80fd\u51fd\u6570\\(\\Phi(D_i)=D_i\\)\u65f6\u523b\u6808\u4e2d\u7684\u5143\u7d20\u6570</p> </li> <li> <p>\u8ba1\u7b97\u5747\u644a\u4ee3\u4ef7\uff1a</p> </li> <li> <p>push\uff1a\\(\\hat{c_i}=c_i+\\Phi(D_i)-\\Phi(D_{i-1})=1+1=2\\)</p> </li> <li> <p>multipop\uff1a\\(\\hat{c_i}=c_i+\\Phi(D_i)-\\Phi(D_{i-1})=k'-k'=0\\)</p> </li> <li> <p>\u6bcf\u4e2a\u64cd\u4f5c\u7684\u4ee3\u4ef7\u90fd\u662fO(1)\u2014\u2014\u5747\u644a\u4ee3\u4ef7\u662fO(1)</p> </li> </ul>"},{"location":"ads/ads_part_1/#spaly","title":"Spaly\u6811\u5747\u644a\u5206\u6790","text":"<p>\u5e94\u7528\uff1a\u5206\u6790splay tree\u7684\u5747\u644a\u4ee3\u4ef7\u2014\u2014Amortized Analysis Using Potential Methods:</p> <p>\u6811\u7684\u5e38\u89c1\u52bf\u80fd\u51fd\u6570\uff1a\u8282\u70b9\u4e2a\u6570\u3001\u6811\u9ad8\u00b7\u00b7\u00b7</p> <p>(\u56e0\u4e3a\u62a5\u544a\u7528\u82f1\u6587\u5199\u7684\u6240\u4ee5\u4e0b\u9762\u662f\u82f1\u6587)</p> <p>In tree's amortized analysis, we often use the height of tree or the amount of nodes as the potential function, which satisfy \\(\\Phi(0)\\) is the minimum. To make the potential function increasing slowly, we choose \\(\\Phi(T)=log{\\sum_{i\\in T}S(i)}\\), where S(i) is the number of descendants of i (i included). \\(\\Phi(T)\\) is also called rank of T, notion \\(R(T)\\)</p> <p>Lemma: If \\(a+b\\leq c\\) </p> <p>then  \\(loga+logb\\leq 2logc-2\\)</p> <p>Same as the part of algorithm analysis, there are three situations to discuss according to the picture.</p> <ul> <li> <p>If the \"X\" to be pushed is one of the childs of root, we only need one rotation. Except X and P, the \"S(i)\"  didn't change, and the rotation cost \\(c_i\\) is 1. So the amortized cost    $$   \\hat{c_i}=1+R_2(X)-R_1(X)+R_2(P)-R_1(P)   $$   $$   \\leq 1+R_2(X)-R_1(X)   $$     (shown below that \\(R_2(P)&lt;R_1(P)\\))    </p> </li> <li> <p>In the zig-zag case, we need two rotation, costing 2. We note that \\(R_2(X) = R_1(G) = log(the\\ number\\ of\\ nodes\\ in\\ T)\\). So the amortized cost    $$   \\hat{c_i}=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)   $$</p> </li> </ul> <p>$$   =2-R_1(X)+R_2(P)-R_1(P)+R_2(G)   $$</p> <p>$$   \\leq 2(R_2(X)-R_1(X))   $$     (shown below that nodes: \\(P_2+G_2&lt;X_2,\\ so\\ according\\ to\\ lemma,\\ R_2(P)+R_2(G)\\leq 2R_2(X)+2\\))      * In the zig-zig case, we need two rotation, too, costing 2. We also note that \\(R_2(X) = R_1(G)\\). So the amortized cost    $$   \\hat{c_i}=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)   $$</p> <p>$$   =2-R_1(X)+R_2(P)-R_1(P)+R_2(G)   $$    $$    =2-2R_1(X)+R_2(P)-R_1(P)+R_2(G)+R_1(X)    $$   $$   \\leq 3(R_2(X)-R_1(X))   $$     (shown below that nodes: \\(X_1+G_2&lt;X_2,\\ so\\ according\\ to\\ lemma,\\ R_1(X)+R_2(G)\\leq 2R_2(X)+2\\))   </p> <p>When splay, the former \\(3R_2(X)\\) could be eliminated by the latter item's \\(-3R_1(X)\\). After sum of all the items, we get: $$ \\hat{c_i} \\leq 1+3(R_2(X)-R_1(X))=O(logN) $$</p>"},{"location":"ads/ads_part_1/#incrementing-a-binary-counter","title":"Incrementing a binary counter","text":"<p>\u7b97\u6cd5\u5bfc\u8bba\u7684\u644a\u8fd8\u5206\u6790\u4f8b\u5b50</p> <p>Incrementing a binary counter(k bit in total)</p> <ul> <li> <p>\u6bcf\u6b21\u4ece\u4f4e\u4f4d\u5f80\u9ad8\u4f4d\u7ffb\u8f6cbit\uff0c\u9047\u52301\u7ee7\u7eed\u7ffb\u8f6c\uff0c\u9047\u52300\u7ffb\u8f6c\u5b8c\u540e\u505c\u4e0b\u6765</p> </li> <li> <p>worst case: \u6bcf\u6b21\u6700\u591a\u8f6ck\u4e2abits\u2014\u2014011...1=&gt;100...0</p> </li> </ul> <p>\u805a\u5408\u5206\u6790\uff1a</p> <ul> <li> <p>A[0]\u6bcf\u6b21\u90fd\u6539\u53d8</p> </li> <li> <p>A[1]\u6bcf\u4e24\u6b21\u6539\u53d8\u4e00\u6b21</p> </li> <li> <p>\u5047\u8bbe\u8ba1\u6570n\u6b21\uff0c\u5219A[0]\u6539\u53d8\\(n\\)\u6b21\uff0cA[1]\u6539\u53d8\\(\\lfloor\\frac{n}{2}\\rfloor\\)\u6b21...A[i]\u6539\u53d8\\(\\lfloor\\frac{n}{2^i}\\rfloor\\)\u6b21</p> </li> <li> <p>\u56e0\u6b64\u603b\u5171\u7684\u64cd\u4f5c\uff08\u7ffb\u8f6cbit\uff09\u7684\u6b21\u6570\u4e3a</p> </li> </ul> \\[ \\sum^{k-1}_{i=0}\\lfloor\\frac{n}{2^i}\\rfloor&lt;n\\sum^{\\infty}_{i=0}\\frac{1}{2^i}=2n \\] <p>\u56e0\u6b64\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\u4e3aO(n)\uff0c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)/n=O(1).</p> <p>\u6838\u7b97\u6cd5\uff1a</p> <ul> <li> <p>\u5b9e\u9645\u4ee3\u4ef7\uff1a1\u53d8\u4e3a0 = 1, 0\u53d8\u4e3a1 = 1</p> </li> <li> <p>\u5747\u644a\u4ee3\u4ef7\uff1a0\u53d8\u4e3a1 = 2(\u63d0\u524d\u628a1\u53d8\u4e3a0\u7684\u4ee3\u4ef7\u4ed8\u6389), 1\u53d8\u4e3a0 = 0</p> </li> <li> <p>\u4ece0\u5f00\u59cb\u8ba1\u6570\uff0c\u80af\u5b9a\u5148\u5c060\u53d8\u4e3a1\u624d\u80fd\u53d8\u56de\u53bb\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4fe1\u7528\u4e3a\u8d1f\u7684\u60c5\u51b5</p> </li> <li> <p>\u6211\u4eec\u77e5\u9053\u6bcf\u6b21\u6700\u591a\u53ea\u6709\u4e00\u4e2a0\u53d8\u62101</p> </li> <li> <p>\u56e0\u6b64\u5747\u644a\u4ee3\u4ef7\u4e3aO(1)</p> </li> </ul> <p>\u52bf\u80fd\u6cd5\uff1a</p> <ul> <li> <p>\u9009\u53d6\u52bf\u80fd\u51fd\u6570\uff1a\u7b2c i \u6b21\u64cd\u4f5c\u540e 1 \u7684\u6570\u76ee\uff0c\u8bb0\u4e3a \\(b_i\\)</p> </li> <li> <p>\u6bcf\u6b21\u7ffb\u8f6c\uff0c\u5c06\u4f4e\u4f4d\u7684\u8fde\u7eed\u7684 1 \u7ffb\u8f6c\u4e3a 0 \uff0c\u9047\u5230\u7684\u7b2c\u4e00\u4e2a 0 \u7ffb\u8f6c\u4e3a 1 \u3002\u5c06\u7ffb\u8f6c1\u7684\u6570\u76ee\u8ba1\u4e3a \\(t_i\\) \uff0c\u8fd9\u6837\u4e00\u6b21\u64cd\u4f5c\u7684\u5b9e\u9645\u4ee3\u4ef7 \\(c_i = t_i +1\\)</p> </li> <li> <p>\u5206\u60c5\u51b5\u8ba8\u8bba \\(b_i\\) \u548c \\(b_{i-1}\\) \u7684\u5173\u7cfb\uff0c\u8fd9\u6837\u5728 \\(\\Phi(D_i)-\\Phi(D_{i-1})\\) \u4e2d\u6d88\u53bb \\(b_i\\)</p> <ul> <li>\\(b_i=0\\) \u2014\u2014 \u5219\u7b2c i \u6b21\u64cd\u4f5c\u5c06 k \u4e2a 1 \u5168\u90e8\u7ffb\u8f6c\u4e3a 0 \uff0c\u6240\u4ee5 \\(b_{i-1}=k=t_i\\)</li> <li>\\(b_i&gt;0\\) \u2014\u2014 \u7528 \\(b_{i-1}\\) \u548c \\(t_i\\) \u8ba1\u7b97 \\(b_i\\) \uff1a\\(b_i=b_{i-1}-t_i+1\\)</li> <li>\u56e0\u6b64\uff0c\\(b_i\\leq b_{i-1}-t_i+1\\)</li> </ul> </li> <li> <p>\u73b0\u5728\u6765\u8ba1\u7b97\u5747\u644a\u4ee3\u4ef7     $$     \\hat c_i = c_i+\\Phi(D_i)-\\Phi(D_{i-1}) = t_i +1 + b_i - b_{i-1}     $$     $$     \\leq t_i +1 + b_{i-1}-t_i+1- b_{i-1} = 2     $$</p> </li> <li> <p>\u56e0\u6b64\u6bcf\u6b21\u64cd\u4f5c\u7684\u5747\u644a\u4ee3\u4ef7\u90fd\u662f \\(O(1)\\)</p> </li> </ul> <p>\u5f53\u4e0d\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u65f6\uff0c\u5373 \\(\\Phi({D_0})\\ne 0\\) \u65f6\uff0c\u867d\u7136\u65e0\u6cd5\u4fdd\u8bc1 \\(\\Phi(D_i)-\\Phi(D_{i-1})\\geq 0\\)\uff0c\u4f46\u5747\u644a\u4ee3\u4ef7\u4ecd\u662f \\(O(1)\\)</p> <p>\u524d\u9762\u6211\u4eec\u77e5\u9053 $$ \\sum_{i=1}^n\\hat{c_i}=\\sum_{i=1}^n(c_i+\\Phi(D_i)-\\Phi(D_{i-1}))=\\sum_{i=1}^nc_i+\\Phi(D_n)-\\Phi(D_{0}) $$ \u8f6c\u6362\u4e00\u4e0b $$ \\sum_{i=1}^n{c_i}=\\sum_{i=1}^n\\hat c_i-\\Phi(D_n)+\\Phi(D_{0})=\\sum_{i=1}^n\\hat c_i-b_n+b_0 \\leq \\sum_{i=1}^n\\hat c_i-k $$ \u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u4e4b\u95f4\u76f8\u5dee\u4e00\u4e2a\u5e38\u6570 k \uff0c\u800c\u8fd9\u5bf9\u5747\u644a\u4ee3\u4ef7\u662f\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u4ecd\u662f \\(O(1)\\)</p>"},{"location":"ads/ads_part_1/#red-black-tree","title":"Red-black Tree","text":"<p>tips: \u8bbf\u95ee\u7a7a\u6307\u9488\u4f1a Sigementation fault\uff0c\uff0c\u53ef\u4ee5\u6307\u5411\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff08\u54e8\u5175\uff09</p> <ul> <li>\u76ee\u6807\uff1a\u6bcf\u6b21\u641c\u7d22\u90fd\\((logn)\\)</li> </ul>"},{"location":"ads/ads_part_1/#1","title":"1. \u7ea2\u9ed1\u6811\u5b9a\u4e49","text":"<ol> <li> <p>\u7ea2\u9ed1\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u7ea2\u8272\u7684\uff0c\u8981\u4e48\u662f\u9ed1\u8272\u7684</p> </li> <li> <p>\u6839\u8282\u70b9\u662f\u9ed1\u8272\u7684</p> </li> <li> <p>\u6bcf\u4e2a\u53f6\u5b50\u90fd\u662f\u54e8\u5175\uff08NIL\uff09\uff0c\u54e8\u5175\u662f\u9ed1\u8272\u7684</p> </li> <li> <p>\u5982\u679c\u8282\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u5b69\u5b50\u90fd\u662f\u9ed1\u8272\u7684</p> </li> <li> <p>\u6bcf\u4e2a\u8282\u70b9\u5230\uff08\u80fd\u5230\u8fbe\u7684\uff09\u6240\u6709\u53f6\u5b50\u7684\u7b80\u5355\u8def\u5f84\uff0c\u7ecf\u8fc7\u7684\u9ed1\u8272\u8282\u70b9\u6570\u76f8\u540c</p> </li> </ol> <ul> <li>black height: \u4e0d\u7b97\u81ea\u5df1\u3001\u4e0d\u7b97\u54e8\u5175\uff0c\u4ece\u81ea\u5df1\u5230\u53f6\u5b50\u7ecf\u8fc7\u7684\u9ed1\u8272\u8282\u70b9\u6570</li> </ul> <p>\u5f15\u7406\uff1a\u6709 N \u4e2a\u5185\u90e8\u8282\u70b9\u7684\u7ea2\u9ed1\u6811\u7684\u9ad8\u4e0d\u8d85\u8fc7 2ln(N+1)</p> <p>\u8bc1\u660e\uff1a</p>"},{"location":"ads/ads_part_1/#2","title":"2. \u7ea2\u9ed1\u6811\u6784\u9020","text":"<p>\u6784\u9020\u60f3\u6cd5\uff1a\u63d2\u5165\u65b0\u8282\u70b9\u4e14\u67d3\u6210\u7ea2\u8272\u2014\u2014\u4fdd\u6301\u6027\u8d285\uff0c\u901a\u8fc7\u8fed\u4ee3\u53d8\u6362\u4fdd\u6301\u5176\u4ed6\u6027\u8d28</p> <p>Insert(\u4e0d\u6ee1\u8db3\u6027\u8d28\u6709\u4e09\u79cd\u60c5\u51b5)\uff1a</p> <ul> <li> <p>case 1\uff1a\u7ea2\u53d4\u53d4\uff08\u6240\u4ee5\u7237\u7237\u80af\u5b9a\u9ed1\u8272\uff09\u2014\u2014\u5c06\u7238\u7238\u548c\u53d4\u53d4\u67d3\u9ed1\uff0c\u7237\u7237\u67d3\u7ea2</p> </li> <li> <p>case 2\uff1a\u8fd1\u53d4\u53d4\u9ed1\u2014\u2014\u65cb\u8f6c\u5230case3</p> </li> <li> <p>case 3\uff1a\u8fdc\u53d4\u53d4\u9ed1\u2014\u2014\u7236\u4eb2\u67d3\u9ed1\uff0c\u65cb\u8f6c\u7237\u7237</p> </li> </ul> <p>\u8fd9\u6837\u4fdd\u6301\u4e86\u6bcf\u6b21\u53ea\u6709\u4e00\u6761\u89c4\u5219\u88ab\u7834\u574f</p> <ul> <li>\u590d\u6742\u5ea6\uff1a\u6700\u574f\u60c5\u51b5\u2014\u2014\u4e00\u76f4case 1 $$ T = O(h) = O(logn) $$</li> </ul> <p>Delete</p> <ul> <li> <p>\u88ab\u5220\u8282\u70b9\u662fleaf node: \u7236\u4eb2\u6307\u5411NIL</p> </li> <li> <p>\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff1a\u7528\u513f\u5b50\u66ff\u4ee3\u4ed6</p> </li> <li> <p>\u6709\u4e24\u4e2a\u513f\u5b50\uff1a\u7528\u5de6\u5b50\u6811\u6700\u5927\u7684/\u53f3\u5b50\u6811\u6700\u5c0f\u7684\u66ff\u4ee3\u4ed6\uff08\u4fdd\u6301\u672c\u8eab\u7684\u989c\u8272\u4e0d\u53d8\uff0c\u66ff\u6362\u503c\uff09\uff0c\u518d\u9012\u5f52\u5730\u5220\u9664\u66ff\u6362\u7684\u8282\u70b9</p> </li> <li> <p>\u5982\u679c\u5220\u9664\u7684\u8282\u70b9\uff08x\uff09\u662f\u7ea2\u8272\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u4e0d\u4f1a\u5f71\u54cd\u7ea2\u9ed1\u6811\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\u3002\u5220\u9664\u9ed1\u8272\u8282\u70b9\u53ef\u80fd\u4f1a\u7834\u574f\u7ea2\u9ed1\u6811\u7684\u6027\u8d28\uff0c\u56e0\u6b64\u9700\u8981\u8fdb\u884c\u4fee\u6b63\u3002\u5220\u9664\u9ed1\u8272\u8282\u70b9\u65f6\u4f1a\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u9700\u8981\u8003\u8651\uff1a</p> <ul> <li> <p>case 1\uff1a\u88ab\u5220\u9664\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u8f6c\u6362\u6210\u540e\u9762\u7684\u51e0\u79cd\u60c5\u51b5\u2014\u2014\u5148\u628a\u5144\u5f1f\u8282\u70b9\u7684\u7ea2\u8272\u7ed9\u7236\u4eb2\uff0c\u518d\u5c06\u5144\u5f1f\u8282\u70b9\u65cb\u8f6c\u4e0a\u53bb     </p> </li> <li> <p>case 2\uff1a\u88ab\u5220\u9664\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9\u662f\u9ed1\u8272\u7684\uff0c\u4e14\u513f\u5b50\u90fd\u662f\u9ed1\u8272\u7684\u2014\u2014\u5148\u4ee4\u5144\u5f1f\u8282\u70b9\u4e3a\u7ea2\u8272\uff0c\u5982\u679c\u7236\u4eb2\u662f\u7ea2\u8272\uff0c\u5219\u76f4\u63a5\u5220\u9664 x\uff0c\u5e76\u5c06\u7236\u4eb2\u6539\u4e3a\u9ed1\u8272\uff0c\u5c31\u5b8c\u6210\u4e86\u8c03\u6574\uff1b\u5982\u679c\u7236\u4eb2\u662f\u9ed1\u8272\uff0c\u5219\u628a\u7236\u4eb2\u5f53\u4f5c\u65b0\u7684\u88ab\u5220\u9664\u8282\u70b9\u8fdb\u884c\u8c03\u6574\uff08\u53ea\u662f\u8c03\u6574\u65b9\u6cd5\uff0c\u4e0d\u7528\u5220\u9664\uff09     </p> </li> <li> <p>case 3\uff1a\u88ab\u5220\u9664\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9\u662f\u9ed1\u8272\u7684\uff0c\u4e14\u8fd1\u4f84\u5b50\u662f\u7ea2\u8272\u7684\u2014\u2014\u5c06\u7ea2\u8272\u7ed9\u5144\u5f1f\uff0c\u518d\u628a\u8fd1\u4f84\u5b50\u8f6c\u5230\u5144\u5f1f\u7684\u4f4d\u7f6e\uff08\u53d8\u6362\u6210 case 4\uff09      </p> </li> <li> <p>case 4\uff1a\u88ab\u5220\u9664\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9\u662f\u9ed1\u8272\u7684\uff0c\u4e14\u8fdc\u4f84\u5b50\u662f\u7ea2\u8272\u7684\u2014\u2014\u5144\u5f1f\u4e0e\u7236\u4eb2\u4ea4\u6362\u989c\u8272\uff0c\u518d\u628a\u5144\u5f1f\u8f6c\u4e0a\u6765\uff0c\u5220\u9664 x</p> <p></p> </li> </ul> </li> </ul> <p>\u5177\u4f53\u4f8b\u5b50</p> <p></p>"},{"location":"ads/ads_part_1/#b-tree","title":"B+ Tree","text":""},{"location":"ads/ads_part_1/#1_1","title":"1. \u5b9a\u4e49","text":""},{"location":"ads/ads_part_1/#a-b-tree-of-order-m","title":"A B+ tree of order M:","text":"<ul> <li> <p>\u6839\u8282\u70b9\u8981\u4e48\u6ca1\u6709\u5b69\u5b50\uff0c\u8981\u4e48\u6709\\([2,M]\\)\u4e2a\u5b69\u5b50</p> </li> <li> <p>\u9664\u6839\u4e4b\u5916\u7684\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u6709\\([\\lceil M/2\\rceil,M]\\)\u4e2a\u5b69\u5b50</p> </li> </ul>"},{"location":"ads/ads_part_1/#2_1","title":"2. \u63d2\u5165\u8fc7\u7a0b","text":"<ul> <li> <p>\u63d2\u5165=&gt;\u82e5\u8d85\u9650=&gt;\u5206\u88c2</p> </li> <li> <p>\u4fdd\u8bc1\u6709\u5e8f/\u627e\u5230\u4f4d\u7f6e\uff1a\u904d\u5386\uff08O(n)\uff09</p> </li> <li> <p>\u5982\u679c\u63a8\u5230\u524d\u9762\u2014\u2014\u53ef\u80fd O(n)\uff0c\u56e0\u6b64\u5b9e\u9645\u64cd\u4f5c\u4e0d\u8fd9\u4e48\u505a</p> </li> </ul> <pre><code>Btree Insert(ElementType X,Btree T)\n{\n  Seach from root to leaf\n}\n</code></pre> <p>Find \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logN)\uff0c\u4e0d\u7ba1\u5ea6\u6570\u662f\u591a\u5c11</p> <p>choose M: best 3 or 4</p> <p>B+\u6811\u7684\u597d\u5904\uff1a\u76f8\u8fd1\u7684\u5143\u7d20\u79bb\u5f97\u8fd1\uff0c\u78c1\u76d8\u53cb\u597d</p>"},{"location":"ads/ads_part_1/#3","title":"3. \u5220\u9664\u8fc7\u7a0b","text":"<ul> <li> <p>\u5220\u9664\u8282\u70b9=&gt;\u82e5\u4f4e\u4e8e\u6700\u4f4e\u6570\u91cf\u9650\u5236\u5219\uff1a</p> <ul> <li>\u82e5\u5144\u5f1f\u6709\u591a\u4f59\u8282\u70b9\uff0c\u5219\u501f\u4e00\u4e2a\uff0c\u66f4\u65b0\u952e\u503c</li> <li>\u82e5\u6ca1\u6709\uff0c\u5219\u4e0e\u5144\u5f1f\u5408\u5e76\uff0c\u5e76\u9012\u5f52\u5730\u5411\u4e0a\u64cd\u4f5c\uff0c\u8ddf\u65b0\u952e\u503c</li> </ul> </li> </ul>"},{"location":"ads/ads_part_2/","title":"\u9ad8\u7ea7\u6570\u636e\u4e0e\u7b97\u6cd5\u5206\u6790\u2014\u2014Part 2","text":""},{"location":"ads/ads_part_2/#inverted-file-index","title":"Inverted File Index","text":"<p>\u5e94\u7528\uff1a\u4fe1\u606f\u68c0\u7d22\uff0c\u641c\u7d22\u5f15\u64ce</p> <p>\u641c\u7d22\u5f15\u64ce\u7684\u641c\u7d22\u65b9\u5f0f\uff1f</p> <ul> <li> <p>Solution 1: \u904d\u5386\u5bfb\u627e\u641c\u7d22\u7684\u5173\u952e\u5b57\uff08\u592a\u8017\u65f6\uff09</p> </li> <li> <p>Solution 2: \u77e9\u9635\u5b58\u50a8\uff08\u592a\u8017\u7a7a\u95f4\uff09 </p> </li> </ul> <p>\u78c1\u5e26\u5047\u8bbe\uff1a\u8bcd\u548c\u8bcd\u6ca1\u6709\u987a\u5e8f</p> <ul> <li> <p>Solution 3: Inverted File Index\uff08\u53c2\u8003\u56fe\u8bba\uff0c\u5c06\u77e9\u9635\u7528\u90bb\u63a5\u8868\u8868\u793a\uff09  \u4ee5a\u4e3a\u4f8b\uff1a\u51fa\u73b0\u6b21\u65703\u6b21\uff0c\u5206\u522b\u51fa\u73b0\u5728\u7b2c\u4e8c\u4e2a\u7f51\u7ad9\u7684\u7b2c\u516d\u4e2a\uff0c\u7b2c\u4e09\u4e2a\u7f51\u7ad9\u7684\u7b2c\u516d\u4e2a\uff0c\u7b2c\u56db\u4e2a\u7f51\u7ad9\u7684\u7b2c\u516d\u4e2a\u3002</p> <p>\u56e0\u6b64\u94fe\u8868\u91cc\u5b58\u50a8\u7684\u662f&lt;3,(2;6),(3;6),(4,6)&gt;</p> </li> </ul> <pre><code>while ( read a document D ) {\n    while ( read a term T in D ) {\n        if ( Find( Dictionary, T ) == false )\n            Insert( Dictionary, T );\n        Get T\u2019s posting list;\n        Insert a node to T\u2019s posting list;\n    }\n}\nWrite the inverted index to disk;\n</code></pre>"},{"location":"ads/ads_part_2/#optimize","title":"Optimize","text":"<ol> <li> <p>\u5bf9term\u8fdb\u884c\u5904\u7406</p> <ul> <li> <p>\u53ea\u7559\u4e0b\u8bcd\u6839</p> </li> <li> <p>\u505c\u7528\u8bcd\uff08stop words\uff09\u8fc7\u6ee4\uff1athe\u3001a\u3001what...\u2014\u2014\u6210\u672c\u5927\uff0c\u6536\u83b7\u4f4e</p> </li> </ul> </li> <li> <p>\u52a0\u901f\u641c\u7d22</p> <ul> <li> <p>\u54c8\u5e0c</p> </li> <li> <p>\u641c\u7d22\u6811</p> </li> </ul> <p>Discussion: \u54c8\u5e0c\u548c\u641c\u7d22\u6811\u5404\u81ea\u7684\u4f18\u7f3a\u70b9\uff1f</p> </li> <li> <p>\u5185\u5b58\u4f18\u5316</p> <ul> <li> <p>\u5185\u5b58\u4e0d\u591f\u65f6\uff0c\u628a\u5199\u597d\u7684\u8bcd\u5178\u653e\u5165disk</p> </li> <li> <p>\u91ca\u653e\u5185\u5b58\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bcd\u5178</p> </li> <li> <p>\u6700\u540e\u5f52\u5e76\u6392\u5e8f</p> </li> </ul> </li> <li> <p>\u5b58\u50a8\u4f18\u5316</p> <ul> <li> <p>disk\u90fd\u4e0d\u591f\u65f6\uff08web-scale\u7684\u6570\u636e\uff09</p> </li> <li> <p>Solution 1\uff1a\u5c06\u78c1\u76d8\u6309\u5b57\u6bcd\u5e8f\u653e\u5728\u4e0d\u540c\u7535\u8111\u91cc</p> </li> <li> <p>Solution 2\uff1aDocument-Partitioned index</p> <p>\u6bcf\u4e2a\u5206\u533a\u4ee3\u8868\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u6863\u96c6\u5408\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u8be5\u6587\u6863\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5173\u952e\u8bcd\u4ee5\u53ca\u5b83\u4eec\u5bf9\u5e94\u7684\u9891\u7387\u4fe1\u606f\u3002\u8fd9\u79cd\u5206\u533a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u63d0\u9ad8\u67e5\u8be2\u6548\u7387\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u67e5\u8be2\uff0c\u7cfb\u7edf\u53ea\u9700\u8981\u8bbf\u95ee\u4e0e\u5176\u76f8\u5173\u7684\u6587\u6863\u5206\u533a\u5373\u53ef\u3002</p> <ul> <li>\u597d\u5904\uff1a\u6613\u4e8e\u6269\u5c55\u3001\u4fbf\u4e8e\u5e76\u884c\u3001\u5373\u4f7f\u4e00\u4e2a\u96c6\u5408\u4e0d\u53ef\u7528\u90fd\u80fd\u8fd4\u56de\u7ed3\u679c\uff08\u867d\u7136\u53ef\u80fd\u4e0d\u662f\u6700\u4f73\u7684</li> </ul> </li> </ul> </li> <li> <p>Dynamic indexing</p> <ul> <li> <p>\u7269\u7406\u5220\u9664\u4ee3\u4ef7\u6602\u8d35\u2014\u2014\u505a\u65b0\u65e7\u6807\u8bb0</p> </li> <li> <p>\u5206\u4e3a\u4e00\u4e2aMain list\u548cnew list\uff0c\u5df2\u5b58\u5728\u7684\u8bcd\u653e\u5728Main list\u91cc\uff0c\u65b0\u8bcd\u653e\u5728new list\u91cc</p> </li> </ul> </li> <li> <p>Compression(\u538b\u7f29)</p> <p>\u5c06\u7a7a\u683c\u548c\u505c\u7528\u8bcd\u53bb\u9664\uff0c\u5c06\u8bcd\u6c47\u8868\u7ebf\u6027\u5b58\u50a8\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u4f4d\u7f6e\u5dee\u5e8f\u5217 </p> </li> </ol>"},{"location":"ads/ads_part_2/#measures","title":"Measures","text":"<p>\u51e0\u4e2a\u8bc4\u4ef7\u6307\u6807\uff1a</p> <ul> <li> <p>\u7d22\u5f15\u7684\u5feb\u6162</p> </li> <li> <p>\u641c\u7d22\u7684\u5feb\u6162</p> </li> <li> <p>\u5bf9\u590d\u6742\u8bed\u8a00\u7684\u5904\u7406\u80fd\u529b </p> </li> </ul> \u6587\u6863 \u76f8\u5173 \u4e0d\u76f8\u5173 \u68c0\u7d22\u5230 \\(R_R\\) \\(I_R\\) \u672a\u68c0\u7d22 \\(R_N\\) \\(I_N\\) <p>\u7cbe\u786e\u7387\uff1a\u68c0\u7d22\u5230\u7684\u6b63\u786e\u6837\u672c\u5728\u68c0\u7d22\u5230\u7684\u6837\u672c\u4e0a\u7684\u6bd4\u4f8b $$ Precision\\ P = R_R / (R_R + I_R) $$ \u53ec\u56de\u7387\uff1a\u68c0\u7d22\u5230\u7684\u6b63\u786e\u6837\u672c\u5728\u6240\u6709\u6b63\u786e\u6837\u672c\u4e0a\u7684\u6bd4\u4f8b $$ Recall    \\  R = R_R / (R_R + R_N) $$</p> <p>\u5012\u6392\u6587\u4ef6\u7d22\u5f15\u7684\u4e00\u4e2a\u9898\u96c6</p>"},{"location":"ads/ads_part_2/#leftist-heaps","title":"Leftist Heaps","text":"<p>review: \u5806\u7684\u64cd\u4f5c\uff08\u4ee5\u6700\u5c0f\u5806\u4e3a\u4f8b\uff09</p> <ul> <li> <p>\u63d2\u5165 \u2014\u2014 \u63d2\u5230\u5b8c\u5168\u4e8c\u53c9\u6811\u6700\u540e\u7684\u4f4d\u7f6e\uff0c\u8ddf\u7236\u8282\u70b9\u6bd4\u8f83\uff0c\u6bd4\u7236\u8282\u70b9\u5c0f\u5219\u4ea4\u6362\uff0c\u76f4\u5230\u6bd4\u7236\u8282\u70b9\u5927\uff08\\(O(logn)\\)\uff09</p> </li> <li> <p>\u5220\u9664\uff08\u6700\u5c0f\u503c\uff09 \u2014\u2014 \u5220\u9664\u6839\uff0c\u5c06\u6700\u540e\u4f4d\u7f6e\u7684\u5143\u7d20\u63d0\u5230\u6839\u4e0a\uff0c\u518d\u4e0e\u4e24\u4e2a\u513f\u5b50\u6bd4\u8f83\uff0c\u628a\u6700\u5c0f\u7684\u513f\u5b50\u6362\u5230\u4e0a\u9762\uff0c\u76f4\u5230\u4e24\u4e2a\u513f\u5b50\u90fd\u6bd4\u5f53\u524d\u503c\u5927\uff08\\(O(logn)\\)\uff09</p> </li> <li> <p>\u5efa\u5806 \u2014\u2014 \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u4ece\u8fd9\u4e2a\u8282\u70b9\u5f00\u59cb\u4f9d\u6b21\u5411\u524d\uff08\u4ee5\u6570\u7ec4\u5f62\u5f0f\u5b58\u50a8\uff09\uff0c\u628a\u5c0f\u513f\u5b50\u63d0\u4e0a\u6765\uff08\\(O(n)\\)\uff09</p> </li> <li> <p>\u5408\u5e76 \u2014\u2014 \u590d\u6742\u5ea6\u76f8\u5f53\u4e8e\u91cd\u65b0\u5efa\u5806\uff08\\(O(n)\\)\uff0cn\u4e3a\u4e24\u4e2a\u5806size\u4e4b\u548c\uff09</p> </li> </ul> <p>\u5806\u6709\u5f88\u597d\u7684\u987a\u5e8f\u6027\u8d28\uff0c\u5408\u5e76\u64cd\u4f5c\u5e94\u80fd\u7b80\u5316</p> <p>\u5de6\u504f\u5806\uff08Leftist Heaps\uff09\u2014\u2014 \u4e00\u79cd\u4e0d\u5e73\u8861\u7684\u4e8c\u53c9\u6811\uff0c\u4e5f\u662f\u5806\uff08\u5373\u6839\u662f\u5b50\u6811\u4e2d\u6700\u5927/\u5c0f\u7684\u5143\u7d20\uff09\u3002\u5229\u7528\u7ed3\u6784\u7684\u4e0d\u5e73\u8861\uff0c\u52a0\u901f\u5806\u7684\u5408\u5e76</p>"},{"location":"ads/ads_part_2/#definition","title":"Definition","text":"<ul> <li> <p>\u6709\u4e24\u4e2a\u513f\u5b50\u7684\u8282\u70b9\u662f\u5185\u90e8\u8282\u70b9\uff0c\u5176\u4f59\u4e3a\u5916\u90e8\u8282\u70b9</p> </li> <li> <p>null path length, Npl(x): \u5230\u5916\u90e8\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6</p> </li> <li> <p>\u5b9a\u4e49Npl(null) = -1</p> </li> <li>\u4ece\u5b9a\u4e49\u53ef\u4ee5\u770b\u51fa $$ Npl(X) = min \\{ Npl(LeftChild) + 1 ,Npl(RightChild) + 1 , \\} $$</li> <li>\u5de6\u504f\u6811 \u2014\u2014 \u5373\u6240\u6709\u7684\u8282\u70b9\uff0c\u5de6\u513f\u5b50\u7684Npl\u5927\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u7684Npl </li> </ul> <p>Theorem: \u53f3\u8def\u5f84\u957f\u5ea6\u4e3a r \u7684\u5de6\u504f\u6811\uff0c\u81f3\u5c11\u6709 \\(2^r-1\\) \u4e2a\u8282\u70b9</p> <p>\uff08\u53f3\u8def\u5f84\u662f\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4e00\u76f4\u5f80\u53f3\u513f\u5b50\u904d\u5386\u7ecf\u8fc7\u7684\u6240\u6709\u8282\u70b9\uff08\u5373\u53f3\u513f\u5b50\u7684\u53f3\u513f\u5b50\u7684\u53f3\u513f\u5b50\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u6784\u6210\u7684\u8def\u5f84\uff09\uff0c\u8def\u5f84\u957f\u7b49\u4e8e\u7ecf\u8fc7\u7684\u8282\u70b9\u6570\uff09</p> <p>\u8fd0\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5</p> <p>r = 1 \u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u663e\u7136\u6210\u7acb</p> <p>r = k \u65f6\uff0c\u5047\u8bbe\u7ed3\u8bba\u6210\u7acb</p> <p>r =  k + 1 \u65f6\uff0c</p> <p>\u56e0\u4e3a\u5de6\u504f\u5806\u8981\u6c42\u5de6\u8fb9\u8282\u70b9\u7684 Npl \u5927\u4e8e\u7b49\u4e8e\u53f3\u8fb9\u8282\u70b9\uff0c\u90a3\u4e48\u53ea\u6709\u4e00\u76f4\u5f80\u53f3\uff0c\u624d\u80fd\u4ee5\u6700\u77ed\u8def\u5f84\u5230\u8fbe\u53f6\u5b50\u8282\u70b9\u3002\u6240\u4ee5\u6839\u8282\u70b9\u7684 Npl \u957f\u4e0e\u53f3\u8def\u5f84\u76f8\u5173\u3002</p> <p>\u56e0\u6b64 Npl(root) = k\uff0cNpl(RightChild) = k - 1\uff0c\u53f3\u5b50\u6811\u7684\u53f3\u8def\u5f84\u4e3a k\uff0c\u7531\u5047\u8bbe\uff0c\u53f3\u5b50\u6811\u81f3\u5c11\u6709\\(2^k-1\\)\u4e2a\u8282\u70b9</p> <p>\u56e0\u4e3a\u5de6\u513f\u5b50\u7684 Npl \u4e0d\u6bd4\u53f3\u513f\u5b50\u5c0f\uff0c\u6211\u4eec\u60f3\u6c42\u8282\u70b9\u6570\u7684\u4e0b\u754c\uff0c\u56e0\u6b64\u8bbe Npl(LeftChild) = k - 1</p> <p>\u540c\u7406\uff08\u6839\u8282\u70b9\u7684 Npl \u957f\u4e0e\u53f3\u8def\u5f84\u76f8\u5173\uff09\uff0c\u5de6\u5b50\u6811\u7684\u53f3\u8def\u5f84\u4e3ak\uff0c\u56e0\u6b64\u5de6\u5b50\u6811\u81f3\u5c11\u6709\\(2^k-1\\)\u4e2a\u8282\u70b9</p> <p>\u603b\u7684\u8282\u70b9\u6570 = \u5de6\u5b50\u6811 + \u53f3\u5b50\u6811 + \u6839 = \\(2^{k+1}-1\\)\uff0c\u5047\u8bbe\u6210\u7acb</p>"},{"location":"ads/ads_part_2/#implementation","title":"Implementation","text":"<p>\u4e24\u4e2a\u5806\u7684\u5408\u5e76</p> <pre><code>struct TreeNode\n{\n    ElementType     Element;\n    PriorityQueue   Left;\n    PriorityQueue   Right;\n    int             Npl;// \u7279\u522b\u7684\u5730\u65b9\n};\n</code></pre> <p>\u65b9\u6cd5\u4e00\uff1a\u9012\u5f52</p> <ol> <li> <p>Merge( H1-&gt;Right, H2 )</p> <p>\u5148\u5224\u65ad\u54ea\u4e2a\u5806\u9876\u7684\u5143\u7d20\u5c0f\uff0c\u518d\u628a\u5143\u7d20\u5927\u7684\u5806\u548c\u5c0f\u7684\u53f3\u513f\u5b50 Merge </p> </li> <li> <p>Attach( H2, H1-&gt;Right )</p> <p>\u5c06 Merge \u597d\u7684\u5806\u63a5\u5230\u539f\u6765\u7684\u53f3\u513f\u5b50\u4f4d\u7f6e\u4e0a\uff08\u9012\u5f52\u5047\u8bbe Merge \u540e\u7684\u5806\u5df2\u7ecf\u662f\u5de6\u504f\u5806\uff0c\u56e0\u6b64\u53ea\u6709\u6839\u53ef\u80fd\u4e0d\u7b26\u5408\u5de6\u504f\u5806\u7684\u5b9a\u4e49\uff09 </p> </li> <li> <p>Swap(H1-&gt;Right, H1-&gt;Left ) if necessary</p> <p>\u56e0\u6b64\u53ea\u8981\u67e5\u770b\u5de6\u513f\u5b50\u548c\u53f3\u4e8c\u5b50\u7684 Npl\uff0c\u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u4ea4\u6362\uff0c\u5373\u53ef\u4fdd\u8bc1\u7ed3\u679c\u662f\u5de6\u504f\u5806 </p> </li> </ol> <pre><code>PriorityQueue  Merge ( PriorityQueue H1, PriorityQueue H2 )\n{ \n    if ( H1 == NULL )   return H2;  \n    if ( H2 == NULL )   return H1;  \n    // \u627e\u5230\u5806\u9876\u5143\u7d20\u5c0f\u7684\u5806\n    if ( H1-&gt;Element &lt; H2-&gt;Element )  return Merge1( H1, H2 );\n    else return Merge1( H2, H1 );\n}\n\nstatic PriorityQueue\nMerge1( PriorityQueue H1, PriorityQueue H2 )\n{ \n    if ( H1-&gt;Left == NULL )     /* single node */\n        H1-&gt;Left = H2;  /* H1-&gt;Right is already NULL \n                    and H1-&gt;Npl is already 0 */\n    else {\n        H1-&gt;Right = Merge( H1-&gt;Right, H2 );     /* Step 1 &amp; 2 */\n        if ( H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl )\n            SwapChildren( H1 ); /* Step 3 */\n        H1-&gt;Npl = H1-&gt;Right-&gt;Npl + 1;/* \u66f4\u65b0 Npl */\n    } /* end else */\n    return H1;\n}\n</code></pre> \\[ T_p = O(log{N}) \\] <p>\u65b9\u6cd5\u4e8c\uff1a\u8fed\u4ee3                              </p> <ol> <li> <p>Sort the right paths without changing their left children</p> <p>\u7528\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u8bf4\u660e\uff1a\u5148\u770b 3 \u548c 6\uff0c\u5e94\u8be5\u5c06 6 \u63a5\u5230 3 \u7684\u4e0b\u9762\uff0c\u56e0\u6b64\u4fdd\u6301 3 \u7684\u5de6\u5b50\u6811\u4e0d\u53d8\uff0c\u628a 6 \u8ddf\u53f3\u5b50\u6811\u6bd4\u8f83\u3002</p> <p>\u53f3\u5b50\u6811\u4e2d\uff0c6 \u6bd4 8 \u5c0f\uff0c\u56e0\u6b64\u4fdd\u6301 6 \u7684\u5de6\u5b50\u6811\u4e0d\u53d8\uff0c\u628a 6 \u63a5\u5230 3 \u4e0a\uff0c\u518d\u6bd4\u8f83 6 \u7684\u53f3\u5b50\u6811\u548c 8\uff0c\u4ee5\u6b64\u7c7b\u63a8 ...... </p> </li> <li> <p>Swap children if necessary</p> <p>\u4ece\u4e0b\u5230\u4e0a\u56de\u6eaf\uff0c\u53d1\u73b0 7 \u548c 3 \u4e0d\u6ee1\u8db3\uff0c\u4ea4\u6362\u4ed6\u4eec\u7684\u5b69\u5b50\u3002\uff08\u6ce8\u610f\u66f4\u65b0 Npl\uff09 </p> </li> </ol> <pre><code>PriorityQueue  Merge ( PriorityQueue H1, PriorityQueue H2 )\n{ \n    if ( H1 == NULL )   return H2;  \n    if ( H2 == NULL )   return H1;  \n    PriorityQueue root;\n    // \u521d\u59cb\u5316\n    if(H1-&gt;Element &lt; H2-&gt;Element){\n        root = H1;\n        push(H1);\n        H1 = H1-&gt;Right;\n    }else{\n        root = H2;\n        push(H2);\n        H2 = H2-&gt;Right;\n    }\n\n    // \u8fed\u4ee3\u5730\u5c06\u5c0f\u7684\u5143\u7d20\u63d2\u5230\u5f53\u524d\u6839\u7684\u53f3\u8fb9\uff0c\u5e76\u6210\u4e3a\u65b0\u7684\u6839\n    While(H1 &amp;&amp; H2){\n        if(H1-&gt;Element &lt; H2-&gt;Element){\n            root -&gt; Right = H1; \n            root = root -&gt; Right;\n            push(H1);\n            H1 = H1-&gt;Right;\n        }else{\n            root -&gt; Right = H2; \n            root = root -&gt; Right;\n            push(H2);\n            H2 = H2-&gt;Right;\n        }\n    }\n\n    if(H1)  root -&gt; Right = H1; \n    if(H2)  root -&gt; Right = H2; \n\n    PriorityQueue temp;\n    // \u56de\u6eaf\uff0c\u5224\u65ad\u662f\u5426\u9700\u8981\u4ea4\u6362\u513f\u5b50\uff0c\u66f4\u65b0Npl\n    While(temp = pop()){\n        root = temp;\n        if(root-&gt;Left &amp;&amp; root-&gt;Right){\n            if(root-&gt;Left-&gt;Npl &lt; root-&gt;Right-&gt;Npl)  Swap(root);\n        root-&gt;Npl = root-&gt;Right-&gt;Npl + 1;\n        }else if(root-&gt;Right){\n            root-&gt;Left = root-&gt;Right;\n            root-&gt;Right = NULL;\n            root-&gt;Npl = 0;\n        }else   root-&gt;Npl = 0;\n    }\n    return root;\n}\n</code></pre> <p>delete min</p> <p>Step 1: Delete the root</p> <p>Step 2: Merge the two subtrees</p> \\[ T_p = O(log{N}) \\]"},{"location":"ads/ads_part_2/#skew-heaps","title":"Skew Heaps","text":"<p>\u5de6\u504f\u6811\u5408\u5e76\u65f6\u4e0d\u5224\u65ad Npl\uff0c\u76f4\u63a5\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\uff0c\u5c31\u662f\u659c\u5806\u3002\uff08\u9664\u53f3\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8282\u70b9\u4e0d\u4ea4\u6362\uff09</p> <p>\u53ef\u4ee5\u4fdd\u8bc1\u5747\u644a\u4ee3\u4ef7</p> <p>Example: insert 15</p> <p></p> <pre><code>// \u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u5199\u4ee3\u7801\n</code></pre> <ul> <li> <p>\u4f18\u70b9\uff1a\u4e0d\u7528\u5b58 Npl\uff0c\u4e0d\u7528\u5224\u65ad</p> </li> <li> <p>\u5f00\u653e\u6027\u95ee\u9898\uff1a\u5982\u4f55\u4fdd\u6301\u53f3\u8def\u5f84\u957f\u5ea6</p> </li> </ul> <p>\u5747\u644a\u5206\u6790\uff08\u52bf\u80fd\u6cd5\uff09</p> <ul> <li> <p>\u52bf\u80fd\u51fd\u6570\\(\\Phi(D_i)\\) = \u6574\u4e2a\u6811\u4e2d\u91cd\u8282\u70b9\u7684\u4e2a\u6570</p> </li> <li> <p>\u91cd\u8282\u70b9\uff1a\u53f3\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e25\u683c\u5927\u4e8e\u5de6\u5b50\u6811\u7684\u8282\u70b9</p> </li> <li> <p>\u53ea\u6709\u53f3\u8def\u5f84\u8282\u70b9\u7684\u8f7b\u91cd\u4f1a\u6539\u53d8\uff0c\u56e0\u6b64\u53ea\u4e0b\u9762\u53ea\u8ba1\u7b97\u53f3\u8def\u5f84\u7684\u52bf\u80fd\uff08\u5176\u4f59\u62b5\u6d88\uff09</p> </li> </ul> \\[ \\Phi(D_0) = h1 + h2 + h  \\] <ul> <li>\u64cd\u4f5c\u540e\uff0c\u91cd\u8282\u70b9\u4e00\u5b9a\u53d8\u8f7b\uff0c\u8f7b\u8282\u70b9\u4e0d\u4e00\u5b9a\u53d8\u91cd\uff0c\u4e3a\u6c42\u4e0a\u754c\uff0c\u5047\u8bbe\u8f7b\u8282\u70b9\u90fd\u53d8\u91cd\uff08\u52bf\u80fd\u51fd\u6570\u5c31\u4f1a\u53d8\u5927\uff0c\u5b58\u50a8\u66f4\u591a\u52bf\u80fd\uff09</li> </ul> <p>$$ \\Phi(D_N) \\leq l1 + l2 + h</p> <p>$$</p> \\[ T_{amortized} =  \\] <ul> <li>\u6700\u574f\u60c5\u51b5\uff1aMerge, Insert, DeleteMin \u90fd\u662f O(N)</li> <li>\u5747\u644a\u60c5\u51b5\uff1a\u90fd\u662f O(logN)</li> </ul>"},{"location":"ads/ads_part_2/#binomial-queue","title":"Binomial Queue","text":"<p>\u4e8c\u9879\u4f18\u5148\u961f\u5217</p> <ul> <li>\u5efa\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n)\\)\uff0c\u5747\u644a\\(O(1)\\)</li> <li>\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(logn)\\)</li> <li>\u56e0\u6b64\u6211\u4eec\u60f3\u4f18\u5316\u63d2\u5165</li> </ul>"},{"location":"ads/ads_part_2/#_1","title":"\u5b9a\u4e49","text":"<p>A binomial queue is not a heap-ordered tree, but rather a collection of heap-ordered trees, known as a forest.  Each heap-ordered tree is a binomial tree.</p> <ul> <li>A binomial tree of height 0 is a one-node tree.</li> <li>A binomial tree, \\(B_k\\), of height k is formed by attaching a binomial tree, \\(B_{k \u2013 1}\\), to the root of another binomial tree, \\(B_{k \u2013 1}\\).</li> </ul> <p></p> <p>\u89c2\u5bdf\u5f97\uff1a\\(B_k\\) consists of a root with k children, which are                        .  \\(B_k\\) has exactly       \\(2^k\\)     nodes.  The number of nodes at depth d is    \\(C_k^d\\)        .</p> <p>\u4efb\u4f55\u5927\u5c0f\uff08\u8282\u70b9\u6570\uff09\u7684\u4e8c\u9879\u961f\u5217\u53ef\u4ee5\u88ab\u4e8c\u9879\u6811\u552f\u4e00\u8868\u793a</p> <p>Example</p>"},{"location":"ads/ads_part_2/#_2","title":"\u64cd\u4f5c","text":"<ul> <li>FindMin: \u6bd4\u8f83\u6bcf\u4e2a\u6839\u8282\u70b9\u5927\u5c0f\uff0c\u627e\u5230\u6700\u5c0f\u7684\u3002\u8282\u70b9\u6570\u4e3aN\uff0c\u5219\u6700\u591a\u6709\\(\\lceil logN\\rceil\\)\u4e2a\u6811\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(logN)\\).<ul> <li>\u53ef\u4ee5\u8bb0\u5f55\u6700\u5c0f\u7684\u6839\uff0c\u5e76\u5728\u53d8\u66f4\u65f6\u66f4\u65b0\u3002\u8fd9\u65f6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(1)\\)\u3002</li> </ul> </li> <li>Merge: \u7c7b\u4f3c\u4e8e\u4e8c\u8fdb\u5236</li> </ul> <ul> <li>Insert: Merge\u7684\u7279\u6b8a\u60c5\u51b5\u2014\u2014Merge(\\(H, B_0\\))</li> <li>DeleteMin: <ul> <li>step 1: FindMin\u2014\u2014 (\\(O(logN)\\))</li> <li>step 2: \u5728\u4e8c\u9879\u961f\u5217\u4e2d\u5220\u9664\\(B_k\\)\uff0c\u5f97\u5230H' \u2014\u2014(\\(O(1)\\))</li> <li>step 3: \u5728\\(B_k\\)\u4e2d\u5220\u9664\u6839\uff0c\u5c06\u5176\u6240\u6709\u5b50\u6811\u4f5c\u4e3a\u65b0\u7684\u961f\u5217H''\u2014\u2014 (\\(O(logN)\\))</li> <li>step 4: Merge(H', H'') \u2014\u2014(\\(O(logN)\\))</li> </ul> </li> </ul>"},{"location":"ads/ads_part_2/#_3","title":"\u5b9e\u73b0","text":"<p>\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u2014\u2014\u8282\u7701\u7a7a\u95f4\uff0c\u4e0d\u7528\u8003\u8651\u968f\u673a\u8bbf\u95ee\u5b69\u5b50 <pre><code>typedef struct BinNode *Position;\ntypedef struct Collection *BinQueue;\ntypedef struct BinNode *BinTree;  /* missing from p.176 */\n\nstruct BinNode \n{ \n    ElementType     Element;\n    Position        LeftChild;\n    Position        NextSibling;\n} ;\n\nstruct Collection \n{ \n    int         CurrentSize;  /* total number of nodes */\n    BinTree TheTrees[ MaxTrees ];\n} ;\n</code></pre></p> <p>DeleteMin <pre><code>DeleteMin(BinQueue H)\n{\n    int min = FindMin(H);//min\u7684\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\n    BinTree OldRoot = H-&gt;TheTrees[min]; \n    H-&gt;TheTrees[min] = H-&gt;TheTrees[0];//\u6307\u5411\u54e8\u5175\n    BinQueue new_H = Malloc...\n    while(NextSibling){\n        //\u521b\u5efa\u65b0\u961f\u5217\n    }\n    free(OldRoot);\n    Merge(H, new_H);\n}\n</code></pre></p>"},{"location":"ads/ads_part_2/#_4","title":"\u5206\u6790","text":"<ul> <li>1/2\uff1a\u4e0d\u5408\u5e76</li> <li>1/4\uff1a\u5408\u5e76\u4e00\u6b21</li> <li>1/8\uff1a\u5408\u5e76\u4e24\u6b21</li> </ul> <p>\u52bf\u80fd\u6cd5\uff1a</p> <ul> <li>\\(\\Phi(i)\\) = i\u6b21\u63d2\u5165\u540e\u7684\u6811\u7684\u6570\u91cf</li> </ul>"},{"location":"ads/ads_part_3/","title":"\u9ad8\u7ea7\u6570\u636e\u4e0e\u7b97\u6cd5\u5206\u6790\u2014\u2014Part 3","text":""},{"location":"ads/ads_part_3/#backtracking","title":"Backtracking","text":"<p>\u89e3\u51b3\u95ee\u9898\u7684\u4e00\u822c\u601d\u60f3\uff1a\u751f\u6210\u4e00\u4e2a\u5019\u9009\u89e3\u7684 list\uff0c\u68c0\u67e5\u6240\u6709\u7684\u89e3\uff0c\u53bb\u9664\u4e0d\u7b26\u5408\u8981\u6c42\u7684\uff0c\u6765\u627e\u5230\u6700\u540e\u7684\u89e3</p> <p>\u56de\u6eaf\u6cd5\uff1a\u4e0d\u8981\u7684\u5206\u652f\u6254\u6389\uff08\u201c\u526a\u679d\u201d\uff09\uff0c\u907f\u514d\u5728\u4e0d\u9700\u8981\u7684\u5206\u652f\u4e0a\u6d6a\u8d39\u68c0\u67e5\u6240\u9700\u7684\u7b97\u529b</p> <ul> <li>\u57fa\u672c\u601d\u60f3\uff1asuppose we have a partial solution ( x1, ... , xi ), than we add  xi+1 and check if ( x1, ... , xi, xi+1 ) satisfies the constrains.  If the answer is \u201cyes\u201d we continue to add the next x, else we delete xi and backtrack to the previous partial solution ( x1, ... , xi ).</li> </ul> <p>Eight Queens: \u5728 8*8 \u7684\u68cb\u76d8\u653e 8 \u4e2a\u7687\u540e\uff0c\u6ca1\u6709\u4e24\u4e2a\u7687\u540e\u5728\u540c\u4e00\u884c/\u5217/\u5bf9\u89d2\u7ebf\u4e0a\uff08\u653e\u5165\u4e00\u4e2a\u7687\u540e\u540e\uff0c\u516b\u4e2a\u65b9\u5411\u90fd\u88ab ban\uff09</p> <p></p> <ul> <li> <p>\u89e3\u7684\u8868\u793a\u65b9\u6cd5\uff08xi \u8868\u793a\u7b2c i \u884c\u7684\u7687\u540e\u5728\u7b2c\u51e0\u5217\uff09\uff1a $$ Solution = ( x1, x2, ... , x8 ) = ( 4, 6, 8, 2, 7, 1, 3, 5 ) $$</p> </li> <li> <p>\u89e3\u7a7a\u95f4\u5927\u5c0f\uff1a\\(n!\\)\uff08n\u7687\u540e\uff09</p> </li> </ul> <p>\u5148\u8003\u8651\u56db\u7687\u540e\u7684\u7b80\u5355\u7248\u672c\uff0c\u5efa\u7acb\u4e00\u4e2a game tree\uff08\u5e2e\u52a9\u7406\u89e3\uff0c\u5b9e\u9645\u5e76\u4e0d\u5efa\u6811\uff09\uff1a</p> <p></p> <p>\u6bcf\u4e2a\u6839\u5230\u53f6\u5b50\u7684\u8def\u5f84\u4ee3\u8868\u4e00\u4e2a\u89e3\uff0c\u63a5\u4e0b\u6765\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u9ed1\u8272\u662f\u68c0\u67e5\u540e\u53d1\u73b0\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u8282\u70b9\uff0c\u7eff\u8272\u662f\u627e\u5230\u7684\u89e3\u3002</p> <p></p> <p>\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u627e\u5230\u4e86\u7b2c\u4e00\u4e2a\u89e3 ( 2, 4, 1, 3 )</p> <ul> <li> <p>\u7a77\u4e3e\uff1a\u4e00\u76f4\u8d70\u5230\u6811\u7684\u6700\u6df1\u5904</p> </li> <li> <p>\u56de\u6eaf\uff1a\u5728\u4e00\u534a\u53d1\u73b0\u4e0d\u884c\u65f6\u56de\u53bb</p> </li> </ul> <p>Turnpike Reconstruction</p> <p>\u6709 N \u4e2a\u52a0\u6cb9\u7ad9\uff0c\u7ed9\u5b9a\u6240\u6709\u52a0\u6cb9\u7ad9\u4e24\u4e24\u95f4\u7684\u8ddd\u79bb\uff08N(N-1)/2 \u4e2a\uff09\uff0c\u6c42\u89e3\u52a0\u6cb9\u7ad9\u5750\u6807\uff08\u6700\u5de6\u8fb9\u7684\u662f 0\uff09</p> <p>Example: Given D = {1,2,2,2,3,3,3,4,5,5,5,6,7,8,10}</p> <p>Step 1: N(N-1)/2 = 15 implies N = 6</p> <p>Step 2: \u56e0\u4e3a\u7b2c\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u5750\u6807\u4e3a 0\uff0c\u56e0\u6b64\u79bb\u4ed6\u6700\u8fdc\u7684\u52a0\u6cb9\u7ad9\u5750\u6807\u4e3a 10. \u5176\u4f59\u52a0\u6cb9\u7ad9\u90fd\u5728\u4e8c\u8005\u4e4b\u95f4</p> <p>Step 3: \u627e\u5230\u7b2c\u4e8c\u5927\u7684\u8ddd\u79bb 8\uff0c\u5047\u8bbe\u5b83\u4e0e\u7b2c\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u7684\u8ddd\u79bb\u662f\u8fd9\u4e48\u5927\uff0c\u5e76\u5728\u96c6\u5408\u4e2d\u6392\u9664 2\uff08\u6b64\u65f6\u5b83\u4e0e\u6700\u540e\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u7684\u8ddd\u79bb\u5c31\u662f 2\uff09</p> <p>Step 4: \u627e\u5230\u7b2c\u4e09\u5927\u7684\u8ddd\u79bb 7\uff0c\u5047\u8bbe\u5b83\u4e0e\u7b2c\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u7684\u8ddd\u79bb\u662f 7\uff0c\u5982\u679c\u53ef\u884c\u518d\u53bb\u679a\u4e3e\u7b2c\u56db\u5927\u7684\u8ddd\u79bb\uff0c\u4e0d\u53ef\u884c\u5219\u8ba4\u4e3a\u5b83\u4e0e\u6700\u540e\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u7684\u8ddd\u79bb\u662f 7\uff0c\u90fd\u4e0d\u884c\u7684\u8bdd\u56de\u6eaf\u5230 Step 3\uff0c\u5047\u8bbe\u5b83\u4e0e\u6700\u540e\u52a0\u6cb9\u7ad9\u7684\u8ddd\u79bb\u662f 8</p> <p>\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7</p> <p>\u641c\u7d22\u6811\u5982\u4e0b\uff1a</p> <p></p> <p>\u6700\u7ec8\u7684\u89e3\uff08\u76f8\u5e94\u4f4d\u7f6e\u7684\u5750\u6807\uff09\uff1a</p> <p>( 0, 3, 5, 6, 8, 10 )</p> \u52a0\u6cb9\u7ad9\u95ee\u9898\u7684\u4ee3\u7801<pre><code>bool Reconstruct ( DistType X[ ], DistSet D, int N, int left, int right )\n{ /* X[1]...X[left-1] and X[right+1]...X[N] are solved */\n    bool Found = false;\n    if ( Is_Empty( D ) )\n        return true; /* solved */\n    D_max = Find_Max( D );\n    /* option 1\uff1aX[right] = D_max */\n    /* check if |D_max-X[i]|\u5c5e\u4e8eD is true for all X[i]\u2019s that have been solved */\n    // \u76f8\u5f53\u4e8e\u628a\u65b0\u7684\u52a0\u6cb9\u7ad9\u653e\u5728\u5750\u6807\u4e3a D_max \u7684\u4f4d\u7f6e\n    OK = Check( D_max, N, left, right ); /* pruning */\n    if ( OK ) { /* add X[right] and update D */\n        X[right] = D_max;\n        for ( i=1; i&lt;left; i++ )  Delete( |X[right]-X[i]|, D);\n        for ( i=right+1; i&lt;=N; i++ )  Delete( |X[right]-X[i]|, D);\n        Found = Reconstruct ( X, D, N, left, right-1 );\n        if ( !Found ) { /* if does not work, undo */\n            for ( i=1; i&lt;left; i++ )  Insert( |X[right]-X[i]|, D);\n            for ( i=right+1; i&lt;=N; i++ )  Insert( |X[right]-X[i]|, D);\n        }\n    }\n    /* finish checking option 1 */\n    if ( !Found ) { /* if option 1 does not work */\n        /* option 2: X[left] = X[N]-D_max */\n        OK = Check( X[N]-D_max, N, left, right );\n        if ( OK ) {\n            X[left] = X[N] \u2013 D_max;\n            for ( i=1; i&lt;left; i++ )  Delete( |X[left]-X[i]|, D);\n            for ( i=right+1; i&lt;=N; i++ )  Delete( |X[left]-X[i]|, D);\n            Found = Reconstruct (X, D, N, left+1, right );\n            if ( !Found ) {\n                for ( i=1; i&lt;left; i++ ) Insert( |X[left]-X[i]|, D);\n                for ( i=right+1; i&lt;=N; i++ ) Insert( |X[left]-X[i]|, D);\n            }\n        }\n        /* finish checking option 2 */\n    } /* finish checking all the options */\n\n    return Found;\n}\n</code></pre>"},{"location":"ads/ads_part_3/#_1","title":"\u56de\u6eaf\u6cd5\u7684\u4ee3\u7801\u6a21\u677f","text":"\u56de\u6eaf\u6cd5\u7684\u6a21\u677f<pre><code>bool Backtracking ( int i )\n{   Found = false;\n    if ( i &gt; N )\n        return true; /* solved with (x1, \u2026, xN) */\n    for ( each xi \u5c5e\u4e8e Si ) { \n        /* check if satisfies the restriction R */\n        OK = Check((x1, \u2026, xi) , R ); /* pruning */\n        if ( OK ) {\n            Count xi in;\n            Found = Backtracking( i+1 );\n            if ( !Found )\n                Undo( i ); /* recover to (x1, \u2026, xi-1) */\n        }\n        if ( Found ) break; \n    }\n    return Found;\n}\n</code></pre> <p>\u66f4\u63a8\u8350\u4e0a\u9762\u7684\u641c\u7d22\u6811\uff0c\u53ef\u4ee5\u526a\u6389\u5f88\u5927\u89c4\u6a21\u7684\u5b50\u96c6</p> <p></p> <p>Stick Problem</p> <p>AlphaGo</p> <p>Tic-tac-toe</p> <p>19,683 possible board layouts (39 since each of the nine spaces can be X, O or blank), and </p> <p>362,880 (i.e., 9!) possible games (different sequences for placing the Xs and Os on the board)</p>"},{"location":"ads/ads_part_3/#minimax-strategy","title":"Minimax Strategy","text":"<p>Use an evaluation function to quantify the \"goodness\" of a position.  For example: $$ f(P)=W_{Computer}-W_{Human} $$</p> <p>where W is the number of potential wins at position P</p> <p>\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u7ea2\u5708\u662f\u4eba\uff0c\u6709 4 \u79cd\u53ef\u80fd\u7684\u8d62\u6cd5</p> <ol> <li>\u4e0a\u9762\u4e00\u6a2a</li> <li>\u5de6\u8fb9\u4e00\u7ad6</li> <li>\u53f3\u8fb9\u4e00\u7ad6</li> <li>\u4e0b\u8fb9\u4e00\u6a2a</li> </ol> <p>\u540c\u7406\uff0c\u84dd\u53c9\u662f\u7535\u8111\uff0c\u6709 6 \u79cd\u53ef\u80fd\u7684\u8d62\u6cd5 </p> <p>The human is trying to minimize the value of the position P, while the computer is trying to maximize it. - Minimax Strategy</p> <p></p> <p>\u526a\u679d\u65b9\u6cd5\uff1a</p> <ul> <li> <p>\u03b1 pruning     </p> </li> <li> <p>\u03b2 pruning</p> <p></p> </li> </ul> <p>limits the searching to only  \\(O(\\sqrt{N})\\) nodes, where N is the size of the full game tree.</p> <p>\u6ce8\uff1a\u56de\u6eaf\u7684\u6548\u7387\u8ddfS\u7684\u89c4\u6a21\u3001\u7ea6\u675f\u51fd\u6570\u7684\u590d\u6742\u6027\u3001\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\u7684\u7ed3\u70b9\u6570\u76f8\u5173\u3002\u7ea6\u675f\u51fd\u6570\u51b3\u5b9a\u4e86\u526a\u679d\u7684\u6548\u7387\uff0c\u4f46\u662f\u5982\u679c\u51fd\u6570\u672c\u8eab\u592a\u590d\u6742\u4e5f\u672a\u5fc5\u5408\u7b97\u3002\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\u7684\u7ed3\u70b9\u6570\u6700\u96be\u4f30\u8ba1\uff0c\u4f7f\u5f97\u590d\u6742\u5ea6\u5206\u6790\u5f88\u96be\u5b8c\u6210\u3002</p>"},{"location":"ads/ads_part_3/#divide-and-conquer","title":"Divide and Conquer","text":"<p>\u5c06\u89c4\u6a21\u4e3a N \u7684\u5927\u95ee\u9898\u5206\u6210 a \u4e2a\u89c4\u6a21\u4e3a N/b \u7684\u5b50\u95ee\u9898\uff0c\u5b50\u95ee\u9898\u901a\u8fc7\u518d\u6b21\u5206\u5272\u9012\u5f52\u89e3\u51b3\uff0cMerge \u9700\u8981\u6d88\u8017 \\(f(N)\\) \u7684\u8d44\u6e90\uff0c\u56e0\u6b64 $$ T(N)=aT(N/b)+f(N) $$</p> <p>\u5178\u578b\u95ee\u9898\uff1a</p> <p>\u6700\u5927\u5b50\u5e8f\u5217\u95ee\u9898</p> <p>\u5206\u4e3a\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206\uff0c\u5408\u5e76\u65f6\u8003\u8651\u5de6\u53f3\u8d2f\u901a\u60c5\u51b5\uff0c\u56e0\u6b64 a = 2\uff0cb = 2\uff0cf(N) = O(N)</p> <ul> <li>f(N) \u7684\u5f97\u5230\uff1a\u4e00\u79cd\u6709\u6548\u7684\u65b9\u6cd5\u662f\u4ece\u4e2d\u95f4\u70b9\u5f00\u59cb\uff0c\u5411\u5de6\u53f3\u4e24\u4fa7\u5206\u522b\u627e\u5230\u6700\u5927\u5e8f\u5217\u548c\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u76f8\u52a0\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u590d\u6742\u5ea6\u662f O(n)\uff0c\u5176\u4e2d n \u662f\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</li> </ul> <p>\u53ef\u4ee5\u63a8\u51fa \\(T(N) = O(NlogN)\\)\uff08\u63a8\u5bfc\u5728\u540e\u9762\uff09</p> <p>\u6811\u7684\u904d\u5386</p> <p>\u5f52\u5e76\u6392\u5e8f </p>"},{"location":"ads/ads_part_3/#closest-points-problem","title":"Closest Points Problem","text":"<p>\u7ed9\u51fa\u5e73\u9762\u4e0a N \u4e2a\u70b9\u7684\u5750\u6807\uff0c\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb</p> <p>\u679a\u4e3e\u6cd5\uff1a\u68c0\u67e5 \\(N(N-1)/2\\) \u4e2a\u70b9\u5bf9\uff0c\\(T=O(N^2)\\)</p> <p>\u5206\u6cbb\u6cd5\uff1a\u5c06\u5e73\u9762\u5206\u6210\u5de6\u53f3\u4e24\u5757\uff0c\u8ba1\u7b97\u5de6\u53f3\u4e24\u8fb9\u5185\u90e8\u7684\u6700\u5c0f\u8ddd\u79bb\uff0c\u518d\u8ba1\u7b97\u6a2a\u8de8\u4e24\u5757\u7684\u6700\u77ed\u8ddd\u79bb</p> <p> </p> <ul> <li>\u7531\u4e0a\u9762\u7684\u63a8\u5bfc\u77e5\uff1a\u5408\u5e76\u51fd\u6570\u7684\u590d\u6742\u5ea6 matter</li> <li> <p>\u6a2a\u8de8\u4e24\u5757\u7684\u6700\u77ed\u8ddd\u79bb\u5982\u4f55\u8ba1\u7b97\u5f88\u91cd\u8981</p> <ul> <li>\u5df2\u7ecf\u77e5\u9053\u4e86\u5de6\u53f3\u4e24\u8fb9\u7684\u6700\u5c0f\u8ddd\u79bb \\(\\delta\\)\uff0c\u6c34\u5e73\u65b9\u5411\u4e0a\uff0c\u53ea\u6709\u4e24\u4e2a\u70b9\u5728 \\([-\\delta,\\delta]\\) \u4e4b\u95f4\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u624d\u80fd\u66f4\u5c0f</li> <li>\u6839\u636e\u5de6\u53f3\u4e24\u8fb9\u7684\u6700\u5c0f\u8ddd\u79bb\uff0c\u7ef4\u62a4\u6a2a\u8de8\u5de6\u53f3\u7684\u5c0f\u65b9\u5757\uff0c\u5728\u5176\u4e2d\u8ba1\u7b97\u6700\u77ed\u8ddd\u79bb\uff08\u81ea\u4e0a\u800c\u4e0b\u904d\u5386\uff09</li> <li>\u4f8b\u5982\u4e0b\u56fe\uff0c\u9009\u5b9a\u6700\u4e0a\u65b9\u7684\u4e00\u4e2a\u70b9\uff0c\u6784\u9020\u4e0b\u9762\u8fd9\u6837\u7684\u533a\u57df\uff08\u63a5\u4e0b\u6765\u9009\u62e9\u7eb5\u5750\u6807\u7b2c\u4e8c\u5927\u7684\u70b9\uff0c\u6784\u9020\u5c0f\u65b9\u5757</li> </ul> </li> </ul> <p>\u6700\u591a\u70b9\u7684\u60c5\u51b5\uff1a</p> <p></p> <pre><code>/* points are all in the strip */\n/* and sorted by y coordinates */\nfor ( i = 0; i &lt; NumPointsInStrip; i++ )\n    for ( j = i + 1; j &lt; NumPointsInStrip; j++ ) \n        if ( Dist_y( Pi , Pj ) &gt; delta )\n    break;\n        else  if ( Dist( Pi , Pj ) &lt; delta )\n     delta = Dist( Pi , Pj );\n</code></pre>"},{"location":"ads/ads_part_3/#_2","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ol> <li> <p>Substitution method \u2014\u2014 guess, then prove by induction</p> <p>\\(T(N) = 2T(\\lfloor N/2 \\rfloor)+N\\)</p> <p>Proof: \u5047\u8bbe\u5bf9\u6240\u6709 M &lt; N\uff0c\u590d\u6742\u5ea6\u662f \\(O(NlogN)\\)\uff0c\u7279\u522b\u5730\uff0c\u5bf9 M = \\(\\lfloor N/2 \\rfloor\\)\uff0c\u6709 \\(T(\\lfloor N/2 \\rfloor) \\leq c \\lfloor N/2 \\rfloor log\\lfloor N/2 \\rfloor\\)</p> \\[ T(N)= 2T(\\lfloor N/2 \\rfloor)+N\\leq c \\lfloor N/2 \\rfloor log\\lfloor N/2 \\rfloor+N \\] \\[ \\leq c N (log N \u2013 log 2) + N \\leq c N log N \\ \\ \\ for\\ c\\geq 1 \\] <p>\u5982\u679c\u5047\u8bbeO(N): \u5f52\u7eb3\u6cd5\u5f97\u5230\u7684\u754c\u4e0d\u4e25\u683c\uff0c\u5047\u8bbe\u4e0d\u6210\u7acb\uff0c\u5fc5\u987b\u4e25\u683c\u5c0f\u4e8e cN</p> </li> <li> <p>Recursion-tree method</p> <p>\\(T(N) = 3T(N/4)+\\Theta(N^2)\\)</p> <p> \u6ce8\uff1a     </p> <p>\\(T(N) = T(N/3)+T(2N/3)+cN\\)</p> <p></p> </li> <li> <p>Master method</p> <p>\u4e00\u5171\u6709\u4e09\u79cd\u5f62\u5f0f\uff0c\u4f9d\u6258\u4e8e\u53f6\u5b50\u91cd\u8981\u8fd8\u662f\u6839\u91cd\u8981</p> <p>\u7b2c\u4e00\u79cd\uff1a\u3010Master Theorem\u3011</p> <p>Let a ?= 1 and b &gt; 1 be constants, let f(N) be a function, and let T(N) be defined on the nonnegative integers by the recurrence  T(N) = aT(N/b) + f(N).  Then:</p> <p></p> <p>\u7531\u4e0a\u9762\u7684\u53cd\u4f8b\u77e5\uff1a\u4e3b\u65b9\u6cd5\u4ec5\u9002\u7528\u4e8e\u591a\u9879\u5f0f\u5927\u4e8e/\u5c0f\u4e8e\u7684\u60c5\u51b5</p> <p>\u4e3b\u65b9\u6cd5\u7684\u8bc1\u660e\uff1a   \u7b2c\u4e8c\u79cd  \u7b2c\u4e09\u79cd </p> </li> </ol> <p>\u5206\u6cbb\u6cd5\u9898\u96c6</p>"},{"location":"ads/ads_part_3/#dynamic-programming","title":"Dynamic Programming","text":"<p>\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u9012\u5f52\u7b97\u6cd5\uff1a $$ F(N) = F(N \u2013 1) + F(N \u2013 2)  $$ \u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\uff08T(N)&gt;=F(N)\uff09</p> <p>\u9012\u5f52\u6811\uff1a </p> <ul> <li> <p>\u95ee\u9898\uff1a\u4f9d\u8d56\u592a\u591a</p> </li> <li> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a\u628a\u6700\u8fd1\u7684\u4e24\u4e2a\u7ed3\u679c\u8bb0\u5f55\u4e0b\u6765\uff0c\u9700\u8981\u7684\u65f6\u5019\u67e5\u8868</p> </li> </ul> <p>\u4ee3\u7801\uff1a <pre><code>int  Fibonacci ( int N ) \n{   int  i, Last, NextToLast, Answer; \n    if ( N &lt;= 1 )  return  1; \n    Last = NextToLast = 1;    /* F(0) = F(1) = 1 */\n    for ( i = 2; i &lt;= N; i++ ) { \n        Answer = Last + NextToLast;   /* F(i) = F(i-1) + F(i-2) */\n        NextToLast = Last; Last = Answer;  /* update F(i-1) and F(i-2) */\n    }  /* end-for */\n    return  Answer; \n}\n</code></pre></p> <ul> <li>O(N) \u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ul> <p>\u91cd\u8981\u6982\u5ff5\uff1a</p> <ul> <li> <p>\u72b6\u6001\uff1a\u65b9\u7a0b\u4e2d\u7684\u53c2\u6570\uff0c\u73b0\u5728\u5728\u89e3\u51b3\u4e00\u4e2a\u4ec0\u4e48\u95ee\u9898</p> </li> <li> <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u73b0\u5728\u7684\u72b6\u6001\u53ef\u4ee5\u8f6c\u6362\u6210\u4ec0\u4e48\u6837\u7684\u5b50\u95ee\u9898\u6765\u89e3\u51b3</p> </li> </ul> <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7684\u4e24\u4e2a\u6027\u8d28\uff1a</p> <ol> <li> <p>\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u5f53\u524d\u95ee\u9898\u7684\u6700\u4f18\u89e3\u4f9d\u8d56\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3</p> </li> <li> <p>\u91cd\u53e0\u5b50\u95ee\u9898\uff1a\u5b50\u95ee\u9898\u7684\u89e3\u53ef\u80fd\u4f1a\u88ab\u91cd\u590d\u8ba1\u7b97\u591a\u6b21</p> </li> </ol> <p>\u53d1\u73b0\uff1a\u77e9\u9635\u4e58\u6cd5\u7684\u987a\u5e8f matter</p> <p>\u95ee N \u4e2a\u77e9\u9635\u76f8\u4e58\uff0c\u4ec0\u4e48\u65f6\u5019\u4ee3\u4ef7\u6700\u5c0f</p> <p>\uff08\u77e9\u9635\u76f8\u4e58\u7684\u4ee3\u4ef7 \\(M_{a\\times b} \\times M_{b\\times c}\\) \u7684\u4ee3\u4ef7\u662f \\(a\\times b\\times c\\)\uff09</p> <p>\u4ee3\u4ef7\u8ba1\u7b97\uff1a\u5c06\u95ee\u9898\u5206\u89e3\u6210\u4e24\u4e2a\u5b50\u95ee\u9898\uff08\u6700\u540e\u4e00\u6b65\u7684\u64cd\u4f5c\uff09</p> <ul> <li>\u5de6\u8fb9\u7684 M \u4e2a\u77e9\u9635\u76f8\u4e58\u7684\u7ed3\u679c\u4e58\u53f3\u8fb9 N - M \u4e2a\u77e9\u9635</li> <li>\\(b_n = \\sum_{i=1}^{n-1}b_ib_{n-i}\\) (\\(b_n\\) - n \u4e2a\u77e9\u9635\u76f8\u4e58\u6709\u51e0\u79cd\u7ec4\u5408\u65b9\u5f0f)</li> <li>\\(m_{ij}\\) - \u7b2c i \u4e2a\u77e9\u9635\u4e58\u5230\u7b2c j \u4e2a\u77e9\u9635\u7684\u6700\u5c0f\u4ee3\u4ef7 </li> </ul> <p>\u672c\u95ee\u9898\u4e2d\u7684\u72b6\u6001\uff1a\\(m_{ij}\\) - \u8ba1\u7b97\u4ece i \u5230 j \u7684\u4ee3\u4ef7</p> <p>\u56e0\u6b64\u72b6\u6001\u89c4\u6a21\u4e3a \\(O(n^2)\\) \uff08i\u3001j \u4e24\u4e24\u7ec4\u5408\uff09</p> <p>\u53e6\u4e00\u79cd\u5199\u6cd5\uff08\u89c4\u6a21\u4ece\u5c0f\u5230\u5927\uff0c\u4e0d\u6613\u51fa\u9519\uff09</p> <p>$$ F[N][i] = min{F[N-k][i] + F[k][i-k]+...} $$ \\(F[N][i]\\) - \u8ba1\u7b97\u4ece\u4ee5 i \u4e3a\u7ec8\u70b9\uff0c\u5927\u5c0f\u4e3a N \u7684\u95ee\u9898</p> implementation code<pre><code>/* r contains number of columns for each of the N matrices */ \n/* r[ 0 ] is the number of rows in matrix 1 */ \n/* Minimum number of multiplications is left in M[ 1 ][ N ] */ \nvoid OptMatrix( const long r[ ], int N, TwoDimArray M ) \n{   int  i, j, k, L; \n    long  ThisM; \n    for( i = 1; i &lt;= N; i++ )   M[ i ][ i ] = 0; \n    for( k = 1; k &lt; N; k++ ) /* k = j - i */ \n        for( i = 1; i &lt;= N - k; i++ ) { /* For each position */ \n    j = i + k;    M[ i ][ j ] = Infinity; \n    for( L = i; L &lt; j; L++ ) { \n        ThisM = M[ i ][ L ] + M[ L + 1 ][ j ] \n            + r[ i - 1 ] * r[ L ] * r[ j ]; \n        if ( ThisM &lt; M[ i ][ j ] )  /* Update min */ \n        M[ i ][ j ] = ThisM; \n    }  /* end for-L */\n        }  /* end for-Left */\n}\n</code></pre> <p>OBST\uff1a\u628a\u641c\u7d22\u6982\u7387\u9ad8\u7684\u70b9\u653e\u5728\u6811\u9760\u8fd1\u6839\u90e8\u7684\u4f4d\u7f6e\u66f4\u597d\uff0c\u5982\u4f55\u627e\u5230\u6700\u4f18\u89e3\uff1f</p> <p>\\(T(N)=\\sum_{i=1}^{N}p_i\u00b7(1+d_i)\\)</p> <p>\u672c\u95ee\u9898\u7684\u51e0\u4e2a\u5b9a\u4e49\uff1a</p> <ul> <li>\\(T_{ij}\\) - \u7b2c i \u4e2a\u5143\u7d20\u5230\u7b2c j \u4e2a\u5143\u7d20\u7ec4\u6210\u7684\u6811</li> <li>\\(c_{ij}\\) - \\(T_{ij}\\) \u7684 cost (\\(c_{ii}=0\\))</li> <li>\\(r_{ij}\\) - \\(T_{ij}\\) \u7684\u6839</li> <li>\\(w_{ij}\\) - \\(T_{ij}\\) \u7684\u6743\u91cd = \\(\\sum_{k=i}^{j}p_k\\)</li> </ul> <p></p> <p>All-Pairs Shortest Path</p> <p>\u65b9\u6cd5 1\uff1a\u7528 |V| \u6b21\u6700\u77ed\u8def\u5f84\u7b97\u6cd5 \\(O(N^3)\\)</p> <p>\u65b9\u6cd5 2\uff1a</p> <p>\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5</p> <p>\u601d\u8def\uff1a\u4ece A \u5230 B \u6709\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\u96c6\u5408\uff0c\u4e0d\u65ad\u6dfb\u52a0\u4e2d\u95f4\u7684\u201c\u8df3\u677f\u201d\u8282\u70b9\uff0c\u5219\u65b0\u7684\u6700\u77ed\u8def\u5f84 = min{\u539f\u6765\u7684\u6700\u77ed\u8def\u5f84\uff08\u5df2\u7ecf\u7b97\u51fa\uff09\uff0c\u7528\u8df3\u677f\u7684\u6700\u77ed\u8def\u5f84}\uff0c\u5e76\u628a\u8df3\u677f\u66f4\u65b0\u5230\u96c6\u5408\u91cc</p> <p>\u5b9a\u4e49\uff1a</p> <ul> <li>\\(D^k[ i ] [ j ] = min{\\ length\\ of\\ path\\ i \\rightarrow \\{ l \\leq k \\} \\rightarrow j }\\)</li> <li>\\(D^{-1}[ i ] [ j ] = Cost [ i ] [ j ]\\).   Then the length of the shortest path from i to j  is \\(D^{N-1}[ i ] [ j ]\\)</li> </ul> <p>\u7b97\u6cd5\uff1a\u4ece \\(D^{-1}[ i ] [ j ]\\) \u751f\u6210 \\(D^0\\), \\(D^1\\)...</p> <p>\u5df2\u7ecf\u751f\u6210 \\(D^{k-1}\\) \u540e </p> code<pre><code>/* A[ ] contains the adjacency matrix with A[ i ][ i ] = 0 */ \n/* D[ ] contains the values of the shortest path */ \n/* N is the number of vertices */ \n/* A negative cycle exists iff D[ i ][ i ] &lt; 0 */ \nvoid AllPairs( TwoDimArray A, TwoDimArray D, int N ) \n{   int  i, j, k; \n    for ( i = 0; i &lt; N; i++ )  /* Initialize D */ \n         for( j = 0; j &lt; N; j++ )\n     D[ i ][ j ] = A[ i ][ j ]; \n    for( k = 0; k &lt; N; k++ )  /* add one vertex k into the path */\n         for( i = 0; i &lt; N; i++ ) \n     for( j = 0; j &lt; N; j++ ) \n        if( D[ i ][ k ] + D[ k ][ j ] &lt; D[ i ][ j ] ) \n        /* Update shortest path */ \n         D[ i ][ j ] = D[ i ][ k ] + D[ k ][ j ]; \n}\n</code></pre> <ul> <li>\u590d\u6742\u5ea6 - \\(O(N3)\\), but faster in a dense graph.</li> <li>\u8d1f\u8fb9\u6709\u6548\uff08\u6ca1\u6709\u8d1f\u7684\u73af\uff09</li> <li>\u987a\u5e8f\u65e0\u5173</li> </ul>"},{"location":"ads/ads_part_3/#greedy-algorithms","title":"Greedy Algorithms","text":"<p>\u6d3b\u52a8\u5b89\u6392\u95ee\u9898</p> <p>\u52a8\u6001\u89c4\u5212\u89e3\u6cd5\uff1a</p> <ul> <li>\\(c_{ij}\\) - \u5728\u7b2c i \u4e2a\u6d3b\u52a8\u7ed3\u675f\u540e\uff0c\u7b2c j \u4e2a\u6d3b\u52a8\u5f00\u59cb\u524d\uff0c\u53ef\u4ee5\u9009\u62e9\u7684\u6d3b\u52a8\u6570</li> </ul> \\[ \u8fd9\u662f\u4e00\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \\] <ul> <li>\u5b9e\u9645\u5b9e\u73b0\u65f6\uff0c\u5c06 \\(c_{ij}\\) \u5b58\u8d77\u6765\uff0c\u5e76\u8bb0\u5f55\u662f\u5426\u8bbf\u95ee\u8fc7</li> </ul> <p>\u8d2a\u5fc3\u7b56\u7565\uff1a\u9009\u62e9\u4e0d\u91cd\u5408\u3001\u7ed3\u675f\u6700\u65e9\u7684\u7ebf\u6bb5</p> <p>\u6b63\u786e\u6027\u8bc1\u660e\uff1a</p> <ul> <li>\u8d2a\u5fc3\u9009\u51fa\u6765\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u66ff\u4ee3\u6700\u4f18\u89e3\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20</li> <li>\u6700\u4f18\u5b50\u7ed3\u6784</li> </ul> <p>\u4e00\u7ef4\u52a8\u6001\u89c4\u5212</p> \\[ c_{1,j} =  \\begin{cases} 0&amp; \\text{x=0}\\\\ 1&amp; \\text{x!=0} \\end{cases} \\] <ul> <li> <p>\u6700\u540e\u4e00\u4e2a\u9009 - \u8f6c\u79fb\u6210\u9009\u524d\u9762\u7684</p> </li> <li> <p>\u6700\u540e\u4e00\u4e2a\u4e0d\u9009 - \u8f6c\u79fb\u6210\u9009\u5012\u6570\u7b2c\u4e8c\u4e2a</p> </li> </ul> <p>Huffman Codes - for file compression</p> <p>\u5982\u679c\u53ea\u6709\u56db\u4e2a\u5b57\u7b26\u51fa\u73b0\u2014\u2014\u7f16\u7801\u6210\u4e24\u4e2a bit</p> <p>\u970d\u592b\u66fc\u7f16\u7801\u2014\u2014\u7528\u77ed\u7684 01 \u4e32\u8868\u793a\u51fa\u73b0\u9891\u7387\u9ad8\u7684\u5b57\u7b26</p> <p>\u7528\u6811\u8868\u793a</p> <p>\u907f\u514d\u67d0\u4e2a\u5b57\u7b26\u7684\u7f16\u7801\u662f\u53e6\u4e00\u4e2a\u5b57\u7b26\u7684\u524d\u7f00\uff0c\u9020\u6210\u6df7\u6dc6\uff0c\u56e0\u6b64\u7f16\u7801\u89c4\u5219\uff1a</p>"},{"location":"ads/ads_part_3/#np-completeness","title":"NP-Completeness","text":"<p>Recall</p> <p>\u6b27\u62c9\u56de\u8def - NPC</p> <p>\u54c8\u5bc6\u5c14\u987f\u56de\u8def - NPH</p> <p>\u6700\u77ed\u8def\u5f84 - NPC</p> <p>\u6700\u957f\u8def\u5f84 - NPH</p> <p>NPH - \u6ca1\u6709\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u7b97\u6cd5</p> <p>Eazy vs. Hard</p> <ul> <li>\u6700\u7b80\u5355\u7684\uff1aO(N) - \u81f3\u5c11\u8bfb\u4e00\u6b21\u8f93\u5165</li> <li>\u6700\u56f0\u96be\u7684\uff1a \u65e0\u89e3</li> <li>\u4ecb\u4e8e\u4e8c\u8005\u4e4b\u95f4\uff1aNPC \u548c NPH</li> </ul> <p>\u56fe\u7075\u673a\uff1a</p> <ul> <li>Deterministic Turing Machine: executes one instruction at each point in time.  Then depending on the instruction, it goes to the next unique instruction.</li> <li>Nondeterministic Turing Machine: is free to choose its next step from a finite set.  And if one of these steps leads to a solution, it will always choose the correct one.</li> </ul> <p>\u5b9a\u4e49\uff1a</p> <ul> <li>P \u95ee\u9898\uff1a\u786e\u5b9a\u6027\u56fe\u7075\u673a\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898</li> <li>NP \u95ee\u9898\uff1a\u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898</li> </ul> <p>\u4f8b\u9898\uff1a\u5047\u8bbe\u6c49\u5bc6\u5c14\u987f\u662f NP \u95ee\u9898\uff0c\u6c42\u8bc1\u65c5\u884c\u5546\u95ee\u9898\u4e5f\u662f NP \u95ee\u9898</p> <p>A Formal-language Framework \u2014\u2014 \u8ba1\u7b97\u673a\u80fd\u770b\u61c2\u7684\u8bed\u8a00</p> <ul> <li>Abstract Problem: binary relation on a set I of problem instances and a set S of problem solutions.</li> <li>Map I  into a binary string { 0, 1 }*   -&gt;   Q is a concrete problem.</li> </ul> <p>complexity class co-NP = the set of languages L such that \\(\\bar L \\in NP\\)</p> \\[ L \\in NP \\rightarrow \\bar L \\in NP ? \\] <p>\u56db\u79cd\u53ef\u80fd\u6027\uff1a </p>"},{"location":"ads/ads_part_3/#approximation","title":"Approximation","text":""},{"location":"ads/ads_part_3/#approximate-bin-packing","title":"Approximate Bin Packing","text":"<p>Next Fit</p> <p>\u5f53\u524d\u5bb9\u5668\u6709\u7a7a\u4f4d\u2014\u2014\u653e\u5165\u5f53\u524d\u7269\u54c1</p> <p>\u5f53\u524d</p> <p>First Fit</p> <p>Best Fit</p> <p>bad case: </p> \\[ S_i = 1/7+\\varepsilon \\] <ul> <li>On-line Algorithms: \u6765\u4e00\u4e2a\u6570\u636e\u51b3\u7b56\u4e00\u4e2a\uff08\u9002\u5408\u751f\u4ea7\u7ebf\uff0c\u65e0\u6cd5\u770b\u5230\u6570\u636e\u5168\u8c8c\uff09</li> </ul> <p>\u5b9a\u7406\uff1a\u5bf9\u4efb\u4f55\u5728\u7ebf\u7b97\u6cd5\uff0c\u4e00\u5b9a\u53ef\u4ee5\u6784\u9020\u6570\u636e\uff0c\u4f7f\u5f97\u5728\u7ebf\u7b97\u6cd5\u7684\u7ed3\u679c\u548c\u6700\u4f18\u7ed3\u679c\u7684\u6bd4\u81f3\u5c11\u4e3a 5/3</p> <ul> <li> <p>Off-line Algorithms: \u8bfb\u53d6\u5168\u90e8\u6570\u636e\u540e\u518d\u8fdb\u884c\u51b3\u7b56</p> <ul> <li>Bin Packing: \u5c06\u6570\u636e\u4ece\u5927\u5230\u5c0f\u6392\u597d\u5e8f\uff0c\u518d\u4f7f\u7528 First Fit/Best Fit</li> </ul> </li> </ul>"},{"location":"ads/ads_part_3/#the-knapsack-problem","title":"The Knapsack Problem","text":"<p>fractional version</p> <p>0 1 version</p> <ul> <li>approximate ratio \u7684\u8ba1\u7b97</li> </ul>"},{"location":"ads/ads_part_3/#the-k-center-problem","title":"The K-center Problem","text":"<p>\u5b9a\u7406</p>"},{"location":"ads/project2_test/","title":"Project 2 - Test Interface","text":""},{"location":"ads/project2_test/#_1","title":"\u6211\u4eec\u9879\u76ee\u4e2d\u7684\u8f93\u5165\u6570\u636e","text":"<p>\u5728\u5b9e\u9645\u6587\u4ef6\u4e2d\u6ca1\u6709\u6ce8\u91ca</p> query.txt<pre><code>5 7//\u56fe\u67095\u4e2a\u9876\u70b9\uff0c7\u6761\u8fb9\n//\u63a5\u4e0b\u6765\u662f7\u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u4e00\u6761\u8fb9\n1 2 10//\u4ece\u9876\u70b91\u5230\u9876\u70b92\u7684\u8fb9\uff0c\u6743\u91cd\u4e3a10\n1 3 20\n1 5 25\n2 4 35\n2 5 40\n3 5 50\n4 5 55\n\n//\u67e5\u8be2\u8bed\u53e5\u7684\u8f93\u5165\n4//\u4e00\u5171\u67094\u6761\u67e5\u8be2\u8bed\u53e5\n1 3//\u67e5\u8be2\u9876\u70b91\u52303\u7684\u6700\u77ed\u8def\u5f84\n2 4\n5 1\n3 2\n</code></pre> <p>\u5728\u7a0b\u5e8f\u4e2d\uff0c\u8bfb\u53d6\u6570\u636e\u7684\u90e8\u5206\u5df2\u7ecf\u5199\u597d\uff0c\u56fe\u88ab\u4fdd\u5b58\u4e3a\u4e00\u5f20\u90bb\u63a5\u94fe\u8868\uff0c\u7ed3\u6784\u58f0\u660e\u5982\u4e0b\u3002</p> <pre><code>// \u5b9a\u4e49\u56fe\u4e2d\u7684\u8282\u70b9\u7ed3\u6784\ntypedef struct Node {\n    int vertex;            // \u8282\u70b9\u7684\u503c\n    int weight;            // \u5230\u8be5\u8282\u70b9\u7684\u8fb9\u7684\u6743\u91cd\n    struct Node* next;     // \u6307\u5411\u4e0b\u4e00\u4e2a\u76f8\u90bb\u8282\u70b9\u7684\u6307\u9488\n} Node;\n\n// \u5b9a\u4e49\u90bb\u63a5\u94fe\u8868\u7ed3\u6784\ntypedef struct Graph {\n    int numVertices;       // \u56fe\u4e2d\u8282\u70b9\u7684\u6570\u91cf\n    Node** adjLists;       // \u5b58\u50a8\u90bb\u63a5\u94fe\u8868\u7684\u6570\u7ec4\n} Graph;\n</code></pre> <p>\u4e0b\u9762\u7528\u4f8b\u5b50\u8bf4\u660e </p> <p>\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li>\u6570\u7ec4\u6807\u53f7\u4ece0 - n-1\uff0c\u800c\u9876\u70b9\u6807\u53f7\u4ece1 - n</li> <li>\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u7c7b\u578b\u662fnode\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0d\u662f\u54e8\u5175\uff0c\u76f4\u63a5\u662f\u4e00\u6761\u8fb9</li> <li>\u56fe\u662f\u65e0\u5411\u56fe</li> <li>\u6743\u91cd\u90fd\u662f\u6b63\u6574\u6570</li> <li>\u6ca1\u6709\u5e73\u884c\u8fb9\u548cself loop</li> <li>printGraph\u51fd\u6570\u53ef\u4ee5\u67e5\u770b\u56fe\u7684\u7ed3\u6784 </li> </ul> <p>\u4f60\u9700\u8981\u5b8c\u6210\u7684\uff1a</p> <ul> <li>\u5728line 146\u8865\u5145\u51fd\u6570<code>int dijkstra_heap(Graph* graph, int src, int dest)</code>\uff0c\u7528\u5806\u5b9e\u73b0dijkstra\u7b97\u6cd5</li> <li>\u53c2\u6570\u610f\u4e49\uff1a\u5728\u56fegraph\u4e2d\u627e\u5230\u6807\u53f7\u4e3asrc\u5230\u6807\u53f7\u4e3adest\u7684\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u8fd4\u56de\u8fd9\u4e2a\u6700\u77ed\u8ddd\u79bb\u7684\u5927\u5c0f</li> <li>\u6700\u7ec8\u7684\u6570\u636e\u96c6\u662f\u73b0\u5b9e\u4e2d\u7684\u9053\u8def\uff0c\u4e0d\u4fdd\u8bc1\u4e00\u5b9a\u6709\u89e3\u3002\u5982\u679c\u6ca1\u6709\u89e3\uff0c\u8fd4\u56de-1</li> <li>dijkstra()\u51fd\u6570\u662f\u66b4\u529b\u641c\u7d22\u6cd5\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\uff0c\u7528\u6765\u68c0\u9a8c\u4f60\u7684\u7b97\u6cd5\u7684\u6b63\u786e\u6027</li> <li>test\u7a0b\u5e8f\u6267\u884c\u5b8c\u6bd5\u4f1a\u6709\u4ee5\u4e0b\u8f93\u51fa\uff1a\uff08\u62ec\u53f7\u91cc\u662f\u51fd\u6570dijkstra_heap()\u7684\u8fd4\u56de\u503c\uff0c\u6b64\u65f6\u51fd\u6570\u4e3a\u7a7a\uff0c\u8fd4\u56de\u4e86\u968f\u673a\u503c1349030576\uff09   </li> <li>\u4f60\u53ef\u4ee5\u66f4\u6539query.txt\u4e2d\u7684\u6570\u636e\u6765\u68c0\u9a8c\u7a0b\u5e8f\u7684\u6b63\u786e\u6027</li> </ul>"},{"location":"ads/project2_test/#_2","title":"\u4e0b\u9762\u662f\u6570\u636e\u96c6\u7684\u683c\u5f0f\uff08\u6211\u6765\u5904\u7406\uff0c\u5176\u4ed6\u4eba\u53ef\u5ffd\u7565\uff09","text":"<ul> <li>A graph contains n nodes and m arcs</li> <li>Nodes are identified by integers 1...n</li> <li>Graphs is undirected in this project</li> <li>Graphs can have parallel arcs and self-loops</li> <li>Arc weights are signed integers</li> </ul> <p>\u8f93\u5165\u6587\u4ef6\u7684\u683c\u5f0f\uff1a</p> <p>\u56fe\u7684\u6570\u636e\uff08.gr\u6587\u4ef6\uff09 </p> \u6bcf\u4e00\u884c\u5f00\u5934\u7684\u9996\u5b57\u6bcd \u5bf9\u5e94\u610f\u4e49 \u793a\u4f8b\u4ee3\u7801 c comment\uff0c\u6ce8\u91ca\uff0c\u5e94\u88ab\u5ffd\u7565 <code>c This is a comment</code> p problem\uff0c\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5fc5\u5b9a\u5728\u4e0d\u662f\u6ce8\u91ca\u7684\u7b2c\u4e00\u884c\uff0c\u7ed9\u51fa\u56fe\u7684\u8282\u70b9\u6570\u548c\u8fb9\u6570\uff08n\u4e2a\u8282\u70b9\uff0cm\u6761\u8fb9\uff09 <code>p sp n m</code> a arc\uff0c\u63cf\u8ff0\u56fe\u7684\u4e00\u6761\u8fb9\uff08U\u3001V\u662f\u4e24\u7aef\u7684\u8282\u70b9\uff0cW\u662f\u8fb9\u7684\u6743\u91cd\uff09\uff0c\u4e00\u5171m\u884c <code>a U V W</code> <p>\u4f8b\u5b50\u5982\u4e0b <pre><code>c 9th DIMACS Implementation Challenge: Shortest Paths\nc http://www.dis.uniroma1.it/~challenge9\nc Sample graph file\nc\np sp 6 8\nc graph contains 6 nodes and 8 arcs\nc node ids are numbers in 1..6\nc\na 1 2 17\nc arc from node 1 to node 2 of weight 17\nc\na 1 3 10\na 2 4 2\na 3 5 0\na 4 3 0\na 4 6 3\na 5 2 0\na 5 6 20\n</code></pre></p> <p>\u67e5\u8be2\u7684\u8f93\u5165\u65b9\u5f0f\uff08.p2p\u6587\u4ef6\uff09</p> <p>(p2p\u610f\u601d\u662fPoint-to-point\uff0c\u627e\u70b9\u5bf9\u70b9\u7684\u6700\u77ed\u8def\u5f84)</p> \u6bcf\u4e00\u884c\u5f00\u5934\u7684\u9996\u5b57\u6bcd \u5bf9\u5e94\u610f\u4e49 \u793a\u4f8b\u4ee3\u7801 c comment\uff0c\u6ce8\u91ca\uff0c\u5e94\u88ab\u5ffd\u7565 <code>c This is a comment</code> p problem\uff0c\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5fc5\u5b9a\u5728\u4e0d\u662f\u6ce8\u91ca\u7684\u7b2c\u4e00\u884c\uff0c\u7ed9\u51fa\u67e5\u8be2\u6307\u4ee4\u7684\u6761\u6570n <code>p aux sp p2p n</code> q query\uff0c\u67e5\u8be2\uff0c\u8ba9\u4f60\u6c42\u89e3S\u5230T\u7684\u6700\u77ed\u8def\u5f84 <code>q S T</code> <p>\u793a\u4f8b\u4ee3\u7801 <pre><code>c 9th DIMACS Implementation Challenge: Shortest Paths\nc http://www.dis.uniroma1.it/~challenge9\nc Sample point-to-point problem specification file\nc\np aux sp p2p 3\nc contains 3 query pairs\nc\nq 1 5\nq 5 1\nq 1 2\n</code></pre></p>"},{"location":"ads/project2_test/#_3","title":"\u6d4b\u8bd5\u7ed3\u679c","text":"<p>\u6bcf\u4e2a\u6570\u636e\u96c6\u968f\u673a\u8dd11000\u5bf9\u67e5\u8be2\uff0c\u6570\u636e\u96c6\u5927\u5c0f\u4ece\u5c0f\u5230\u5927</p> <p>\u6700\u5c0f\u5806\uff08\u6d4b\u4e86\u4e24\u6b21\uff09 </p> <p></p> <p>Bheap </p> <p>\u6590\u6ce2\u90a3\u5951\u5806  </p> \u6570\u636e\u96c6 NY COL FLA LKS CTR \u6570\u636e\u5927\u5c0f\uff08\u9876\u70b9\u6570/\u8fb9\u6570\uff09 264,346/733,846 435,666/1,057,066 1,070,376/2,712,798 2,758,119/6,885,658 14,081,816/34,292,496 \u6700\u5c0f\u5806 48.33 69.92 180.80 487.17 2916.24 \u4e8c\u9879\u961f\u5217 201.75 300.53 775.29 2074.68 12120.90 \u6590\u6ce2\u90a3\u5951\u5806 229.96 328.11 794.29 2178.04 <p>ps\uff1a\u7528\u65f6\u90fd\u662f\u76f8\u5e94\u6570\u636e\u96c6\u4e0a 1000 \u5bf9\u67e5\u8be2\u7684\u7ed3\u679c</p>"},{"location":"oop/oop/","title":"Object-Oriented Programming","text":"<ul> <li> <p>\u5173\u952e\u5b57/\u4e09\u5927\u7279\u6027\uff1aInheritance\uff08\u96c6\u6210\uff09  Encapsulation\uff08\u5c01\u88c5\uff09 Polymorphism(\u591a\u6001)</p> </li> <li> <p>\u6559\u6750\uff1aThinking in C++</p> </li> <li> <p>\u53c2\u8003\uff1aC++ Primer, Ver 5</p> </li> <li> <p>\u6210\u7ee9\u6784\u6210\uff1aLab 50%, Exam 50%</p> </li> </ul>"},{"location":"oop/oop/#introduction","title":"Introduction","text":"<ul> <li>\u7b2c\u4e00\u4e2aC++\u7a0b\u5e8f</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; \"Hello, World! I am \" &lt;&lt; 18 &lt;&lt; \"Today!\" &lt;&lt; endl;\n    //endl: \u6362\u884c\n    return 0; \n}\n</code></pre> <ul> <li>\u8f93\u5165\u8f93\u51fa\u6d41 <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int number;\n\n    cout &lt;&lt; \"Enter a decimal number:\"; \n    cin &gt;&gt; number;\n    cout &lt;&lt; \"The number you entered is \" &lt;&lt; number &lt;&lt;\".\" &lt;&lt;endl;\n\n    system(\"pause\");//\u51bb\u7ed3\u5c4f\u5e55\uff0c\u4fbf\u4e8e\u89c2\u5bdf\u7ed3\u679c\n    //not matter?\n    return 0;\n}\n</code></pre></li> </ul>"},{"location":"oop/oop/#using-objects","title":"Using Objects","text":"<p>\u4ee5\u5b57\u7b26\u4e32\u4e3a\u4f8b</p> <ul> <li> <p>\u52a0\u5934\u6587\u4ef6</p> <ul> <li><code>include &lt;string&gt;</code></li> </ul> </li> <li> <p>\u5b9a\u4e49\u53d8\u91cf</p> <ul> <li><code>string str;</code></li> </ul> </li> <li> <p>\u521d\u59cb\u5316</p> <ul> <li><code>string str = \"hello\";</code></li> </ul> </li> <li> <p>\u8bfb\u5199\u8be5\u53d8\u91cf</p> <ul> <li> <p><code>cin &gt;&gt; str</code></p> </li> <li> <p><code>cout &lt;&lt; str</code></p> </li> </ul> </li> </ul> <ul> <li>\u4e0eC\u4e0d\u540c\u7684\u90e8\u5206\uff1a</li> </ul> <pre><code>//C:\nchar charr1[20];//\u9700\u8981\u6307\u5b9a\u5927\u5c0f\nchar charr2[20] = \u201cjaguar\u201d;\ncharr1 = charr2;//illegal,\n//\u56e0\u4e3a\u540d\u79f0\u6307\u5411\u56fa\u5b9a\u7684\u5730\u5740\uff0c\u4e0d\u80fd\u76f8\u4e92\u8d4b\u503c\n</code></pre> <pre><code>//C++:\nstring str1;//\u4e0d\u7528\u8003\u8651\u5185\u5b58\nstring str2=\u201cpanther\u201d;\n\nstr1 =str2;//legal\n</code></pre> <ul> <li>\u5b57\u7b26\u4e32\u8fde\u63a5\uff1a</li> </ul> <pre><code>string str3;\nstr3 = str1 + str2;\nstr1 +=str2;\nstrl +=\"lalala\";\n</code></pre> <ul> <li> <p>C\u5982\u679c\u672a\u521d\u59cb\u5316\u2014\u2014\u968f\u673a\u503c\uff0c\u800cC++\u5f3a\u5236\u521d\u59cb\u5316</p> <ul> <li> <p><code>string str1,str2(\"hello\");</code></p> </li> <li> <p>str1: \u7a7a\uff0cstr2: hello</p> </li> <li> <p>\u4e0e\u7c7b\u540d\u4e00\u6837\u7684\u51fd\u6570\uff1a\u6784\u9020\u51fd\u6570</p> </li> </ul> </li> <li> <p>\u7528 \".\" \u8fdb\u884c\u5bf9\u8c61\u884c\u4e3a <pre><code>str.empty();//\u5b57\u7b26\u4e32\u4e3a\u7a7a\u65f6\u8fd4\u56de1\n</code></pre></p> </li> </ul>"},{"location":"oop/oop/#file-io","title":"File I/O","text":"<pre><code>#include &lt;fstream&gt;//read from and write to file\nofstream File1(\"C:\\\\test.txt\");\nFile1&lt;&lt;\"Hello world\"&lt;&lt;std::endl;//if without using namespace std;\nifstream File2(\"C:\\\\test.txt\");\nstd::string str1;\nstd::string str2;\nFile1&gt;&gt;str1;\nFile2&gt;&gt;str2\n</code></pre>"},{"location":"oop/oop/#memory-model","title":"Memory Model","text":"<pre><code>//global vars\nint i;//outside all the function\nstring str;\nstatic int j;//static global vars: \u4ec5\u5f53\u524d\u6587\u4ef6\u53ef\u89c1\nf(){\n  int k;//local vars.\n  static int l;// static local vars\uff1a\u4ec5\u51fd\u6570\u5185\u53ef\u89c1\uff0c\u518d\u6b21\u8bbf\u95ee\u4fdd\u7559\u539f\u503c\n  int* p = malloc(sizeof(int));//allocated vars.\n  }\n</code></pre> <p>Where:</p> <ul> <li> <p>\u4f4d\u4e8eGlobal data\uff1a</p> <ul> <li> <p>Global vars\uff1a\u53ef\u88ab\u5176\u4ed6\u6587\u4ef6\u5171\u4eab</p> </li> <li> <p>Static global vars.</p> </li> <li> <p>Static local vars.</p> </li> </ul> </li> <li> <p>\u4f4d\u4e8eStack:</p> <ul> <li>local vars</li> </ul> </li> <li> <p>\u4f4d\u4e8eHeap:</p> <ul> <li>dynamically allocated vars.</li> </ul> </li> </ul> <p>\u5982\u4f55\u8bbf\u95ee\u5916\u90e8\u53d8\u91cf\uff1a</p> <pre><code>//text.cpp\nstring gStrl;//outside main &amp; other function\n</code></pre> <pre><code>//main.cpp\nextern string gStrl;//\u65e0extern\uff1a\u91cd\u5b9a\u4e49\u62a5\u9519\nmain()\n{\n  //\u53ef\u4ee5\u8bbf\u95eegStrl\n}\n</code></pre>"},{"location":"oop/oop/#pointer-to-objects","title":"Pointer to Objects","text":"<pre><code>//object create\nstring s = \"hello\";//\u5b9a\u4e49\uff0c\u6784\u9020\uff0c\nstring* ps = &amp;s;\n(*ps).length()//get the object\nps-&gt;length()//call the function\n</code></pre> <p>\u52a8\u6001\u5185\u5b58\u5206\u914d\uff1a <pre><code>//\u8fd4\u56de\u6307\u9488\nint* p = new int;\nint* pStudent = new Student[10];\ndelete p;\ndelete [] pStudent;\n//\u8fd8\u7ed9\u7cfb\u7edf\n</code></pre></p>"},{"location":"oop/oop/#reference","title":"Reference","text":"<ul> <li><code>type&amp; refname = name;</code></li> </ul> <pre><code>char c;\nchar&amp; r = c;//a reference to c, \u6b64\u65f6\u5fc5\u987b\u5f15\u7528\uff0ccan't be null\nint&amp; r = 10;//illegal, \u53ea\u80fd\u5f15\u7528\u53d8\u91cf\nr = 'x';//c\u4e5f\u88ab\u8d4b\u503c'x'\n</code></pre> <p>\u5e38\u7528\u4e8e\u4f20\u53c2\uff08\u5b9e\u53c2\uff09</p> <pre><code>void f(int&amp; x);\nf(y);//x\u5f15\u7528y\uff0c\u51fd\u6570\u4e2dx\u6539\u53d8\uff0c\u5916\u9762y\u4e5f\u6539\u53d8\nf(y*3);//illegal\nint&amp;* p;//illegal\uff0c\u6307\u5411\u5f15\u7528\u53d8\u91cf\u7684\u6307\u9488\u4e0d\u5408\u6cd5\nvoid f(int*&amp; p);//\u5f15\u7528\u6307\u9488\n</code></pre>"},{"location":"oop/oop/#const","title":"Const \u5e38\u91cf","text":"<p>\u7528\u6765\u4ee3\u66ff\u5b8f</p> <pre><code>const int x = 123;//\u5fc5\u987b\u521d\u59cb\u5316\uff0cx\u4fdd\u6301\u5e38\u6570\u503c\nx = 27;//illegal\nx++;//illegal\nconst int y = x;//\u53ef\u4ee5\u4efb\u610f\u8d4b\u7ed9\u522b\u4eba\n</code></pre> <p>\u7f16\u8bd1\u5668\u4f1a\u907f\u514d\u7ed9\u5b83\u5206\u914d\u5185\u5b58\uff1a\u76f4\u63a5\u5199\u5728\u8868\u8fbe\u5f0f\u4e2d</p> <p>\u6ca1\u6cd5\u5728\u7f16\u8bd1\u65f6\u523b\u786e\u5b9a\\\u5916\u90e8\u8981\u4f7f\u7528\u65f6\uff0c\u5206\u914d\u5185\u5b58</p> <pre><code>const string* p1 = \"ABC\";//\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u4e0d\u80fd\u66f4\u6539\n//\u76f8\u5f53\u4e8estring const* p1\n*p1 = \"c\";//illegal\nstring *const p2 = \"ABC\";//\u6307\u9488\u672c\u8eab\u4e0d\u80fd\u66f4\u6539\np2 = \"hello\";//OK\n</code></pre> <p>const\u6570\u7ec4\u2014\u2014\u4f1a\u5206\u914d\u4e00\u7247\u5185\u5b58\uff0c\u6b64\u65f6\u7f16\u8bd1\u5668\u4e0d\u77e5\u9053\u6570\u7ec4\u91cc\u7684\u503c</p> <pre><code>const int i[] = { 1, 2, 3, 4 };\nfloat f[i[3]]; // Illegal  \n\nstruct S { int i, j; };\nconst S s[] = { { 1, 2 }, { 3, 4 } };\ndouble d[s[1].j]; // Illegal\n</code></pre> <p>\u5f53\u9700\u8981\u4f20\u9012\u5927\u89c4\u6a21\u6570\u636e\uff08\u5982\u6570\u7ec4\uff09\u65f6\uff0c\u5e38\u7528\u6307\u9488\uff0c\u5bb9\u6613\u628a\u539f\u672c\u7684\u6570\u636e\u6539\u6389</p> <p>\u4e3a\u907f\u514d\u6b64\u79cd\u60c5\u51b5\uff0c\u4f1a\u5728\u6307\u9488\u524d\u52a0const</p> <pre><code>//\u5c3d\u91cf\u7528\u6307\u9488/\u5f15\u7528+const\nvoid f(const int*x);//\u4f20\u9012\u7684\u53c2\u6570\u4e0d\u53ef\u4fee\u6539\n//\u51fd\u6570f\u4e2d\n  x++;//illegal\n</code></pre>"},{"location":"oop/oop/#class","title":"Class","text":"<p>\u81ea\u5df1\u8bbe\u8ba1\u5bf9\u8c61</p>"},{"location":"oop/oop/#point","title":"Point","text":"<p><pre><code>//\u7ed3\u6784\u4f53\u7684\u5199\u6cd5\ntypedef struct point{\n  float x;\n  float y;\n} Point;\n\nPoint a;\na.x = 1;a.y = 2;\n\nprint(&amp;a);\n\nvoid print(const Point* p){\n  printf(\"%d %d\\n\",p-&gt;x,p-&gt;y);\n}\nvoid move(Point* p,int dx, int dy){\n  p-&gt;x+=dx;\n  p-&gt;y+=dy;\n}\n</code></pre> * Objects = Attributes + Service</p> <p><pre><code>//\u7c7b\u7684\u5199\u6cd5\nclass Point{\npublic:\n  void init(int x,int y);\n  void move(int dx,int dy);\n  void print() const;\n  //\u884c\u4e3a\u548c\u5bf9\u8c61\u5c01\u88c5\u5728\u4e00\u8d77\nprivate://\u4e0d\u5199public\u5c31\u662fprivate\n  int x;//\u4e0d\u5141\u8bb8\u5916\u754c\u6539\n  int y;\n};\n\n//implementations\nvoid Point::init(int ix,int iy){\n  x = ix;\n  y = iy;\n}\nvoid Point::move(int ix,int iy){\n  x+ = dx;\n  y+ = dy;\n}\nvoid Point::print() const{\n  cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;\n}\n</code></pre> <code>::</code>\u2014\u2014resolver\uff0c\u8868\u9762\u51fd\u6570\u5c5e\u4e8e\u8c01</p> <p><code>&lt;Class Name&gt;::&lt;function name&gt;</code></p> <p><code>::&lt;function name&gt;</code>\u2014\u2014\u5168\u5c40\u51fd\u6570</p> <pre><code>void S:f(){\n  f();//recursive\n  ::f();//\u8c03\u7528\u540c\u540d\u7684\u5168\u5c40\u51fd\u6570\n  ::a++;//\u5168\u5c40\u53d8\u91cf\n  a--;//\u7c7b\u4e2d\u7684a\n}\n</code></pre>"},{"location":"oop/oop/#stash","title":"Stash","text":"<ul> <li> <p>Container\u662f\u53ef\u4ee5\u88c5\u5bf9\u8c61\u7684\u5bf9\u8c61</p> </li> <li> <p>\u57fa\u672c\u64cd\u4f5c\uff1aput()\u548cget()</p> </li> <li> <p>Stash\u662f\u53ef\u6269\u5c55\u7684Container</p> </li> </ul>"},{"location":"oop/oop/#stash_1","title":"Stash","text":"<ul> <li> <p>\u53ef\u4ee5\u88c5\u4efb\u610f\u7c7b\u578b\u7684\u5bf9\u8c61</p> </li> <li> <p>\u88c5\u5f88\u591a\u540c\u4e00\u7c7b\u578b\u7684\u5bf9\u8c61\uff08\u53ea\u5173\u6ce8size\uff0c\u4e0d\u5173\u6ce8\u7c7b\u578b\uff09</p> </li> <li> <p>\u57fa\u672c\u64cd\u4f5c\uff1aadd()\u548cfetch()</p> </li> </ul> <pre><code>struct Stash {\n  int size; // Size of each space\n  int quantity; // Number of storage spaces  \n  int next; // Next empty space\n  // Dynamically allocated array  unsigned char* storage;\n  unsigned char* storage;\n  // Functions!\n  void initialize(int size);  \n  void cleanup();\n  int add(const void* element);  \n  void* fetch(int index);\n  int count();\n  void inflate(int increase);\n};\n</code></pre>"},{"location":"oop/oop/#this-the-pointer-to-the-variable","title":"this: the pointer to the variable","text":"<ul> <li>\u81ea\u52a8\u5b58\u5728\uff0c\u4e0d\u9700\u58f0\u660e</li> </ul>"},{"location":"oop/oop2/","title":"Implementation","text":""},{"location":"oop/oop2/#_1","title":"\u5f85\u5b9a\u6807\u9898","text":"<p>.h\u5934\u6587\u4ef6\uff08\u58f0\u660e\uff09</p> <ul> <li>\u51fd\u6570\u5728\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\uff1a\u9700\u8981\u5728\u4efb\u4f55\u9700\u8981\u4f7f\u7528/\u5b9a\u4e49\u7684\u5730\u65b9include\u5934\u6587\u4ef6</li> <li>\u7c7b\u540c\u7406\uff08\u4e00\u822c\u4e00\u4e2a\u5934\u6587\u4ef6\u653e\u4e00\u4e2a\u7c7b\uff09</li> <li>\u5934\u6587\u4ef6\uff08header\uff09=\u63a5\u53e3\uff08interface\uff09\uff1a\u522b\u4eba\u770b\u4f60\u7684\u5934\u6587\u4ef6\u624d\u77e5\u9053\u600e\u4e48\u7528 </li> </ul> <p>include \u5199\u6cd5\u7684\u533a\u522b\uff1a</p> <ul> <li><code>#include \u201cxx.h\u201d</code>:first search in the current  directory, then the    directories declared  somewhere</li> <li><code>#include &lt;xx.h&gt;</code>:search in the specified  directories</li> <li><code>#include &lt;xx&gt;</code>:same as #include"},{"location":"oop/oop2/#the-makefile-utility","title":"The Makefile utility","text":"<p>\u6839\u636e\u65f6\u5e8f\u5224\u65ad\u662f\u5426\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\uff0c\u51cf\u5c11\u5f00\u9500\uff08\u6839\u6bd4\u513f\u5b50\u65f6\u95f4\u65e9\uff0c\u5219\u6839\u8981\u66f4\u65b0\uff09 </p> <p>\u5c06\u6811\u7528makefile\u8868\u793a\u51fa\u6765\uff1a <pre><code>sum: main.o sum.o#\u5192\u53f7\u8868\u793a\u4f9d\u8d56\ngcc \u2013o  sum main.o sum.o\n\nmain.o: main.c sum.h  \ngcc \u2013c main.c\n\nsum.o: sum.c sum.h  \ngcc \u2013c sum.c\n</code></pre> \u5b8f\u66ff\u6362\uff08\u4fbf\u4e8e\u66f4\u6539\uff09 * <code>$@</code>: \u4e0a\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a * <code>$*</code>:  <pre><code>sum: main.o sum.o\ngcc \u2013o  $@  main.o  sum.o\n\nmain.o  sum.o: sum.h  \ngcc \u2013c $*.c\n</code></pre></p>"},{"location":"oop/oop2/#initialize","title":"Initialize","text":"<p>\u8fd9\u4e2a\u90e8\u5206\u6ca1\u5206\u592a\u6e05\uff0c\u90fd\u4e0d\u6562 release \u4e86\uff08\u53cd\u6b63\u6ca1\u4eba\u770b</p> <p><code>init()</code>\uff1a\u7f3a\u7701\u51fd\u6570\uff0c\u5982\u679c\u672a\u5b9a\u4e49\u4efb\u4f55\u6784\u9020\u51fd\u6570\uff0c\u7cfb\u7edf\u81ea\u52a8\u751f\u6210</p> <p>\u5bf9\u6bcf\u4e2a\u6210\u5458\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316</p> <p>\u4e3a\u4e86\u786e\u4fdd\u521d\u59cb\u5316\uff0c\u5728\u5bf9\u8c61\u5b9a\u4e49\u7684\u65f6\u523b\u4f1a\u7528\u6784\u9020\u51fd\u6570\u5f3a\u5236\u521d\u59cb\u5316</p> <p>\u6784\u9020\u51fd\u6570\uff1a\u4e0e\u7c7b\u540d\u76f8\u540c\u7684\u51fd\u6570 <pre><code>class X{\n    int i;\npublic:\n    X()\n};\n//\u8c03\u7528\n\u00b7\u00b7\u00b7\n</code></pre></p> <p><pre><code>Course(string id, float score) : course_id(id), score(score) {}\n</code></pre> <code>course_id(id), score(score)</code>\uff1a\u8fd9\u662f\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u3002\u5b83\u5728\u6784\u9020\u51fd\u6570\u7684\u4e3b\u4f53\u4e4b\u524d\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u9694\u7684\u65b9\u5f0f\u5bf9\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5728\u8fd9\u91cc\uff0ccourse_id(id) \u8868\u793a\u5c06 course_id \u6210\u5458\u53d8\u91cf\u521d\u59cb\u5316\u4e3a\u4f20\u5165\u6784\u9020\u51fd\u6570\u7684 id \u53c2\u6570\u7684\u503c\uff1bscore(score) \u8868\u793a\u5c06 score \u6210\u5458\u53d8\u91cf\u521d\u59cb\u5316\u4e3a\u4f20\u5165\u6784\u9020\u51fd\u6570\u7684 score \u53c2\u6570\u7684\u503c\u3002</p> <p>\u901a\u8fc7\u4f7f\u7528\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\uff0c\u53ef\u4ee5\u76f4\u63a5\u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\uff0c\u800c\u4e0d\u9700\u8981\u5728\u6784\u9020\u51fd\u6570\u7684\u4e3b\u4f53\u4e2d\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\u3002\u8fd9\u6837\u505a\u7684\u4f18\u70b9\u662f\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u6548\u7387\u548c\u53ef\u8bfb\u6027\u3002</p> <p>\u6784\u9020\u51fd\u6570\u53ef\u5e26\u53c2\u6570 <pre><code>Tree\n</code></pre></p> <p>\u5982\u679c\u5b9a\u4e49\u7684\u6784\u9020\u51fd\u6570\u6709\u53c2\u6570\uff0c\u8c03\u7528\u65f6\u6ca1\u7ed9\u53c2\u6570\uff0c\u4f1a\u8c03\u7528\u7f3a\u7701\u6784\u9020\u51fd\u6570</p> <p>\u4f46\u662f\uff0c\u4e00\u65e6\u4f60\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u51fd\u6570\uff0c\u7cfb\u7edf\u5c31\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\u7f3a\u7701\u6784\u9020\u51fd\u6570</p> <p>\u6570\u7ec4\u7684\u521d\u59cb\u5316\u8c03\u7528 <pre><code>\n</code></pre> * jump\u53ef\u4ee5\u8df3\u8fc7 * \u4f46\u7f16\u8bd1\u4e0d\u5141\u8bb8\u8df3\u8fc7\u521d\u59cb\u5316</p>"},{"location":"oop/oop2/#destructor","title":"Destructor","text":"<p>\u6790\u6784\u51fd\u6570</p> Aggregate initialization<pre><code>int a[5] = {1,2,3,4,5};\nint b[6] = {5};\nint c[] = {1,2,3,4};\n    - sizeof c / sizeof *c\nstruct x { int i; float f; char c; };\n    - X x1 = {1, 2.2, 'c'};\nX x2[3] = { {1, 1.1, 'a'}, {2, 2.2, 'b'} }\nstruct Y { float f; int i; Y(int a); };\nY y1[] = { Y(1), Y(2), Y(3) };\n</code></pre> <p>\u591a\u4e2a\u540c\u540d\u51fd\u6570 \u2014\u2014 \u7f16\u8bd1\u5668\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a</p> <p>\u51fd\u6570\u7684\u7f3a\u7701\u503c</p>"},{"location":"oop/oop2/#static-function","title":"Static function?","text":"<p>\u4e0d\u80fd\u8bbf\u95ee\u6210\u5458\u53d8\u91cf</p>"},{"location":"oop/oop2/#copy-constructor","title":"Copy Constructor","text":"<ul> <li>\u62f7\u8d1d\u6784\u9020\uff1a<code>T::T(const T&amp;)</code></li> <li>\u6ca1\u6709\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u65f6\u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210</li> <li>\u81ea\u52a8\u751f\u6210\u7684\u62f7\u8d1d\u53d8\u91cf\uff1a\u6bcf\u4e2a\u6210\u5458\u53d8\u91cf\u81ea\u52a8\u8c03\u7528\u62f7\u8d1d\u51fd\u6570</li> <li>\u62f7\u8d1d\u6307\u9488\u7684\u4e24\u79cd\u9009\u62e9\uff1a</li> <li>\u53ea\u662f\u62f7\u8d1d\u4e86\u6307\u9488\u7684\u503c\uff0c\u6307\u5411\u7684\u5185\u5b58\u8fd8\u662f\u76f8\u540c\u7684\uff08\u539f\u6765\u7684\u5185\u5b58\u53ef\u80fd\u88ab free\uff09</li> <li>\u628a\u6307\u5411\u7684\u5185\u5b58\u4e5f\u62f7\u8d1d</li> </ul> <p>Howmany2.cpp</p> <p>\u8c03\u7528\u62f7\u8d1d\u6784\u9020\uff08\u6ce8\u610f\u5206\u8fa8 constructions \u548c assignment\uff09</p> <ul> <li>\u62f7\u8d1d\u6784\u9020\u6700\u597d\u81ea\u5df1\u5199\uff0c\u4e0d\u540c\u7f16\u8bd1\u5668\u4e0d\u540c</li> </ul> <p>\u59d4\u6258\uff1f</p>"},{"location":"oop/oop2/#static","title":"Static","text":"<p>\u4e24\u4e2a\u542b\u4e49</p> <ul> <li>\u9759\u6001\u5b58\u50a8\uff1a\u5730\u5740\u56fa\u5b9a</li> <li>\u9759\u6001\u53d8\u91cf\uff1a\u5168\u5c40\u53ef\u89c1\uff08\u8d8a\u5c11\u8d8a\u597d\uff09</li> </ul> <p>\u6700\u597d\u5728\u51fd\u6570\u58f0\u660e\u65f6\u4f7f\u7528\uff0c\u5168\u5c40\u53d8\u91cf\u4e0d\u63a8\u8350\u4f7f\u7528</p> <p>Golbal Objects</p> <ul> <li>\u5728 main \u51fd\u6570\u5f00\u59cb\u524d\u6784\u9020</li> <li>\u5728 main \u51fd\u6570\u7ed3\u675f\u540e\u8c03\u7528\u6790\u6784</li> </ul> <p>\u5728\u7c7b\u4e2d static \u53d8\u91cf\uff1a\u6240\u6709\u5b9e\u4f8b\u5171\u6709\uff0c\u4e0d\u989d\u5916\u5728\u5b9e\u4f8b\u5316\u65f6\u5206\u914d\u5185\u5b58</p> <p>\uff08\u4e0d\u80fd\u5728\u9759\u6001\u6210\u5458\u51fd\u6570\u8bbf\u95ee static \u53d8\u91cf\uff09</p>"},{"location":"oop/oop2/#namespace","title":"Namespace","text":"<p>\u65b9\u4fbf\u7ba1\u7406\uff0c\u51cf\u5c11\u51b2\u7a81</p> <p>\u591a\u6587\u4ef6\u65f6\u4f1a\u81ea\u52a8\u5408\u5e76</p>"},{"location":"oop/oop3/","title":"Oop3","text":"<p>\u51fd\u6570\u8c03\u7528\u6709\u4ee3\u4ef7\uff08\u6808\u7b49\uff09</p>"},{"location":"oop/oop3/#inline-function","title":"Inline Function","text":"<p>\u5c06 function \u5728\u8c03\u7528\u5904\u5c55\u5f00\uff0c\u4e0d\u7528\u8c03\u7528\u548c\u8fd4\u56de\uff0c\u6ca1\u6709\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u4e86\uff08\u574f\u5904\u662f\u4ee3\u7801\u53d8\u5927\uff09</p> <p>\u7528 <code>inline</code> \u5173\u952e\u5b57\uff1a</p> <pre><code>// \u9700\u8981\u8c03\u7528\u7684\u7248\u672c\nint f(int i){\n    return i*2;\n}\nmain(){\n    int a=4;\n    int b=f(a);\n}\n\n// \u539f\u5730\u8f6c\u6362\u7684\u7248\u672c\ninline int f(int i){\n    return i*2;\n}\nmain(){\n    int a=4;\n    int b=f(a);\n}\n</code></pre> <ul> <li>\u7c7b\u4f3c\u4e8e\u5b8f\uff0c\u4f46\u662f\u5b8f\u662f\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u66ff\u6362\uff0cinline \u5177\u5907\u8bed\u6cd5\u68c0\u67e5\u7684\u529f\u80fd</li> <li><code>inline</code> \u51fd\u6570\u7684\u5b9a\u4e49\u8981\u653e\u5728\u5934\u6587\u4ef6\u91cc\uff0c\u5426\u5219\u7f16\u8bd1\u5668\u65e0\u6cd5\u5bf9\u9f50\u5c55\u5f00</li> <li>\u53ef\u80fd\u4e0d\u4f1a\u5728 .obj \u6587\u4ef6\u4e2d\u4ea7\u751f\u4efb\u4f55\u4ee3\u7801</li> <li><code>inline</code> \u4f1a\u6709\u7c7b\u578b\u8f6c\u6362\u548c\u8fd4\u56de\u503c</li> </ul> <p>\u5b8f\u548c inline<pre><code>\n</code></pre> * \u51fd\u6570\u5199\u5728 class \u58f0\u660e\u91cc\uff0c\u8ba4\u4e3a\u662f <code>inline</code> * \u5982\u679c\u60f3\u8fd9\u4e48\u5e72\uff0c\u53ef\u4ee5\u5728\u7c7b\u5916\u9762\u8fd9\u4e48\u5199\uff0c\u4fbf\u4e8e\u770b\u6e05\u7c7b\u7684\u63a5\u53e3</p>"},{"location":"oop/oop3/#_2","title":"\u7ee7\u627f","text":"<p>\u7ee7\u627f\u7684\u76ee\u7684\uff1a\u5c06\u5b50\u7c7b\u7684\u5171\u6027\u63d0\u53d6\u4e3a\u7236\u7c7b\uff0c\u4f7f\u5f97\u7236\u7c7b\u7684\u4ee3\u7801\u53ef\u4ee5\u91cd\u7528</p> <p>\u5b50\u7c7b\u5177\u6709\u7236\u7c7b\u7684\u6240\u6709\u63a5\u53e3\uff08\u521b\u5efa\u65f6\u4f1a\u590d\u5236\u4e00\u4efd\uff09</p> \u7ee7\u627f\u7684\u4ee3\u7801\u793a\u4f8b<pre><code>class Item\n{\n\n}\n\nclass CD: public Item// \u7ee7\u627f\u6807\u8bc6\n{\n\n}\n</code></pre> <ul> <li> <p>public \u548c protect</p> <ul> <li>protect\uff1a\u5b50\u7c7b\u53ef\u89c1\uff0c\u5ba2\u6237\u4e0d\u53ef\u89c1</li> </ul> </li> <li> <p>\u7236\u7c7b\u9700\u8981\u5148\u6784\u9020\uff08\u4e0d\u52a0\u53c2\u5219\u8c03\u7528\u7f3a\u7701\u6784\u9020\u51fd\u6570\uff09</p> </li> <li> <p>\u6790\u6784\u5148\u8c03\u7528\u5b50\u7c7b</p> </li> <li> <p>\u8f93\u5165\u8f93\u51fa\u6d41\u53ef\u4ee5\u4f5c\u4e3a\u65b9\u6cd5\u7684\u53c2\u6570</p> </li> </ul> \u8f93\u5165\u8f93\u51fa\u6d41\u4f5c\u4e3a\u53c2\u6570<pre><code>inline void Employee::print(std::ostream&amp; out) const\n</code></pre> <p>\u5b50\u7c7b\u7684\u540c\u540d\u51fd\u6570\u4f1a\u8986\u76d6\u7236\u7c7b\u7684\u51fd\u6570\uff08overwrite\uff09</p> <ul> <li>Upcasting</li> </ul> Upcast example<pre><code>Manager pete(\"Pete\",\"444-55-6666\",\"Bakery\");\nEmployee* ep=&amp;pete;// \u7c7b\u578b\u4e22\u5931\n</code></pre>"},{"location":"oop/oop3/#c-standard-library","title":"C++ Standard Library","text":""},{"location":"oop/oop3/#vector-class","title":"Vector Class","text":"vector \u7c7b\u7684\u4f7f\u7528\u4f8b\u5b50<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main() {\n    std::vector&lt;int&gt; numbers; // \u9700\u8981 std \u547d\u540d\u7a7a\u95f4\n    // \u4e0d\u9700\u8981\u62c5\u5fc3 size\n\n    // Add elements to the vector\n    numbers.push_back(10);\n    numbers.push_back(20);\n    numbers.push_back(30);\n\n    // \u53ef\u4ee5\u7528\u6807\u53f7\u8bbf\u95ee\n    std::cout &lt;&lt; \"First element: \" &lt;&lt; numbers[0] &lt;&lt; std::endl;\n\n    // \u8fed\u4ee3\u5668\u8bbf\u95ee\uff08\u4e0e\u64cd\u4f5c\u7b26\u91cd\u8f7d\u6709\u5173\uff09\n    vector&lt;int&gt;::iterator p;\n    for(p=numbers.begin();p&lt;=numbers.end();p++){\n        // \u8bbf\u95ee\u6bcf\u4e2a\u5143\u7d20\n    }\n    return 0;\n}\n</code></pre> <ul> <li>Constructors: <code>vector&lt;Elem&gt; c;</code> <code>vector&lt;Elem&gt; c1(c2);</code></li> <li>Add/Remove/Find: <code>V.find(...)</code> - \u8fd4\u56de\u8fed\u4ee3\u5668\u7c7b\u578b</li> </ul>"},{"location":"oop/oop3/#list-class","title":"List Class","text":""},{"location":"oop/oop3/#map","title":"Map","text":"<p>\u76f8\u5f53\u4e8e python \u7684\u5b57\u5178\uff0c\u7531 key \u548c value \u7ec4\u6210</p>"},{"location":"oop/oop3/#_3","title":"\u8fed\u4ee3\u5668","text":"<ul> <li>Declaring: <code>list&lt;int&gt;::iterator li</code></li> <li>\u53ef\u4ee5\u81ea\u589e <code>i++</code> - \u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20</li> <li>*li\uff1a\u53d6\u51fa\u6307\u5411\u7684\u503c\uff0c\u53ef\u4fee\u6539</li> </ul> <p>Algorithms \u63a5\u53d7\u8fed\u4ee3\u5668\u800c\u4e0d\u662f\u4e0d\u540c\u7684\u7c7b\u2014\u2014\u53ef\u6269\u5c55\u6027</p> <pre><code>list&lt;int&gt; L;\nvector&lt;int&gt; V;\n// \u5c06 list \u62f7\u8d1d\u5230 vector \u4e2d\ncopy(L.begin(),L.end(),V.begin);\n</code></pre> <p>\u7b80\u5316\u65b9\u5f0f\uff1atypedef \u5c06\u6a21\u677f\u7c7b\u578b\u7f29\u5199</p>"},{"location":"oop/oop3/#overloading-operators","title":"Overloading Operators","text":"<p>\u53e6\u5916\u4e00\u79cd\u51fd\u6570\u5f62\u5f0f</p> <ul> <li> <p>\u5927\u90e8\u5206\u64cd\u4f5c\u7b26\u53ef\u91cd\u8f7d</p> </li> <li> <p>\u4e0d\u53ef\u88ab\u91cd\u8f7d\uff1a</p> </li> </ul> <p>Restriction</p> <ul> <li>\u53ea\u6709\u73b0\u5b58\u7684\u64cd\u4f5c\u7b26\u80fd\u91cd\u8f7d</li> <li>\u64cd\u4f5c\u6570\u7684\u6570\u91cf\u548c\u4f18\u5148\u7ea7\u4e0d\u53d8</li> </ul> <p>\u5982\u4f55\u91cd\u8f7d\uff1a</p> <ul> <li> <p>\u5173\u952e\u5b57 <code>operator</code></p> </li> <li> <p>\u4e3a\u4ec0\u4e48\u7528 const</p> </li> </ul> \u91cd\u8f7d\u52a0\u53f7<pre><code>// \u7c7b\u5185\nconst String String::operator +(const String&amp; that){\n    // \u9690\u5f0f\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\uff1a\u8c03\u7528 \"+\" \u7684\u5f53\u524d\u7c7b\u7684\u5bf9\u8c61\n}\n\n// \u51fd\u6570\uff08\u5fc5\u987b\u663e\u5f0f\u7684\u4e24\u4e2a\u64cd\u4f5c\u6570\uff09\nconst String operator+(const String&amp; str1,const String&amp; str2){\n\n}\n</code></pre> <pre><code>Integer x(1),y(5),z;\nx + y; // x.operator+(y)\nz = x + y;// \u5408\u6cd5\nz = x + 3;// 3 \u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u8f6c\u5316\u6210 Integer\uff0c\u5408\u6cd5\nz = 3 + y;// \u4e0d\u5408\u6cd5\n</code></pre> <pre><code>\n</code></pre>"}]}