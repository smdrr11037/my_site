{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>\u8fd9\u91cc\u662f\u751f\u547d\u7684\u8089\u8089\u7684\u7b14\u8bb0\u672c</p> <p>\u7f51\u7ad9\u7684\u76ee\u7684\u5176\u5b9e\u662f\u8ba9\u672c\u4eba\u80fd\u591f\u65b9\u4fbf\u5730\u67e5\u770b\u7b14\u8bb0</p> <p>\u4f1a\u653e\u6b63\u5728\u5b66\u4e60\u7684\u8bfe\u7a0b\u7684\u8bb0\u5f55</p> <p>\u672c\u7f51\u7ad9\u6bd4\u8f83\u7b80\u964b\uff08\u4f46\u770b\u7b14\u8bb0\u7684\u76ee\u7684\u5176\u5b9e\u5b8c\u5168\u80fd\u591f\u6ee1\u8db3\u4e86\ud83d\ude04</p> <p>\u5148\u7528\u4e00\u4e2a\u9ed8\u8ba4\u7684\u4e3b\u9898</p> <p>\u5b66\u597d\u524d\u7aef\u540e\u4e00\u5b9a\u8981\u5efa\u4e00\u4e2a\u6f02\u4eae\u7684\u4e2a\u4eba\u4e3b\u9875\ud83d\ude24</p>"},{"location":"memoire/","title":"\u5907\u5fd8\u5f55","text":"<p>\u51fa\u73b0\u5947\u602abug\u7684\u65f6\u5019\uff08\u7279\u522b\u662f\u51e0\u5929\u524d\u8fd8\u597d\u7684\u65f6\u5019</p> <p>\u8bb0\u5f97\u66f4\u65b0<code>sudo apt update &amp;&amp; sudo apt upgrade</code></p>"},{"location":"memoire/#mkdocs","title":"MkDocs","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy</code> - Refreash the project online.</li> </ul>"},{"location":"memoire/#ufw","title":"ufw","text":"<ul> <li><code>sudo ufw status</code> - \u67e5\u770b\u9632\u706b\u5899\u72b6\u6001</li> <li><code>sudo ufw enable</code> - \u5f00\u542f\u9632\u706b\u5899 \uff08\u62d2\u7edd\u4f20\u5165\uff0c\u5141\u8bb8\u4f20\u51fa\uff09</li> <li><code>sudo ufw disable</code> - \u5173\u95ed\u9632\u706b\u5899</li> <li><code>sudo systemctl stop ufw</code> <code>sudo systemctl disable ufw</code> - \u6c38\u4e45\u5173\u95ed\u9632\u706b\u5899</li> </ul>"},{"location":"memoire/#_2","title":"\u91cd\u5b9a\u5411","text":"<ul> <li><code>./your_program &lt; input.txt</code> - \u7528input.txt\u91cd\u5b9a\u5411\u4e3a\u7a0b\u5e8f\u7684\u8f93\u5165</li> </ul>"},{"location":"memoire/#_3","title":"\u4e0b\u8f7d\u3001\u89e3\u538b\u6587\u4ef6","text":"<ul> <li><code>wget http://www.diag.uniroma1.it/challenge9/code/ch9-1.1.tar.gz</code> - \u4e0b\u8f7d\u6587\u4ef6</li> <li><code>tar -zxvf ch9-1.1.tar.gz</code> - \u89e3\u538b\u6587\u4ef6 </li> </ul>"},{"location":"CO/CO/","title":"Chapter 1\u30013","text":"<ul> <li> <p>\u52a9\u6559\uff1a\u79e6\u5609\u4fca\u3001\u90ed\u5bb6\u8c6a</p> </li> <li> <p>\u6210\u7ee9\u6784\u6210   </p> </li> </ul>"},{"location":"CO/CO/#chapter-1-introduction","title":"Chapter 1: Introduction","text":""},{"location":"CO/CO/#0","title":"0. \u5386\u53f2","text":"<ul> <li> <p>\u7b2c\u4e00\u53f0\u53ef\u7f16\u7a0b\u7535\u5b50\u8ba1\u7b97\u673a\uff1aENIAC</p> <ul> <li> <p>10\u8fdb\u5236</p> </li> <li> <p>\u901a\u8fc7\u5f00\u5173\u7f16\u7a0b</p> </li> <li> <p>\u65e0\u5b58\u50a8\u90e8\u5206</p> </li> </ul> </li> <li> <p>\u51af\u00b7\u8bfa\u4f0a\u66fc\u7684\u8ba1\u7b97\u673a\u8bbe\u8ba1\u7406\u8bba\u2014\u2014\u4e94\u4e2a\u57fa\u672c\u90e8\u5206   </p> </li> <li> <p>\u5f97\u5230EDSAC\u2014\u2014\u6709\u5b58\u50a8\u90e8\u5206\u7684\u8ba1\u7b97\u673a</p> </li> </ul> <p>\u51e0\u4ee3\u8ba1\u7b97\u673a\u7684\u6f14\u53d8\uff1a</p> <ul> <li> <p>1~4\u4ee3\uff1a\u771f\u7a7a\u7ba1-&gt;\u6676\u4f53\u7ba1-&gt;\u96c6\u6210\u7535\u8def-&gt;\u5927\u89c4\u6a21\u96c6\u6210\u7535\u8def</p> </li> <li> <p>\u7b2c5\u4ee3\uff1a</p> </li> <li> <p>\u6700\u65b0\uff1a</p> <ul> <li> <p>RISC\uff1a\u7cbe\u7b80\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a\u2014\u2014CPU\u5904\u7406\u7b80\u5355</p> <ul> <li> <p>RISC-5</p> </li> <li> <p>MIPS</p> </li> </ul> </li> <li> <p>CISC\uff1a\u590d\u6742\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a\u2014\u2014\u6307\u4ee4\u6761\u6570\u5c11</p> </li> <li> <p>80x86</p> </li> </ul> </li> </ul>"},{"location":"CO/CO/#1","title":"1. \u4ecb\u7ecd","text":"<ul> <li> <p>\u53d1\u5c55\u8fdb\u5c55\u2014\u2014\u6469\u5c14\u5b9a\u5f8b</p> </li> <li> <p>\u5e94\u7528</p> <ul> <li> <p>\u624b\u673a</p> </li> <li> <p>\u4e07\u7ef4\u7f51</p> </li> <li> <p>......</p> </li> </ul> </li> </ul>"},{"location":"CO/CO/#2-eight-great-ideas","title":"2. Eight Great Ideas","text":"<ol> <li> <p>\u6469\u5c14\u5b9a\u5f8b</p> </li> <li> <p>\u62bd\u8c61\u5316   </p> </li> <li> <p>Make common case fast</p> </li> <li> <p>......</p> </li> <li> <p>\u5c42\u6b21\u5b58\u50a8\u2014\u2014\u53c8\u5927\u53c8\u5feb</p> </li> <li> <p>\u53ef\u9760\u6027\u2014\u2014\u5907\u4efd</p> </li> </ol>"},{"location":"CO/CO/#4","title":"4. \u786c\u4ef6\u7cfb\u7edf","text":"<ul> <li> <p>\u663e\u793a</p> </li> <li> <p>\u4e3b\u677f</p> </li> <li> <p>CPU\u91cc\uff1a</p> <ul> <li> <p>DataPath</p> </li> <li> <p>Control</p> </li> <li> <p>cache memory \u2014\u2014SRAM\u9759\u6001\u5b58\u50a8\uff0c\u9020\u4ef7\u9ad8</p> </li> </ul> </li> <li> <p>Memory</p> </li> <li> <p>Network</p> </li> </ul>"},{"location":"CO/CO/#6-performence","title":"6. Performence","text":"<ul> <li> <p>Response time\uff1a\u5b8c\u6210\u4e00\u4e2atask\u9700\u8981\u7684\u65f6\u95f4</p> </li> <li> <p>Throughput\uff1a\u5355\u4f4d\u65f6\u95f4\u5b8c\u6210\u7684\u4efb\u52a1\u6570</p> </li> <li> <p>\u201cX is n time faster than Y\u201d\uff1a Y \u6240\u7528\u65f6\u95f4\u662f X \u7684 n \u500d</p> </li> <li> <p>CPU time = \u65f6\u949f\u5468\u671f\u6570 \\(\\times\\) \u4e00\u4e2a\u5468\u671f\u957f\u5ea6</p> </li> <li> <p>\u5c06\u4e00\u4e2a\u6307\u4ee4\u5206\u6210\u51e0\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u4e00\u4e2a\u5468\u671f(CPI = Cycle per Instruction)</p> </li> <li> <p>\u5219 </p> </li> </ul> \\[ CPU\\ time = \u6307\u4ee4\u6570 \\times CPI \\times \u4e00\u4e2a\u5468\u671f\u957f\u5ea6  \\] \\[ = \\frac{\u6307\u4ee4\u6570 \\times CPI}{\u65f6\u949f\u9891\u7387} \\]"},{"location":"CO/CO/#7","title":"7. \u4e0d\u53ef\u80fd\u7684\u6027\u80fd\u63d0\u5347","text":"<ul> <li> <p>Power Wall\uff1a\u63d0\u5347\u6027\u80fd\u8017\u80fd\u5de8\u5927\uff0c\u6e29\u5ea6\u9ad8</p> </li> <li> <p>Memory Wall\uff1a\u4e8c\u5c42\u7f13\u51b2\u533aL2 cache\u53d8\u5927\u3001\u8868\u73b0\u53d8\u5dee\uff1bCPU\u6bd4\u5185\u5b58\u5feb\u5f97\u591a</p> </li> <li> <p>ILP Wall\uff1a\u96be\u4ee5\u5e76\u884c\u5904\u7406</p> </li> </ul>"},{"location":"CO/CO/#8-multiprocessors","title":"8. Multiprocessors","text":"<ul> <li> <p>\u786c\u4ef6\u4e0a\u7684\u5e76\u884c\uff1a\u591a\u6838</p> </li> <li> <p>Amdahl's Law:   $$   T_{improved}=\\frac{T_{affected}}{improvement \\ t \\ factor}+T_{unaffected}   $$</p> <ul> <li> <p>make common cases fast</p> </li> </ul> </li> <li> <p>MIPS as a Performance Metric</p> <ul> <li> <p>millions of instructions per second</p> </li> <li> <p>\u4e0d\u80fd\u7cbe\u786e\u53cd\u6620CPU\u6027\u80fd</p> </li> <li> <p>\u56e0\u4e3a\u6307\u4ee4\u6240\u5360\u5468\u671f\u6570\u4e0d\u540c</p> </li> </ul> </li> </ul> <p>assignment:1-1, 1-2, 1-4, 1-6, 1-7, 1-14</p>"},{"location":"CO/CO/#chapter-3-arithmetic-for-computer","title":"Chapter 3: Arithmetic for Computer","text":""},{"location":"CO/CO/#31-introduction","title":"3.1 Introduction","text":"<ul> <li> <p>\u8bfb\u3001\u5199\u5185\u5b58\uff1a</p> <ul> <li> <p>lw, sw: load word, \u8bfb\u53d632\u4f4d\u957f\u5ea6\u7684\u5185\u5b58</p> </li> <li> <p>ld, sd: load double word, 64\u4f4d</p> </li> <li> <p>lb, sb: load byte, \u4e00\u4e2a\u5b57\u8282</p> </li> <li> <p>\u6839\u636e\u8d77\u59cb\u5730\u5740\u8bfb\u53d6\u4e0d\u540c\u957f\u5ea6\u7684\u5185\u5bb9</p> </li> </ul> </li> <li> <p>ALU\u76f8\u5173\uff1a</p> <ul> <li>slt x1 x2,x3: set if less than, x1=(x2&lt;x3)</li> </ul> </li> <li> <p>\u5206\u652f\u8df3\u8f6c\u6307\u4ee4\uff1a</p> <ul> <li>beq, bne, jal: \u6709\u6761\u4ef6/\u65e0\u6761\u4ef6\u8df3\u8f6c</li> </ul> </li> </ul>"},{"location":"CO/CO/#32-possible-representation","title":"3.2 Possible representation","text":"<p>\u5df2\u7ecf\u4e86\u89e3\u76841's\u30012's\u6570\u7565</p> <ul> <li> <p>2's Biased notation</p> <ul> <li> <p>\\(= 2's complement + 2^n\\)</p> </li> <li> <p>\u6700\u5c0f\uff1a\\(-2^n\\)\uff0c\u8868\u793a\u4e3a000000000000\u00b7\u00b7\u00b7</p> </li> <li> <p>\u6700\u5927\uff1a\\(2^n\\)\uff0c11111111111\u00b7\u00b7\u00b7\u00b7</p> </li> <li> <p>\u4fbf\u4e8e\u6bd4\u8f83\u5927\u5c0f\uff08\u76f8\u5f53\u4e8e\u65e0\u7b26\u53f7\u6570\uff09</p> </li> </ul> </li> </ul>"},{"location":"CO/CO/#33-arithmetic","title":"3.3 Arithmetic","text":"<ul> <li> <p>Overflow\uff1a\u6ea2\u51fa\u5224\u65ad</p> <ul> <li> <p>\\(V = C_n \\oplus C_{n-1}\\)</p> </li> <li> <p>\u7b26\u53f7\u4f4d\u662f\u5426\u8fdb\u4f4d\u3001\u6700\u9ad8\u6570\u503c\u4f4d\u662f\u5426\u8fdb\u4f4d</p> </li> </ul> </li> </ul>"},{"location":"CO/CO/#34-multiplication","title":"3.4 Multiplication","text":"<p>\u7531\u79fb\u4f4d\u548c\u52a0\u6cd5\u7ec4\u6210</p> <ul> <li> <p>\u4e3a\u65b9\u4fbf\u8bf4\u660e\uff0c\u7ad6\u5f0f\u4e0a\u65b9\u7684\u662f\u88ab\u4e58\u6570\uff0c\u4e0b\u65b9\u662f\u4e58\u6570</p> </li> <li> <p>\u4e58\u6570\u662f1\uff1a\u88ab\u4e58\u6570\u79fb\u4f4d\u3001\u52a0\u5230\u7ed3\u679c\u4e2d</p> </li> <li> <p>\u4e58\u6570\u662f0\uff1a\u88ab\u4e58\u6570\u79fb\u4f4d\u3001add 0  \\(4\\times 4\\) =&gt;8\u4f4d\u52a0\u6cd5\u5668</p> </li> <li> <p>\u5927\u4e14\u6162\uff1a\\(64\\times64\\)=&gt;128\u4f4d\u52a0\u6cd5\u5668\u752864\u6b21</p> </li> </ul> <p>\u6539\u8fdb\uff1a</p> <ul> <li> <p>\u4e0d\u79fb\u88ab\u4e58\u6570\uff0c\u800c\u662f\u53f3\u79fb\u57fa\uff08\u5f97\u6570\uff09\uff0c\u56e0\u4e3a\u4f4e\u4f4d\u4e0d\u53c2\u4e0e\u540e\u7eed\u8fd0\u7b97</p> </li> <li> <p>\u52a0\u6cd5\u5668\u4f4d\u6570\u51cf\u534a </p> </li> </ul> <p>\u8fdb\u4e00\u6b65\uff1a\u5c06\u4e58\u6570\u653e\u5728\u57fa\u4e2d </p> <p>\u4e58\u6cd5\u4e0d\u80fd\u7528\u8865\u7801</p> <ul> <li> <p>\u6709\u7b26\u53f7\u6570\u7684\u4e58\u6cd5</p> <ul> <li> <p>\u5c06\u7b26\u53f7\u4fdd\u5b58</p> </li> <li> <p>\u8f6c\u6362\u4e3a\u7edd\u5bf9\u503c</p> </li> <li> <p>\u540c\u53f7\u4e3a\u6b63\uff0c\u5f02\u53f7\u4e3a\u8d1f</p> </li> </ul> </li> </ul> <p>Booth's Algorithm \uff1f</p> <ul> <li>\u4e0d\u592a\u61c2\u8fd9\u4e2a\uff0c\u653e\u51e0\u5f20\u56fe\uff0c\u4e0d\u8003\u5c31\u4e0d\u89e3\u91ca\u4e86  </li> <li>\u9ed8\u8ba4\\(C_{-1}\\)=0  </li> </ul> <p>\u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a \u7528\u591a\u4e2aALU\u5e76\u884c\u5b9e\u73b0</p>"},{"location":"CO/CO/#35-divide","title":"3.5 Divide","text":"<p>\u9664\u6cd5\u5b9e\u73b0\u57fa\u672c\u601d\u60f3\uff1a</p> <ol> <li> <p>\u5c06\u88ab\u9664\u6570\u6bcf\u6b21\u5de6\u79fb\uff0c\u51cf\u6389\u9664\u6570</p> </li> <li> <p>\u5982\u679c\u7ed3\u679c\u5927\u4e8e\u7b49\u4e8e0\uff0c\u5219\u6709\u6548\uff0c\u5728\u5546\u4e0a\u52a0\u4e00\u4e2a1</p> </li> <li> <p>\u5426\u5219\u65e0\u6548\uff0c\u5c06\u9664\u6570\u52a0\u56de\u53bb\uff0c\u5728\u5546\u4e0a\u52a0\u4e00\u4e2a0</p> </li> <li> <p>\u9700\u8981\u8fed\u4ee365\u6b21\uff0864\u4f4d\uff09     </p> </li> </ol> <p>\u5177\u4f53\u5b9e\u73b0\uff1a</p> <p>\u9664\u6570\u653e\u5728\u9ad8\u4f4d\uff0c\u88ab\u9664\u6570\u653e\u5728\u4f4e\u4f4d\uff0c\u6bcf\u6b21\u53f3\u79fb\u9664\u6570   </p> <p>\u6539\u8fdb\uff1a\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\u3002</p> <p>\u5c06\u88ab\u9664\u6570\u5de6\u79fb\uff0c\u79fb\u51fa\u6765\u7684\u4f4d\u7f6e\u653e\u5546\uff0c\u9ad8\u4f4d\u51cf\u5269\u4e0b\u6765\u7684\u662f\u4f59\u6570\uff0c\u4f1a\u591a\u79fb\u4e00\u4f4d\u3002\u56e0\u6b64\u6700\u540e\u8981\u628a\u9ad8\u4f4d\u53f3\u79fb\u4e00\u4f4d </p> <ul> <li> <p>\u7b26\u53f7\u7ea6\u5b9a\uff1a\u4f59\u6570\u548c\u88ab\u9664\u6570\u7b26\u53f7\u4e00\u81f4</p> </li> <li> <p>\u8f6f\u4ef6\u68c0\u67e5\u9664\u6570\u662f\u5426\u4e3a0\uff08\u5904\u7406\u5668\u4e0d\u7ba1\uff09</p> </li> </ul>"},{"location":"CO/CO/#36-float","title":"3.6 Float","text":"<ul> <li> <p>Bias: single\u2014\u2014127, double\u2014\u20141023</p> </li> <li> <p>1\u662f\u9690\u542b\u7684\uff08\u79d1\u5b66\u8ba1\u6570\u6cd5\uff09</p> </li> </ul> <p>\u4f8b\uff1a\\(15=1111=1.111\\times2^3\\)</p> <p>float: 0 10000010 111000...</p> <p>(Exponet = 3+127 = 130)</p> <p> \u5927\u7ea6\u76f8\u5f53\u4e8e6\u4f4d\u5341\u8fdb\u5236\u5c0f\u6570\u7cbe\u5ea6 </p> <ul> <li> <p>Exponent=00...0\u2014\u2014\u9690\u542b\u7684\u9996\u4f4d\u662f0</p> </li> <li> <p>0 00...0 00...0 =    </p> </li> </ul> <p>\u5982\u4f55\u8fdb\u884c\u8fd0\u7b97\uff1a</p> <ul> <li> <p>\u52a0\u6cd5</p> <ol> <li> <p>Alignment\uff08\u5bf9\u9f50\uff09</p> </li> <li> <p>The proper digits have to be added\uff08\u5c0f\u7684\u5f80\u5927\u7684\u9760\uff09</p> </li> <li> <p>Addition of significands</p> </li> <li> <p>Normalization of the result\uff08\u5f52\u4e00\u5316\uff09</p> </li> <li> <p>Rounding\uff08\u820d\u5165\uff0c\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u5f52\u4e00\u5316\uff09</p> </li> </ol> </li> </ul> <p></p> <ul> <li>\u4e58\u6cd5\uff1a</li> </ul> <p></p> <ul> <li>\u6307\u6570\u76f8\u52a0\uff0c\u8fd8\u8981\u51cf\u53bb127\uff08bias\uff09 </li> </ul> <p>Accurate Arithmeticd</p> <ul> <li> <p>\u4e3a\u63d0\u5347\u7cbe\u5ea6\uff0c\u6700\u591a\u52a0\u4e09\u4f4d(guard, round, sticky)</p> <ul> <li> <p>guard\u4f4d\u548cround\uff1a\u5728\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u591a\u4fdd\u7559\u4e24\u4f4d</p> </li> <li> <p>sticky\u4f4d\uff1a\u5728\u7ed3\u679c\u4f4d\u7684\u53f3\u8fb9\u5982\u6709\u4e0d\u4e3a0\u7684bit\uff0c\u5219\u4e3a1</p> <ul> <li>\u53ef\u4ee5\u5206\u8fa80.500000...0\u548c0.500000...1</li> </ul> </li> </ul> </li> </ul> <p>round\u65b9\u5f0f\u662f\u53ef\u9009\u7684</p>"},{"location":"CO/CO_2/","title":"Chapter 2","text":""},{"location":"CO/CO_2/#25-representing-instruncrions-in-the-computer","title":"2.5 Representing Instruncrions in the computer","text":"<ul> <li>\u9ad8\u7ea7\u6307\u4ee4-&gt;\u6c47\u7f16\u6307\u4ee4-&gt;\u673a\u5668\u7801</li> </ul>"},{"location":"CO/CO_2/#26-logical-operations","title":"2.6 Logical Operations","text":"<p>\u79fb\u4f4d\u3001\u4e0e\u3001\u6216\u3001\u5f02\u6216\u3001\u975e</p>"},{"location":"CO/CO_2/#27-instruction-for-making-decision","title":"2.7 Instruction for making decision","text":"<p>\u5206\u652f\u8df3\u8f6c</p> <p>\u5faa\u73af <pre><code>LOOP:   slli    x10,x22,\n</code></pre></p> <p>\u5176\u4ed6\u7684\u6761\u4ef6\u8df3\u8f6c\uff08\u6709\u7b26\u53f7\u6570\u7684\u6bd4\u8f83\uff09\uff1a</p> <ul> <li> <p><code>blt rs1, rs2, L1</code></p> <p>\u5982\u679crs1&lt;rs2\uff0c\u8df3\u8f6c\u5230Lable L1\u5904</p> </li> <li> <p><code>bge rs1, rs2, L1</code></p> <p>\u5982\u679crs1&gt;=rs2\uff0c\u8df3\u8f6c\u5230Lable L1\u5904</p> </li> <li> <p><code>slt x2, x3, x4</code></p> <p>set on less than\u2014\u2014\u5982\u679cx3&lt;x4\uff0c\u5c06x2\u8bbe\u4e3a1</p> </li> </ul> <p>\u65e0\u7b26\u53f7\u6570\u6bd4\u8f83\u7684\u6307\u4ee4\uff1abltu, bgeu </p> <ul> <li><code>bgeu x20, x11, Outbound</code></li> </ul> <p>Case/Switch</p> <ul> <li>\u5206\u652f\u8bed\u53e5\u5728memory\u4e2d\u50cf\u6570\u7ec4\u4e00\u6837\u8fde\u7eed\u5b58\u50a8</li> <li>\u6839\u636e\u504f\u79fb\u91cf\u8bbf\u95ee</li> </ul>"},{"location":"CO/CO_2/#28-supporting-procedures-in-conputer-hardware","title":"2.8 Supporting Procedures in Conputer Hardware","text":"<p>\u8fc7\u7a0b\u8c03\u7528</p> <p>\u9700\u8981\u7528\u66f4\u591a\u7684\u5bc4\u5b58\u5668</p> <ul> <li> <p>\u8fc7\u7a0b\u8c03\u7528\u4e2d\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\uff1a</p> <ul> <li>x10~x17\uff1a\u4f20\u9012\u53c2\u6570\u548c\u8fd4\u56de\u7ed3\u679c\u76848\u4e2a\u5bc4\u5b58\u5668</li> <li>x1\uff1a\u8bb0\u5f55return\u5730\u5740\u7684\u5bc4\u5b58\u5668</li> </ul> </li> <li> <p>Stack</p> <ul> <li>push\uff1asp=sp-8</li> <li>pop\uff1asp=sp+8</li> </ul> </li> </ul> <p>Leaf procedure\uff1a\u4e0d\u4f1a\u8c03\u7528\u522b\u7684\u8fc7\u7a0b\u7684\u8fc7\u7a0b</p> <ul> <li>\u628a\u8981\u7528\u7684\u5bc4\u5b58\u5668\u5b58\u5230\u6808\u4e2d\uff0c\u7528\u5b8c\u540e\u518dld\u56de\u6765</li> </ul> <p><pre><code>leaf_example\n</code></pre> Register Usage</p> <ul> <li>x5-x7\uff0cx28-x31\uff1atemporary register\uff08\u968f\u4fbf\u7528\uff09</li> <li>x8-x9\uff0cx18-x27\uff1asaved register\uff08\u9700\u8981\u538b\u6808\uff09</li> </ul> <p>Non-leaf procedure</p> <ul> <li>return\u7684\u5730\u5740\u4f1a\u6539\u53d8</li> </ul> <p>\u9012\u5f52\u4e3a\u4f8b</p> <pre><code>fact: addi  sp,sp,16\n</code></pre>"},{"location":"DailyLife/DailyLife/","title":"DailyLife","text":"<p>\u8fd9\u91cc\u662f\u65e5\u5e38\u751f\u6d3b\u7684\u8bb0\u5f55\ud83d\ude00</p> <p>\u547d\u8fd0\u7684\u9f7f\u8f6e\u5f00\u59cb\u8f6c\u52a8</p>"},{"location":"DailyLife/DailyLife/#wonderful-everyday","title":"Wonderful Everyday\ud83c\udf3b","text":""},{"location":"DailyLife/DailyLife/#20243","title":"2024.3","text":"<p>2024.3.16\u6478\u5230\u7684\u732b </p> <p>\u7ffb\u76f8\u518c\u5c45\u7136\u57282023.9.19\u9047\u5230\u8fc7\uff0c\u62cd\u4e86\u7167\u7247\u5b58\u8d77\u6765 </p> <p>\u8fd8\u53d1\u7ed9lulu\u770b\u4e86</p> <p>\u602a\u4e0d\u5f97\u5979\u8bf4\u6709\u70b9\u773c\u719f</p>"},{"location":"DataBase/DataBase/","title":"\u6570\u636e\u5e93\u7cfb\u7edf - \u4ecb\u7ecd\u548c\u5173\u7cfb\u6a21\u578b","text":"<ul> <li>Database Management System\uff08DBMS\uff09</li> <li>\u6210\u7ee9\u6784\u6210\uff1a    \u8003\u8bd5\u53ef\u5e26A4\u7eb8</li> <li>\u6559\u6750\uff1aDatabase System Concepts (7th Edition)</li> <li>1, 2, 3, 4, 5, 6, 7,      12, 13, 14, 15, 16, 17, 18, 19</li> </ul>"},{"location":"DataBase/DataBase/#lecture-1-introduction","title":"Lecture 1: Introduction","text":""},{"location":"DataBase/DataBase/#purpose","title":"Purpose","text":"<ul> <li>\u6570\u636e\u5e93\uff1a\u957f\u671f\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u5185\u3001\u6709\u7ec4\u7ec7\u7684\u3001\u53ef\u5171\u4eab\u7684\u6570\u636e\u96c6\u5408</li> <li>\u6570\u636e\u5e93\u7cfb\u7edf\uff08DBMS\uff09\uff1a\u6570\u636e\u5e93 + \u53ef\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u7684\u7a0b\u5e8f</li> <li>DBMS\u7684\u7279\u5f81</li> <li>\u6570\u636e\u8bbf\u95ee\u9ad8\u6548\u3001\u7a33\u5b9a\u3001\u53ef\u6269\u5c55</li> <li>\u7f29\u77ed\u5e94\u7528\u7684\u5f00\u53d1\u65f6\u95f4</li> <li>\u6570\u636e\u72ec\u7acb\u6027\uff08physical\u548clogical\uff09</li> <li>\u6570\u636e\u5b8c\u6574\u6027\u548c\u5b89\u5168\u6027</li> <li> <p>\u5e76\u53d1\u8bbf\u95ee\u548c\u9c81\u68d2\u6027\uff08\u6613\u6062\u590d</p> </li> <li> <p>DBMS VS File-Processing System </p> </li> <li>\u6587\u4ef6\u5904\u7406\u7cfb\u7edf\u7531\u4f20\u7edf\u7684\u64cd\u4f5c\u7cfb\u7edf \uff08OS\uff09 \u652f\u6301\u3002</li> </ul>"},{"location":"DataBase/DataBase/#view","title":"View","text":"<ul> <li>\u5982\u679c\u60f3\u8981\u9690\u85cf</li> <li>\u65b0\u5efa\u4e00\u4e2a\u8868\uff1a\u7a7a\u95f4\u3001\u540c\u6b65\u95ee\u9898</li> <li>\u540c\u4e00\u5f20\u8868\u4e0a\u7528\u4e0d\u540c\u7684\u89c6\u56fe</li> </ul>"},{"location":"DataBase/DataBase/#database-langueage","title":"Database Langueage","text":"<ul> <li>Data Definition Language (DDL) </li> <li>Data Manipulation Language (DML) </li> <li>Data Control Language (DCL) </li> <li>SQL = DDL+ DML+DCL </li> </ul>"},{"location":"DataBase/DataBase/#transaction-management","title":"Transaction Management","text":"<ul> <li>\u5e76\u53d1\u8bbf\u95ee\u5e26\u6765\u95ee\u9898</li> <li>\u6570\u636e\u5e93\u4fdd\u8bc1\u539f\u5b50\u6027\u3001\u4e00\u81f4\u6027\u3001\u9694\u79bb\u6027\u3001\u6301\u4e45\u6027</li> </ul>"},{"location":"DataBase/DataBase/#database-architecture","title":"Database Architecture","text":"<ul> <li>Storage Manager </li> <li>Query Processor\uff1a\u63cf\u8ff0\u6027\u8bed\u53e5\u8f6c\u5316\u6210\u64cd\u4f5c </li> <li>Overall System Structure </li> <li>Application Architecture </li> </ul>"},{"location":"DataBase/DataBase/#lecture-2-relational-model","title":"Lecture 2: Relational Model","text":""},{"location":"DataBase/DataBase/#structure-of-relational-databases","title":"Structure of Relational Databases","text":"<p>\u57fa\u672c\u7ed3\u6784\uff1a\u7b1b\u5361\u5c14\u79ef     {width=400px}   * \u53ef\u7528\u4e8c\u7ef4\u8868\u8868\u793a   * \u53cd\u6620\u7279\u5b9a\u610f\u4e49\u7684\u5b50\u96c6\u5c31\u662f\u5173\u7cfb\uff0c\u4f8b\u5982\uff1a   {width=300px} * \u5bfc\u5e08\u2014\u2014\u5c5e\u6027\uff08attribute\uff09   * \u5c5e\u6027\u503c\u2014\u2014\u539f\u5b50\u6027\uff08\u4e0d\u53ef\u5206\u5272\uff09   * \u6240\u6709\u53ef\u53d6\u7684\u503c\u2014\u2014\u57df</p> <p>Key * \u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5173\u7cfb\u4e2d\u53e6\u4e00\u4e2a\u5c5e\u6027\u7684\u503c\u7684\u5c5e\u6027   * \u4f8b\u5982\u77e5\u9053\u5b66\u53f7\u53ef\u4ee5\u786e\u5b9a\u5b66\u751f\uff0c\u5b66\u53f7\u662fkey</p> <ul> <li>Foreign Key\uff08\u5916\u952e\uff09</li> <li>\u5728\u5f53\u524d\u8868\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\uff0c\u4f46\u5728\u53e6\u4e00\u5f20\u8868\u53ef\u4ee5<ul> <li>\u4e13\u4e1a\u53f7\u4e0d\u80fd\u786e\u5b9a\u5b66\u751f\uff0c\u4f46\u5728\u53e6\u4e00\u5f20{\u4e13\u4e1a\u53f7\uff0c\u4e13\u4e1a}\u7684\u8868\u91cc\u53ef\u4ee5\u786e\u5b9a\u4e13\u4e1a</li> </ul> </li> </ul>"},{"location":"DataBase/DataBase/#fundamental-relational-algebra-operations","title":"Fundamental Relational-Algebra Operations","text":"<p>6\u4e2a\u57fa\u672c\u64cd\u4f5c\uff1a\u6536\u52301-2\u4e2a\u8868\uff0c\u8fd4\u56de\u4e00\u4e2a\u8868 * Select      \u9009\u62e9 \uff08\u6a2a\u5411\u5207\u5272\uff09   * \u7b26\u53f7\uff1a$\\sigma_{branch-name=\u2018Perryridge\u2019 }(account) $   * ?: Note that, the selection conditions need to aim at the attribute values of the same tuple, when we conduct section operation. </p> <ul> <li>Project     \u6295\u5f71 \uff08\u7eb5\u5411\u5207\u5272\u2014\u2014\u6ce8\u610f\u76f8\u540c\u7684\u96c6\u5408\u5143\u7d20\u8981\u5408\u5e76\uff09</li> <li>Union       \u5e76 </li> <li>set difference      \u5dee\uff08\u96c6\u5408\u5dee\uff09</li> <li>Cartesian product      \u7b1b\u5361\u513f\u79ef </li> <li>Rename      \u6539\u540d\uff08\u91cd\u547d\u540d\uff09 </li> </ul> <p>Example Queries 5: Find the names of all customers who have a loan at the Perryridge branch. </p> <p>\u65b9\u6cd51\uff1a\uf0d5customer-name(\uf073branch-name=\u2018Perryridge\u2019  (\uf073borrower.loan-number = loan.loan-number(borrower x loan)))  \u65b9\u6cd52\uff1a\uf0d5customer-name(\uf073borrower.loan-number = loan.loan-number  (borrower x (\uf073branch-name=\u2018Perryridge\u2019 (loan))))  * \u9700\u8981\u4e58\u7684\u4e1c\u897f\u66f4\u5c11\uff0c\u8282\u7701\u5f00\u9500</p> <p>Example Queries 7: Find the largest account balance (i.e., self-comparison). </p> <ul> <li>\u6539\u540d\u7684\u7528\u5904</li> </ul>"},{"location":"DataBase/DataBase/#additional-relational-algebra-operations","title":"Additional Relational-Algebra Operations","text":"<p>Four basic operators</p> <ul> <li>Set intersection      \u4ea4    \u53ef\u4ee5\u7528\u5dee\u6765\u8868\u793a\uff1aA \u2229 B = A - (A - B)</li> <li>Natural join            \u81ea\u7136\u8fde\u63a5    \u591a\u4e2a\u8868\u7684\u64cd\u4f5c\u7ecf\u5e38\u7528\u5230</li> </ul> <p>\u7531\u7b1b\u5361\u5c14\u79ef\u548c\u9009\u62e9\u7ec4\u6210   * Notion: \\(\\gamma \\bowtie s\\) </p> <ul> <li>Division                  \u9664   \u7b1b\u5361\u5c14\u79ef\u7684\u9006\u8fd0\u7b97   {width=450px}</li> </ul> <ul> <li>Notion: $ r \\div s$ <p>\u7528\u57fa\u672c\u64cd\u4f5c\u63a8\u5bfc</p> </li> <li>Assignment            \u8d4b\u503c    \\(&lt;-\\)</li> </ul> <p>Summary: * Union, set difference, Set intersection \u4e3a\u53cc\u76ee\u3001\u7b49\u5143\u8fd0\u7b97  * Cartesian product, Natural join, Division \u4e3a\u53cc\u76ee\u8fd0\u7b97  * Project, select \u4e3a\u5355\u76ee\u8fd0\u7b97</p> <ul> <li>\u4f18\u5148\u7ea7\uff1a\u5355\u76ee&gt;\u591a\u76ee\uff0c\u4e58\u9664&gt;\u52a0\u51cf</li> </ul>"},{"location":"DataBase/DataBase/#extended-relational-algebra-operations","title":"Extended Relational-Algebra Operations","text":"<p>Generalized Projection: \u5e7f\u4e49\u6295\u5f71 * \u53ef\u4ee5\u7528\u4ee3\u6570\u8fd0\u7b97\u4ea7\u751f\u4e00\u4e2a\u65b0\u5c5e\u6027</p> <p>Aggregate Functions: \u805a\u5408\u51fd\u6570 * Aggregation function takes a collection of values and returns a single value as a result.  avg: average value  min: minimum value  max: maximum value  sum: sum of values  count: number of values </p> <p>\u5f0f\u5b50\u524d\u9762\u52a0\u5c5e\u6027A\uff1a\u6839\u636e\u5c5e\u6027A\u5206\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u5173\u7cfb</p> <p>E.g., \u6c42\u5e73\u5747\u5b58\u6b3e\u4f59\u989d                 $g_{avg(balance)}(account) $</p>"},{"location":"DataBase/DataBase/#modification-of-the-database","title":"Modification of the Database","text":"<p>\u6570\u636e\u5e93\u66f4\u6539\u64cd\u4f5c: Deletion,  Insertion,  Updating  All these operations are expressed using the assignment operator. </p>"},{"location":"DataBase/DataBase2/","title":"\u6570\u636e\u5e93\u7cfb\u7edf - sql\u8bed\u8a00","text":"<p>Structured Query Language\u2014\u2014\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00 \u4e0e\u56fd\u9645\u6807\u51c6\u4e0d\u540c\u2014\u2014\u6ca1\u4eba\u8981 \u4e0e\u56fd\u9645\u6807\u51c6\u76f8\u540c\u2014\u2014\u6613\u66ff\u4ee3</p>"},{"location":"DataBase/DataBase2/#data-definition-language","title":"Data Definition Language","text":"<p><pre><code>CREATE TABLE branch\n              (branch_name    char(15) not null, \n                branch_city   varchar(30), \n                assets        numeric(8,2),\n                primary key (branch_name)) \n</code></pre> Domain Types:</p> <ul> <li>char(n): Fixed length character string, with user-specified length. </li> <li>varchar(n): Variable length character strings, with user-specified maximum length n. </li> <li>int: Integer (a finite subset of the integers that is machine-dependent). </li> <li>smallint: Small integer (a machine-dependent subset of the integer domain type). </li> <li>numeric(p, d): Fixed point number, with user-specified precision of p digits, with d digits to the right of decimal point. </li> <li>real, double precision: Floating point and double-precision floating point numbers, with machine-dependent precision. </li> </ul> <p>DROP TABLE r\uff1a\u5c06\u6570\u636e\u548c\u8868\u90fd\u5220\u6389</p>"},{"location":"DataBase/DataBase2/#basic-structure","title":"Basic Structure","text":"<p>\u64cd\u4f5c\u7684\u793a\u4f8b\u6570\u636e\u5e93</p> <p><code>loan(loan-number, branch-name, amount)</code></p> <p><code>borrower(customer-name, loan-number)</code></p> <p>The select clause <pre><code>Select branch_name, balance from account  where balance &gt;= 500 \n\nSELECT distinct branch_name FROM loan -- distinct: remove duplicates\nSELECT all branch_name FROM loan -- all: allow duplicates, default \n\nSELECT loan_number  \nFROM loan \nWHERE amount BETWEEN 90000 AND 100000 -- amount &gt;=90000 &amp;&amp; amount &lt;=100000\n</code></pre></p> <p>The where clause </p> <p>The from clause </p> <p>The rename operation  <pre><code>SELECT customer_name, T.loan_number, S.amount \nFROM borrower as T, loan as S -- as: rename\nWHERE T.loan_number = S.loan_number \n-- \u6539\u540d\u8d77\u5230\u7b80\u5316\u4f5c\u7528\n</code></pre> rename \u66f4\u5173\u952e\u7684\u4f5c\u7528\u2014\u2014\u590d\u5236\u4e00\u5f20\u8868\uff0c\u8d77\u6bd4\u8f83\u4f5c\u7528 <pre><code>--Find the names of all branches that have greater assets \n--than some branch located in city Brooklyn.\n\nSELECT distinct T.branch_name\nFROM branch as T, branch as S\nWHERE T.assets &gt; S.assets and S.branch_city = \u2018Brooklyn\u2019 \n</code></pre></p> <p>String operations </p> <ul> <li> <p>\u901a\u914d\u7b26</p> <ul> <li>% --- matches any substring (likes * in the file system). </li> <li>_ --- matches any character (like ? in the file system). </li> </ul> </li> </ul> <pre><code>--Find the names of all customers \n--whose name includes the substring \u201c\u6cfd\u201d. \n\nSELECT customer_name\nFROM customer\nWHERE customer_name LIKE \u2018%\u6cfd%\u2019 \n\n\n--Match the name \u201cMain%\u201d \n\nLIKE \u2018Main\\%\u2019 escape  \u2018\\\u2019\n</code></pre> <p>Ordering the display of tuples  <pre><code>-- List in alphabetic order the names of all \n-- customers having a loan in Perryridge branch. \n\nSELECT distinct customer_name\nFROM borrower A, loan B \nWHERE A.loan_number = B.loan_number and \nbranch_name = \u2018Perryridge\u2019 \norder by customer_name \n</code></pre></p> <p>Duplicates </p>"},{"location":"DataBase/DataBase2/#set-operations","title":"Set Operations","text":"<p>UNION, INTERSECT, and EXCEPT \u5206\u522b\u662f\u5e76\u3001\u4ea4\u3001\u5dee\u96c6</p> <ul> <li> <p>\u4f7f\u7528\u96c6\u5408\u8fd0\u7b97\u7b26\u65f6\uff0c\u81ea\u52a8\u53bb\u91cd</p> </li> <li> <p>\u5982\u679c\u4e0d\u60f3\u53bb\u91cd - UNION ALL, INTERSECT ALL, and EXCEPT ALL.</p> </li> </ul> set op example<pre><code>-- Find all customers who have a loan or an account or both. \n(SELECT customer_name FROM depositor) \nUNION \n(SELECT customer_name FROM borrower) \n\n-- Find all customers who have both a loan and an account. \n(SELECT customer_name FROM depositor) \nINTERSECT \n(SELECT customer_name FROM borrower) \n</code></pre>"},{"location":"DataBase/DataBase2/#aggregate-functions","title":"Aggregate Functions","text":"<p>\u805a\u5408\u51fd\u6570</p> <p><code>account(account-number, branch-name, balance)</code></p> <p><code>depositor(customer-name, account-number)</code></p> <pre><code>-- Find the number of depositors for each branch. \n\n-- \u65e0distinct: \u8d26\u6237\u6570\nSELECT branch_name, count(customer_name) tot_num \nFROM depositor, account \nWHERE depositor.account_number=account.account_number \nGROUP BY branch_name \n\n-- \u6709distinct: \u5ba2\u6237\u6570\uff08\u540c\u4e00\u4e2a\u4eba\u53ef\u80fd\u6709\u591a\u4e2a\u8d26\u6237\uff09\nSELECT branch_name, count(distinct customer_name) as tot_num \nFROM depositor D, account A \nWHERE D.account_number = A.account_number \nGROUP BY branch_name \n</code></pre> <p>Having Clause <pre><code>SELECT A.branch_name, avg(balance) \nFROM account A, branch B \nWHERE A.branch_name = B.branch_name and \n        branch_city =\u2018Brooklyn\u2019 \nGROUP BY A.branch_name \nHAVING avg(balance) &gt; 1200 \n-- Having &amp; where\n-- \u8868\u8c61\uff1ahaving\u540e\u6709\u805a\u5408\u51fd\u6570\uff0c\u5bf9\u805a\u5408\u51fd\u6570\u7684\u7ed3\u679c\u8fdb\u884c\u64cd\u4f5c\n-- \u5b9e\u9645\uff1a\u6267\u884c\u987a\u5e8f\u4e0d\u540c\n</code></pre></p> <p>Summury <pre><code>-- The format of SELECT statement: \n\nSELECT &lt;[DISTINCT] c1, c2, \u2026&gt; \nFROM &lt;r1, \u2026&gt; \n[WHERE &lt;condition&gt;] \n[GROUP BY &lt;c1, c2, \u2026&gt; [HAVING &lt;cond2&gt;]] \n[ORDER BY &lt;c1 [DESC] [, c2 [DESC|ASC], \u2026]&gt;] \n</code></pre></p> <p>\u6267\u884c\u987a\u5e8f:</p> <p>From \u2192 where \u2192 group (aggregate) \u2192 having \u2192 select \u2192 distinct \u2192 order by</p>"},{"location":"DataBase/DataBase2/#null-values","title":"Null Values","text":"<p>\u5f53\u524d\u4e0d\u77e5\u9053\u7684\u503c</p>"},{"location":"DataBase/DataBase2/#nested-subqueries","title":"Nested Subqueries","text":"<p>\u5d4c\u5957\u67e5\u8be2</p> <p>some: \u8868\u4e2d\u67d0\u4e9b\u503c\u7684\u503c <pre><code>--Find all branches that have greater assets \n--than some branch located in Brooklyn. \nSELECT distinct branch_name \nFROM branch \nWHERE assets &gt;  some -- \u5982\u679c\u4e0d\u52a0\uff1aasset&gt;\u8868\uff0c\u65e0\u610f\u4e49\n            (SELECT assets \n            FROM branch \n            WHERE branch_city = \u2018Brooklyn\u2019) \n</code></pre> </p> <p>all: \u8868\u4e2d\u6240\u6709\u7684\u503c</p> <ul> <li>(!=all)=not in</li> <li>(=all)!=in\u2014\u2014\u5fc5\u987b\u662f\u96c6\u5408\u7684\u76f8\u7b49  </li> </ul> <p>\u9664\u6cd5\u7684\u5b9e\u9645\u5199\u6cd5\uff08\u201c\u6240\u6709\u201d\uff09</p> <ul> <li>not exists \u2014\u2014 \u5dee\u96c6\u7ed3\u679c\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u8bf4\u660e\u9664\u5f97\u5c3d <pre><code>SELECT distinct S.customer_name \nFROM depositor as S \nWHERE not exists ( \n                    (SELECT branch_name \n                    FROM branch \n                    WHERE branch_city = \u2018Brooklyn\u2019) \n                    EXCEPT \n                    (SELECT distinct R.branch_name \n                    FROM depositor as T, account as R \n                    WHERE T.account_number = R.account_number \n                    and S.customer_name = T.customer_name)) \n</code></pre></li> </ul>"},{"location":"DataBase/DataBase2/#views","title":"Views","text":"<p>\u4e5f\u662f\u4e00\u5f20\u8868\uff0c\u9690\u85cf\u4e86\u4e00\u4e9b\u4fe1\u606f</p> <pre><code>  CREAT view all_customer as \n         ((SELECT branch_name, customer_name \n          FROM depositor, account \n          WHERE depositor.account_number = account.account_number) \n       union\n          (SELECT branch_name, customer_name \n          FROM borrower, loan \n          WHERE borrower.loan_number = loan.loan_number)) \n</code></pre>"},{"location":"DataBase/DataBase2/#derived-relations","title":"Derived Relations","text":"<p><pre><code>Query 1:  SELECT branch_name, avg_bal \n                 FROM (SELECT branch_name, avg(balance) \n                     FROM account \n                     GROUP BY branch_name) -- \u5148\u5efa\u7acb\u4e00\u4e2a\u672c\u5730\u89c6\u56fe\n                     as result (branch_name, avg_bal) \n                 WHERE avg_bal &gt; 500 \n\nQuery 2:  SELECT branch_name, avg(balance) \n                 FROM account \n                 GROUP BY branch_name \n                 HAVING avg(balance) &gt; 500 \n</code></pre> With Clause</p> <ul> <li>The WITH clause allows views to be defined locally for a query, rather than globally.  <pre><code>      WITH max_balance(value) as \n                SELECT max(balance) \n                FROM account \n      SELECT account_number \n      FROM account, max_balance \n      WHERE account.balance = max_balance.value \n</code></pre></li> <li>\u66f4\u590d\u6742\u7684\u4e00\u4e2a\u4f8b\u5b50 <pre><code>--Find all branches where the total account deposit is greater \n--than the average of the total account deposits at all branches.\n     WITH branch_total(branch_name, a_bra_total) as \n        SELECT branch_name, sum(balance) \n        FROM account \n        GROUP BY branch_name \n     WITH total_avg(value) as \n        SELECT avg(a_bra_total) \n        FROM branch_total \n     SELECT branch_name, a_bra_total \n     FROM branch_total A, total_avg B \n     WHERE A.a_bra_total &gt;= B.value \n</code></pre> \u79bb\u5f00\u8fd9\u6761\u8bed\u53e5\uff0clocal view\u4e0d\u5b58\u5728</li> </ul> <p>Modification of the Database </p> <p>Joined Relations </p>"},{"location":"OC/oc/","title":"OC","text":"<p>\u8fd9\u91cc\u662foc\u5c0f\u6545\u4e8b\u680f\u76ee</p> <p>\u5927\u6982\u662f\u7231\u624b\u827a\u4e16\u754c\u89c2\u4e0b\u7f16\u7684\u5c0f\u4f5c\u6587</p>"},{"location":"ads/ads_part_1/","title":"\u9ad8\u7ea7\u6570\u636e\u4e0e\u7b97\u6cd5\u5206\u6790\u2014\u2014Part 1","text":""},{"location":"ads/ads_part_1/#preparation-before-class","title":"Preparation Before Class","text":"<ul> <li> <p>\u6559\u6750</p> <p>\u6570\u636e\u7ed3\u6784\u6559\u6750</p> <p>introduction to algorithms</p> <p>algorithm design</p> <p>\u6570\u636e\u7ed3\u6784\u5b66\u4e60\u4e0e\u5b9e\u9a8c\u6307\u5bfc</p> </li> <li> <p>\u8bc4\u5206</p> <p>\u4f5c\u4e1a\uff1a10%</p> <p>Discussion\uff1a10%</p> <p>Research Topic\uff1a10%</p> <p>\u671f\u4e2d\uff1a10%\uff08\u53ef\u88ab\u671f\u672b\u8986\u76d6\uff09</p> <p>\u671f\u672b\uff1a40%</p> </li> </ul>"},{"location":"ads/ads_part_1/#avl-trees","title":"AVL Trees","text":"<ul> <li> <p>\u76ee\u6807\uff1a\u52a0\u901f\u67e5\u627e</p> </li> <li> <p>\u65b9\u6cd5\uff1a\u67e5\u627e\u6811</p> <ul> <li> <p>O(height)</p> </li> <li> <p>\u9012\u589e/\u9012\u51cf\u5e8f\u5217\u9000\u5316\u6210\u94fe</p> </li> <li> <p>\u6700\u597d\u60c5\u51b5\uff08\u6811\u6700\u77ee\uff09\uff1a\u6240\u6709\u5b50\u6811\u9ad8\u5ea6\u76f8\u7b49\u2014\u2014\u592a\u82db\u523b</p> </li> </ul> </li> </ul>"},{"location":"ads/ads_part_1/#avl","title":"AVL\u6811\u5b9a\u4e49","text":"<ul> <li> <p>\u7a7a\u6811\u5e73\u8861</p> </li> <li> <p>\u975e\u7a7a\u6811\u5e73\u8861\u5f53\u4e14\u4ec5\u5f53</p> <ul> <li> <p>\u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u90fd\u5e73\u8861</p> </li> <li> <p>\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u5c0f\u4e8e\u7b49\u4e8e1</p> </li> </ul> </li> <li> <p>\u5e73\u8861\u56e0\u5b50BF\uff08node\uff09=\u5de6\u5b50\u6811\u9ad8\u5ea6-\u53f3\u5b50\u6811\u9ad8\u5ea6</p> <ul> <li>AVL\u53ea\u80fd\u53d6-1\uff0c0\uff0c1</li> </ul> </li> </ul> <p>\u672c\u8bfe\u4e2d\u5b9a\u4e49\u7a7a\u6811\u9ad8\u5ea6\u4e3a-1</p> <p>\u51e0\u4e2a\u4f8b\u5b50\uff1a  </p> <p>\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6027\u8d28\u8f83\u597d\u7684\u6811</p>"},{"location":"ads/ads_part_1/#avl_1","title":"\u5982\u4f55\u5f97\u5230AVL\u6811","text":"<ul> <li>\u6811\u7684\u65cb\u8f6c  B\u9ad8\u5ea6\u589e\u52a01\uff0cA\u9ad8\u5ea6\u51cf\u5c111\u3002\u590d\u6742\u5ea6\u4e3a\\(O(1)\\)\uff0c\u4ee3\u7801\u5982\u4e0b <pre><code>typedef struct Node *Tree;\nstruct Node\n{\n    ElementType Element;\n    Tree Left;\n    Tree Right;\n}\n\nA-&gt;Left=B-&gt;Right;\nB-&gt;Right=A;\nreturn B;//\u65b0\u6839\n</code></pre></li> </ul> <p>AVL\u6811\u7684\u63d2\u5165\uff1a</p> <p>\u6bcf\u63d2\u5165\u4e00\u4e2a\u65b0\u7ed3\u70b9\uff0c\u8bb0\u5f55\uff08\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\uff09\u9ad8\u5ea6\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u5e73\u8861\u56e0\u5b50\uff0c\u4e00\u4f46\u4e0d\u7b26\u5408\u6761\u4ef6</p> <ul> <li> <p>\u56e0\u5b50\u5728\u540c\u4e00\u4e2a\u65b9\u5411\u53d8\u5316</p> <p>-2\uff1a\u5de6\u65cb\uff08RR Rotation\u2014\u2014\u6307\u4ece\u5931\u8861\u8282\u70b9\u5f00\u59cb\u5411\u53f3\u63d2\u4e24\u6b21\u7684\u60c5\u51b5\uff09</p> <p>2\uff1a \u53f3\u65cb\uff08LL Rotation\uff0c\u4e0eRR\u5bf9\u79f0\uff09 </p> </li> <li> <p>\u4e0d\u540c\u65b9\u5411\uff1a\u628a\u6811\u9ad8\u9ad8\u65b9\u5411\u7684\u5b59\u5b50\u8f6c\u4e0a\u6765\uff0c\u8f6c\u4e24\u6b21\uff08\u4e24\u79cd\u5bf9\u79f0\u60c5\u51b5\uff0cLR\u548cRL\uff09 </p> </li> </ul> <p>\u5b9e\u9645\u4e0a\uff0c\u6839\u636eAVL\u6811\u7684\u826f\u597d\u5b9a\u4e49\uff0c\u5728\u6bcf\u6b21\u63d2\u5165\u540e\u53ea\u9700\u8981\u4e00\u6b21\u64cd\u4f5c\uff08RR/LR...\uff09\u5c31\u80fd\u4f7f\u5176\u518d\u6b21\u5e73\u8861\u3002</p> <p>AVL\u6811\u7684\u5220\u9664\uff1a</p> <p>\u7528\u5220\u9664\u8282\u70b9\u5de6\u5b50\u6811\u7684\u6700\u5927\u8282\u70b9/\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8282\u70b9\u66ff\u6362\u4ed6\uff08\u4e0eBST\u76f8\u540c\uff09\uff0c\u518d\u5220\u9664\u3002</p> <p>\u4ece\u5220\u9664\u8282\u70b9\u7684\u7236\u8282\u70b9\u5f00\u59cb\uff08\u66ff\u6362\u540e\uff09\uff0c\u8bb0\u5f55\uff08\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\uff09\u9ad8\u5ea6\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u5e73\u8861\u56e0\u5b50\uff0c\u4e00\u4f46\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u5c31\u7528insert\u4e2d\u7684\u65b9\u6cd5\u8c03\u6574\u3002\u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u591a\u6b21\u8c03\u6574\u3002</p>"},{"location":"ads/ads_part_1/#_1","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<p>\u6811\u9ad8\u7684\u6e10\u8fdb\u4e0a\u754c</p> <p>\\(n_h\\)\u2014\u2014h\u9ad8\u5ea6\u7684\u6811\u9700\u8981\u7684\u6700\u5c0f\u7ed3\u70b9\u6570</p> <p>\u9ad8\u5ea6\u4e3ah\u7684\u6811\uff08\u6240\u9700\u8282\u70b9\u6700\u5c11\uff09\u5982\u4e0b </p> <p>\u4e0e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7c7b\u4f3c\uff1a</p> <p>\\(F_0=0,F_1=1,F_n=F_{n-1}+F_{n-2}\\)</p> <p>\u800c\\(F_n\\approx\\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^i\\)</p> <p>\u6240\u4ee5  \\(n_h =F_{n+3}-1\\)</p> <ul> <li>\\(h=O(lnn)\\)</li> </ul>"},{"location":"ads/ads_part_1/#splay-trees","title":"Splay Trees","text":"<ul> <li> <p>\u76ee\u6807\uff1aM\u6b21\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\\(O(MlogN)\\)\uff0c\u5373\u6bcf\u4e2a\u64cd\u4f5c\u5e73\u5747\u590d\u6742\u5ea6\u4e3a\\(O(logN)\\)</p> </li> <li> <p>\u57fa\u672c\u601d\u60f3\uff1a\u6bcf\u6b21\u67e5\u8be2/\u63d2\u5165\uff0c\u5c06\u8be5\u5143\u7d20\u63d0\u5230\u6839\u8282\u70b9</p> </li> </ul>"},{"location":"ads/ads_part_1/#_2","title":"\u6784\u9020\u8fc7\u7a0b","text":"<ul> <li> <p>\u5982\u679c\u67e5\u8be2\u8282\u70b9\u7684\u7236\u4eb2\u662f\u6839\u2014\u2014\u65cb\u8f6c\u67e5\u8be2\u8282\u70b9</p> </li> <li> <p>\u5982\u679c\u4e0d\u662f\uff0c\u5219\u6709\u7236\u4eb2\u8282\u70b9\uff08P\uff09\u548c\u7956\u7236\u8282\u70b9\uff08G\uff09</p> <ul> <li>zig-zag\uff08z\u5b57\u5f62\uff09\uff1a\u8f6c\u4e24\u6b21\u5f53\u524d\u8282\u70b9</li> <li>zig-zig\uff08\u4e00\u4e2a\u65b9\u5411\uff09\uff1a\u5148\u8f6c\u7236\u8282\u70b9\uff0c\u518d\u8f6c\u5f53\u524d\u8282\u70b9 </li> </ul> </li> </ul>"},{"location":"ads/ads_part_1/#_3","title":"\u5220\u9664\u64cd\u4f5c","text":"<ol> <li> <p>\u627e\u5230\u8981\u5220\u9664\u7684\u5143\u7d20X\uff08\u8fd9\u6837\u8ba9\u5176\u5728\u6839\u8282\u70b9\uff09</p> </li> <li> <p>\u5220\u6389X\uff0c\u5f97\u5230\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811</p> </li> <li> <p>\u627e\u5230\u5de6\u5b50\u6811\u6700\u5927\u7684\u8282\u70b9\uff0c\u5c06\u5176\u63a8\u5230\u6839\u8282\u70b9</p> </li> <li> <p>\u8fd9\u6837\u5c31\u80fd\u76f4\u63a5\u5c06\u53f3\u5b50\u6811\u63a5\u5230\u5de6\u5b50\u6811\u7684\u53f3\u8fb9</p> </li> </ol>"},{"location":"ads/ads_part_1/#amortized-analysisthree-normal-methods","title":"Amortized Analysis(Three normal methods)","text":"<p>An amortized analysis guarantees the average performance of each operation in the worst case.</p> <ul> <li> <p>Splay\u6811\u7684\u76ee\u6807\uff1aM\u6b21\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\\(O(MlogN)\\)\u2014\u2014\u5747\u644a\u65f6\u95f4\u4e0a\u754c(Amortized time bound)</p> </li> <li> <p>worst-case bound &gt;= amortized time bound &gt;= average-case bound</p> </li> <li> <p>\u524d\u4e24\u79cd\u4e0e\u6570\u636e\u5206\u5e03\u65e0\u5173</p> </li> </ul>"},{"location":"ads/ads_part_1/#_4","title":"\u6808\u7684\u4f8b\u5b50","text":""},{"location":"ads/ads_part_1/#_5","title":"\u805a\u5408\u5206\u6790","text":"<p>\u5bf9\u4e8e\u6240\u6709 n\uff0cn \u4e2a\u8fd0\u7b97\u5e8f\u5217\u603b\u5171\u9700\u8981\u6700\u574f\u60c5\u51b5\u65f6\u95f4\uff08determine an upper bound\uff09 T\uff08n\uff09\u3002\u56e0\u6b64\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7684\u5e73\u5747\u6210\u672c\u6216\u644a\u9500\u6210\u672c\u4e3a T\uff08n\uff09/n\u3002</p> <p>\u4ee5\u6808\u4e3a\u4f8b\uff1a</p> <ul> <li> <p>push\uff1a\\(O(1)\\)\uff0c pop\uff1a\\(O(1)\\)\uff0c </p> </li> <li> <p>multipop\uff08\u4e00\u6b21pop\u51fan\u4e2a\uff09\uff1a\\(min\\{k\uff0cn\\}=O(n)\\)\uff0c\u5176\u4e2dk\u662f\u5f53\u524d\u6808\u4e2d\u5143\u7d20\u6570</p> </li> <li> <p>\u6240\u4ee5n\u6b21\u64cd\u4f5c\u4e0a\u754c\uff1a\\(O(n^2)\\)</p> </li> <li> <p>\u66f4\u7cbe\u786e\uff1a\u6808\u4e2d\u5143\u7d20\u6570\u80af\u5b9a\u5c0f\u4e8en\uff0cpush\u8fdb\u7684\u5143\u7d20\u53ea\u80fdpop\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n)\\)   $$T_{amortized}= O( n )/n = O(1)   $$</p> </li> </ul>"},{"location":"ads/ads_part_1/#_6","title":"\u6838\u7b97\u6cd5","text":"<p>\u4ee5\u5356\u6c7d\u6c34\u4e3a\u4f8b\uff1a</p> <ul> <li> <p>a\u5356\u4e00\u74f6\u6c7d\u6c343\u5143</p> </li> <li> <p>b\u75285\u5143\u4e70\u6c7d\u6c34\uff0c\u5b58\u4e24\u5143\uff08credits\uff09\u5230a\u90a3\uff0c\u4e0b\u6b21\u4e70\u6c7d\u6c34\u53ef\u4ee5\u7528\u3002\u6b64\u65f6actual cost\uff1a3\u5143</p> </li> <li> <p>\\(amortized\\ cost = actual\\ cost + credits\\)</p> </li> <li> <p>\u4e70n\u74f6\u6c7d\u6c34\uff0cbound\uff1a $$ amortized\\ cost \\geq  actual\\ cost(\u53733n\u5143\uff0c\u56e0\u4e3a\u4e0d\u8d4a\u8d26) $$</p> </li> </ul> <p>\u6ce8\u610f\u4fdd\u8bc1\u6700\u7ec8\u4fe1\u7528\u4e0d\u5c0f\u4e8e0</p> <p>\u56de\u5230\u6808\u64cd\u4f5c\uff1a</p> <ul> <li> <p>\u5b9e\u9645\u4ee3\u4ef7\uff1apush=1, pop=1, multipop=min(sizeof(s),k)</p> </li> <li> <p>\u5747\u644a\u4ee3\u4ef7\uff1apush = 2(\u63d0\u524d\u628apop\u7684\u4ee3\u4ef7\u4ed8\u6389\uff0c\u5373\u4f7f\u4e0dpop\u8be5\u5143\u7d20), pop = multipop = 0\uff0c\u8fd9\u6837\u6240\u6709\u4ee3\u4ef7\u90fd\u662f\u5e38\u6570</p> </li> <li> <p>Credits\uff1apush = +1, pop = -1, multipop = -min(sizeof(s),k)</p> </li> <li> <p>multipop\u65f6\u7684\u4fe1\u7528\u4e3asizeof(s)\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4fe1\u7528\u4e3a\u8d1f\u7684\u60c5\u51b5</p> </li> <li> <p>n\u6b21\u64cd\u4f5c\u6700\u5927\u7684amortized cost\u4e3a2n\uff0c\\(T_{amortized}= O( n )/n = O(1)\\)</p> </li> </ul>"},{"location":"ads/ads_part_1/#_7","title":"\u52bf\u80fd\u6cd5","text":"<ul> <li> <p>\\(\\Phi(D_i)\\)\uff1a\u52bf\u80fd\u51fd\u6570\uff0c\u8868\u793a\\(D_i\\)\u72b6\u6001\u7684\u52bf\u80fd</p> </li> <li> <p>\\(Credits =\\Phi(D_i)-\\Phi(D_{i-1})\\); </p> </li> <li> <p>\u5408\u6cd5\u7684\u52bf\u80fd\u51fd\u6570\uff1a\u4fdd\u8bc1\\(\\Phi(D_{0})\\)\u662f\u6700\u5c0f\u7684\uff0c\u8fd9\u6837\u603b\u7684Credits\\(=\\Phi(D_n)-\\Phi(D_{0})\\)&gt;0\uff0c\u5747\u644a\u4ee3\u4ef7\u662f\u5b9e\u9645\u4ee3\u4ef7\u7684\u4e0a\u754c\u3002\u4e0b\u9762\u516c\u5f0f\u4e2d \\(\\hat{c_i}\\) \u662f\u5747\u644a\u4ee3\u4ef7\uff0c \\(c_i\\) \u662f\u5b9e\u9645\u4ee3\u4ef7 $$ \\sum_{i=1}^n\\hat{c_i}=\\sum_{i=1}^n(c_i+\\Phi(D_i)-\\Phi(D_{i-1}))=\\sum_{i=1}^nc_i+\\Phi(D_n)-\\Phi(D_{0}) $$</p> </li> </ul> <p>\u518d\u6b21\u56de\u5230\u6808</p> <ul> <li> <p>\u52bf\u80fd\u51fd\u6570\\(\\Phi(D_i)=D_i\\)\u65f6\u523b\u6808\u4e2d\u7684\u5143\u7d20\u6570</p> </li> <li> <p>\u8ba1\u7b97\u5747\u644a\u4ee3\u4ef7\uff1a</p> </li> <li> <p>push\uff1a\\(\\hat{c_i}=c_i+\\Phi(D_i)-\\Phi(D_{i-1})=1+1=2\\)</p> </li> <li> <p>multipop\uff1a\\(\\hat{c_i}=c_i+\\Phi(D_i)-\\Phi(D_{i-1})=k'-k'=0\\)</p> </li> <li> <p>\u6bcf\u4e2a\u64cd\u4f5c\u7684\u4ee3\u4ef7\u90fd\u662fO(1)\u2014\u2014\u5747\u644a\u4ee3\u4ef7\u662fO(1)</p> </li> </ul>"},{"location":"ads/ads_part_1/#spaly","title":"Spaly\u6811\u5747\u644a\u5206\u6790","text":"<p>\u5e94\u7528\uff1a\u5206\u6790splay tree\u7684\u5747\u644a\u4ee3\u4ef7\u2014\u2014Amortized Analysis Using Potential Methods:</p> <p>\u6811\u7684\u5e38\u89c1\u52bf\u80fd\u51fd\u6570\uff1a\u8282\u70b9\u4e2a\u6570\u3001\u6811\u9ad8\u00b7\u00b7\u00b7</p> <p>(\u56e0\u4e3a\u62a5\u544a\u7528\u82f1\u6587\u5199\u7684\u6240\u4ee5\u4e0b\u9762\u662f\u82f1\u6587)</p> <p>In tree's amortized analysis, we often use the height of tree or the amount of nodes as the potential function, which satisfy \\(\\Phi(0)\\) is the minimum. To make the potential function increasing slowly, we choose \\(\\Phi(T)=\\sum_{i\\in T}S(i)\\), where S(i) is the number of descendants of i (i included). \\(\\Phi(T)\\) is also called rank of T, notion \\(R(T)\\)</p> <p>Lemma: If \\(a+b\\leq c\\) </p> <p>then  \\(loga+logb\\leq 2logc-2\\)</p> <p>Same as the part of algorithm analysis, there are three situations to discuss according to the picture.</p> <ul> <li> <p>If the \"X\" to be pushed is one of the childs of root, we only need one rotation. Except X and P, the \"S(i)\"  didn't change, and the rotation cost \\(c_i\\) is 1. So the amortized cost    $$   \\hat{c_i}=1+R_2(X)-R_1(X)+R_2(P)-R_1(P)   $$   $$   \\leq 1+R_2(X)-R_1(X)   $$     (shown below that \\(R_2(P)&lt;R_1(P)\\))    </p> </li> <li> <p>In the zig-zag case, we need two rotation, costing 2. We note that \\(R_2(X) = R_1(G) = log(the\\ number\\ of\\ nodes\\ in\\ T)\\). So the amortized cost    $$   \\hat{c_i}=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)   $$</p> </li> </ul> <p>$$   =2-R_1(X)+R_2(P)-R_1(P)+R_2(G)   $$</p> <p>$$   \\leq 2(R_2(X)-R_1(X))   $$     (shown below that nodes: \\(P_2+G_2&lt;X_2,\\ so\\ according\\ to\\ lemma,\\ R_2(P)+R_2(G)\\leq 2R_2(X)+2\\))      * In the zig-zig case, we need two rotation, too, costing 2. We also note that \\(R_2(X) = R_1(G)\\). So the amortized cost    $$   \\hat{c_i}=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)   $$</p> <p>$$   =2-R_1(X)+R_2(P)-R_1(P)+R_2(G)   $$    $$    =2-2R_1(X)+R_2(P)-R_1(P)+R_2(G)+R_1(X)    $$   $$   \\leq 3(R_2(X)-R_1(X))   $$     (shown below that nodes: \\(X_1+G_2&lt;X_2,\\ so\\ according\\ to\\ lemma,\\ R_1(X)+R_2(G)\\leq 2R_2(X)+2\\))   </p> <p>When splay, the former \\(3R_2(X)\\) could be eliminated by the latter item's \\(-3R_1(X)\\). After sum of all the items, we get: $$ \\hat{c_i} \\leq 1+3(R_2(X)-R_1(X))=O(logN) $$</p>"},{"location":"ads/ads_part_1/#incrementing-a-binary-counter","title":"Incrementing a binary counter","text":"<p>\u7b97\u6cd5\u5bfc\u8bba\u7684\u644a\u8fd8\u5206\u6790\u4f8b\u5b50</p> <p>Incrementing a binary counter(k bit in total)</p> <ul> <li> <p>\u6bcf\u6b21\u4ece\u4f4e\u4f4d\u5f80\u9ad8\u4f4d\u7ffb\u8f6cbit\uff0c\u9047\u52301\u7ee7\u7eed\u7ffb\u8f6c\uff0c\u9047\u52300\u7ffb\u8f6c\u5b8c\u540e\u505c\u4e0b\u6765</p> </li> <li> <p>worst case: \u6bcf\u6b21\u6700\u591a\u8f6ck\u4e2abits\u2014\u2014011...1=&gt;100...0</p> </li> </ul> <p>\u805a\u5408\u5206\u6790\uff1a</p> <ul> <li> <p>A[0]\u6bcf\u6b21\u90fd\u6539\u53d8</p> </li> <li> <p>A[1]\u6bcf\u4e24\u6b21\u6539\u53d8\u4e00\u6b21</p> </li> <li> <p>\u5047\u8bbe\u8ba1\u6570n\u6b21\uff0c\u5219A[0]\u6539\u53d8\\(n\\)\u6b21\uff0cA[1]\u6539\u53d8\\(\\lfloor\\frac{n}{2}\\rfloor\\)\u6b21...A[i]\u6539\u53d8\\(\\lfloor\\frac{n}{2^i}\\rfloor\\)\u6b21</p> </li> <li> <p>\u56e0\u6b64\u603b\u5171\u7684\u64cd\u4f5c\uff08\u7ffb\u8f6cbit\uff09\u7684\u6b21\u6570\u4e3a</p> </li> </ul> \\[ \\sum^{k-1}_{i=0}\\lfloor\\frac{n}{2^i}\\rfloor&lt;n\\sum^{\\infty}_{i=0}\\frac{1}{2^i}=2n \\] <p>\u56e0\u6b64\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\u4e3aO(n)\uff0c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)/n=O(1).</p> <p>\u6838\u7b97\u6cd5\uff1a</p> <ul> <li> <p>\u5b9e\u9645\u4ee3\u4ef7\uff1a1\u53d8\u4e3a0 = 1, 0\u53d8\u4e3a1 = 1</p> </li> <li> <p>\u5747\u644a\u4ee3\u4ef7\uff1a0\u53d8\u4e3a1 = 2(\u63d0\u524d\u628a1\u53d8\u4e3a0\u7684\u4ee3\u4ef7\u4ed8\u6389), 1\u53d8\u4e3a0 = 0</p> </li> <li> <p>\u4ece0\u5f00\u59cb\u8ba1\u6570\uff0c\u80af\u5b9a\u5148\u5c060\u53d8\u4e3a1\u624d\u80fd\u53d8\u56de\u53bb\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4fe1\u7528\u4e3a\u8d1f\u7684\u60c5\u51b5</p> </li> <li> <p>\u6211\u4eec\u77e5\u9053\u6bcf\u6b21\u6700\u591a\u53ea\u6709\u4e00\u4e2a0\u53d8\u62101</p> </li> <li> <p>\u56e0\u6b64\u5747\u644a\u4ee3\u4ef7\u4e3aO(1)</p> </li> </ul> <p>\u52bf\u80fd\u6cd5\uff1a</p> <ul> <li>\u9009\u53d6\u52bf\u80fd\u51fd\u6570\uff1a\u5f53\u524d1\u7684\u6570\u76ee\uff0c\u8bb0\u4e3a\\(b_i\\) </li> </ul>"},{"location":"ads/ads_part_1/#red-black-tree","title":"Red-black Tree","text":"<p>tips: \u8bbf\u95ee\u7a7a\u6307\u9488\u4f1a Sigementation fault\uff0c\uff0c\u53ef\u4ee5\u6307\u5411\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff08\u54e8\u5175\uff09</p> <ul> <li>\u76ee\u6807\uff1a\u6bcf\u6b21\u641c\u7d22\u90fd\\((logn)\\)</li> </ul>"},{"location":"ads/ads_part_1/#1","title":"1. \u7ea2\u9ed1\u6811\u5b9a\u4e49","text":"<ol> <li> <p>\u7ea2\u9ed1\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u7ea2\u8272\u7684\uff0c\u8981\u4e48\u662f\u9ed1\u8272\u7684</p> </li> <li> <p>\u6839\u8282\u70b9\u662f\u9ed1\u8272\u7684</p> </li> <li> <p>\u6bcf\u4e2a\u53f6\u5b50\u90fd\u662f\u54e8\u5175\uff08NIL\uff09\uff0c\u54e8\u5175\u662f\u9ed1\u8272\u7684</p> </li> <li> <p>\u5982\u679c\u8282\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u5b69\u5b50\u90fd\u662f\u9ed1\u8272\u7684</p> </li> <li> <p>\u6bcf\u4e2a\u8282\u70b9\u5230\uff08\u80fd\u5230\u8fbe\u7684\uff09\u6240\u6709\u53f6\u5b50\u7684\u7b80\u5355\u8def\u5f84\uff0c\u7ecf\u8fc7\u7684\u9ed1\u8272\u8282\u70b9\u6570\u76f8\u540c</p> </li> </ol> <ul> <li>black height: \u4e0d\u7b97\u81ea\u5df1\u3001\u4e0d\u7b97\u54e8\u5175\uff0c\u7ecf\u8fc7\u7684\u9ed1\u8272\u8282\u70b9\u6570</li> </ul> <p>\u5f15\u7406\uff1a</p> <p>\u8bc1\u660e\uff1a</p>"},{"location":"ads/ads_part_1/#2","title":"2. \u7ea2\u9ed1\u6811\u6784\u9020","text":"<p>\u6784\u9020\u60f3\u6cd5\uff1a\u63d2\u5165\u65b0\u8282\u70b9\u4e14\u67d3\u6210\u7ea2\u8272\u2014\u2014\u4fdd\u6301\u6027\u8d285\uff0c\u901a\u8fc7\u8fed\u4ee3\u53d8\u6362\u4fdd\u6301\u5176\u4ed6\u6027\u8d28</p> <p>Insert(\u4e0d\u6ee1\u8db3\u6027\u8d28\u6709\u4e09\u79cd\u60c5\u51b5)\uff1a</p> <ul> <li> <p>case 1\uff1a\u7ea2\u53d4\u53d4\uff08\u6240\u4ee5\u7237\u7237\u80af\u5b9a\u9ed1\u8272\uff09\u2014\u2014\u5c06\u7238\u7238\u548c\u53d4\u53d4\u67d3\u9ed1\uff0c\u7237\u7237\u67d3\u7ea2</p> </li> <li> <p>case 2\uff1a\u8fd1\u53d4\u53d4\u9ed1\u2014\u2014\u65cb\u8f6c\u5230case3</p> </li> <li> <p>case 3\uff1a\u8fdc\u53d4\u53d4\u9ed1\u2014\u2014\u7236\u4eb2\u67d3\u9ed1\uff0c\u65cb\u8f6c\u7237\u7237</p> </li> </ul> <p>\u8fd9\u6837\u4fdd\u6301\u4e86\u6bcf\u6b21\u53ea\u6709\u4e00\u6761\u89c4\u5219\u88ab\u7834\u574f</p> <ul> <li>\u590d\u6742\u5ea6\uff1a\u6700\u574f\u60c5\u51b5\u2014\u2014\u4e00\u76f4case 1 $$ T = O(h) = O(logn) $$</li> </ul> <p>Delete</p> <ul> <li> <p>\u88ab\u5220\u8282\u70b9\u662fleaf node: \u7236\u4eb2\u6307\u5411NIL</p> </li> <li> <p>\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff1a\u7528\u513f\u5b50\u66ff\u4ee3\u4ed6</p> </li> <li> <p>\u6709\u4e24\u4e2a\u513f\u5b50\uff1a\u7528\u5de6\u5b50\u6811\u6700\u5927\u7684/\u53f3\u5b50\u6811\u6700\u5c0f\u7684\u66ff\u4ee3\u4ed6\u3002</p> </li> </ul> <p>\u6b64\u65f6</p>"},{"location":"ads/ads_part_1/#b-tree","title":"B+ Tree","text":""},{"location":"ads/ads_part_1/#1_1","title":"1. \u5b9a\u4e49","text":""},{"location":"ads/ads_part_1/#a-b-tree-of-order-m","title":"A B+ tree of order M:","text":"<ul> <li> <p>\u6839\u8282\u70b9\u8981\u4e48\u6ca1\u6709\u5b69\u5b50\uff0c\u8981\u4e48\u6709\\([2,M]\\)\u4e2a\u5b69\u5b50</p> </li> <li> <p>\u9664\u6839\u4e4b\u5916\u7684\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u6709\\([\\lceil M/2\\rceil,M]\\)\u4e2a\u5b69\u5b50</p> </li> </ul>"},{"location":"ads/ads_part_1/#2_1","title":"2. \u63d2\u5165\u8fc7\u7a0b","text":"<ul> <li> <p>\u63d2\u5165=&gt;\u82e5\u8d85\u9650=&gt;\u5206\u88c2</p> </li> <li> <p>\u4fdd\u8bc1\u6709\u5e8f/\u627e\u5230\u4f4d\u7f6e\uff1a\u904d\u5386\uff08O(n)\uff09</p> </li> <li> <p>\u5982\u679c\u63a8\u5230\u524d\u9762\u2014\u2014\u53ef\u80fdO(n)\uff0c\u56e0\u6b64\u5b9e\u9645\u64cd\u4f5c\u4e0d\u8fd9\u4e48\u505a</p> </li> </ul> <pre><code>Btree Insert(ElementType X,Btree T)\n{\n  Seach from root to leaf\n}\n</code></pre> <p>choose M: best 3 or 4</p> <p>B+\u6811\u7684\u597d\u5904\uff1a\u76f8\u8fd1\u7684\u5143\u7d20\u79bb\u5f97\u8fd1\uff0c\u78c1\u76d8\u53cb\u597d</p>"},{"location":"ads/ads_part_1/#3","title":"3. \u5220\u9664\u8fc7\u7a0b","text":""},{"location":"ads/ads_part_2/","title":"\u9ad8\u7ea7\u6570\u636e\u4e0e\u7b97\u6cd5\u5206\u6790\u2014\u2014Part 2","text":""},{"location":"ads/ads_part_2/#inverted-file-index","title":"Inverted File Index","text":"<p>\u5e94\u7528\uff1a\u4fe1\u606f\u68c0\u7d22\uff0c\u641c\u7d22\u5f15\u64ce</p> <p>\u641c\u7d22\u5f15\u64ce\u7684\u641c\u7d22\u65b9\u5f0f\uff1f</p> <ul> <li> <p>Solution 1: \u904d\u5386\u5bfb\u627e\u641c\u7d22\u7684\u5173\u952e\u5b57\uff08\u592a\u8017\u65f6\uff09</p> </li> <li> <p>Solution 2: \u77e9\u9635\u5b58\u50a8\uff08\u592a\u8017\u7a7a\u95f4\uff09 </p> </li> </ul> <p>\u78c1\u5e26\u5047\u8bbe\uff1a\u8bcd\u548c\u8bcd\u6ca1\u6709\u987a\u5e8f</p> <ul> <li> <p>Solution 3: Inverted File Index\uff08\u53c2\u8003\u56fe\u8bba\uff0c\u5c06\u77e9\u9635\u7528\u90bb\u63a5\u8868\u8868\u793a\uff09  \u4ee5a\u4e3a\u4f8b\uff1a\u51fa\u73b0\u6b21\u65703\u6b21\uff0c\u5206\u522b\u51fa\u73b0\u5728\u7b2c\u4e8c\u4e2a\u7f51\u7ad9\u7684\u7b2c\u516d\u4e2a\uff0c\u7b2c\u4e09\u4e2a\u7f51\u7ad9\u7684\u7b2c\u516d\u4e2a\uff0c\u7b2c\u56db\u4e2a\u7f51\u7ad9\u7684\u7b2c\u516d\u4e2a\u3002</p> <p>\u56e0\u6b64\u94fe\u8868\u91cc\u5b58\u50a8\u7684\u662f&lt;3,(2;6),(3;6),(4,6)&gt;</p> </li> </ul> <pre><code>while ( read a document D ) {\n    while ( read a term T in D ) {\n        if ( Find( Dictionary, T ) == false )\n            Insert( Dictionary, T );\n        Get T\u2019s posting list;\n        Insert a node to T\u2019s posting list;\n    }\n}\nWrite the inverted index to disk;\n</code></pre>"},{"location":"ads/ads_part_2/#_1","title":"\u4f18\u5316","text":"<ol> <li> <p>\u5bf9term\u8fdb\u884c\u5904\u7406</p> <ul> <li> <p>\u53ea\u7559\u4e0b\u8bcd\u6839</p> </li> <li> <p>\u505c\u7528\u8bcd\uff08stop words\uff09\u8fc7\u6ee4\uff1athe\u3001a\u3001what...\u2014\u2014\u6210\u672c\u5927\uff0c\u6536\u83b7\u4f4e</p> </li> </ul> </li> <li> <p>\u52a0\u901f\u641c\u7d22</p> <ul> <li> <p>\u54c8\u5e0c</p> </li> <li> <p>\u641c\u7d22\u6811</p> </li> </ul> <p>Discussion: \u54c8\u5e0c\u548c\u641c\u7d22\u6811\u5404\u81ea\u7684\u4f18\u7f3a\u70b9\uff1f</p> </li> <li> <p>\u5185\u5b58\u4f18\u5316</p> <ul> <li> <p>\u5185\u5b58\u4e0d\u591f\u65f6\uff0c\u628a\u5199\u597d\u7684\u8bcd\u5178\u653e\u5165disk</p> </li> <li> <p>\u91ca\u653e\u5185\u5b58\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bcd\u5178</p> </li> <li> <p>\u6700\u540e\u5f52\u5e76\u6392\u5e8f</p> </li> </ul> </li> <li> <p>\u5b58\u50a8\u4f18\u5316</p> <ul> <li> <p>disk\u90fd\u4e0d\u591f\u65f6\uff08web-scale\u7684\u6570\u636e\uff09</p> </li> <li> <p>Solution 1\uff1a\u5c06\u78c1\u76d8\u6309\u5b57\u6bcd\u5e8f\u653e\u5728\u4e0d\u540c\u7535\u8111\u91cc</p> </li> <li> <p>Solution 2\uff1aDocument-Partitioned index</p> <p>\u6bcf\u4e2a\u5206\u533a\u4ee3\u8868\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u6863\u96c6\u5408\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u8be5\u6587\u6863\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5173\u952e\u8bcd\u4ee5\u53ca\u5b83\u4eec\u5bf9\u5e94\u7684\u9891\u7387\u4fe1\u606f\u3002\u8fd9\u79cd\u5206\u533a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u63d0\u9ad8\u67e5\u8be2\u6548\u7387\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u67e5\u8be2\uff0c\u7cfb\u7edf\u53ea\u9700\u8981\u8bbf\u95ee\u4e0e\u5176\u76f8\u5173\u7684\u6587\u6863\u5206\u533a\u5373\u53ef\u3002</p> <ul> <li>\u597d\u5904\uff1a\u6613\u4e8e\u6269\u5c55\u3001\u4fbf\u4e8e\u5e76\u884c\u3001\u5373\u4f7f\u4e00\u4e2a\u96c6\u5408\u4e0d\u53ef\u7528\u90fd\u80fd\u8fd4\u56de\u7ed3\u679c\uff08\u867d\u7136\u53ef\u80fd\u4e0d\u662f\u6700\u4f73\u7684</li> </ul> </li> </ul> </li> <li> <p>Dynamic indexing</p> <ul> <li> <p>\u7269\u7406\u5220\u9664\u4ee3\u4ef7\u6602\u8d35\u2014\u2014\u505a\u65b0\u65e7\u6807\u8bb0</p> </li> <li> <p>\u5206\u4e3a\u4e00\u4e2aMain list\u548cnew list\uff0c\u5df2\u5b58\u5728\u7684\u8bcd\u653e\u5728Main list\u91cc\uff0c\u65b0\u8bcd\u653e\u5728new list\u91cc</p> </li> </ul> </li> <li> <p>Compression(\u538b\u7f29)</p> <p>\u5c06\u7a7a\u683c\u548c\u505c\u7528\u8bcd\u53bb\u9664\uff0c\u5c06\u8bcd\u6c47\u8868\u7ebf\u6027\u5b58\u50a8\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u4f4d\u7f6e\u5dee\u5e8f\u5217 </p> </li> </ol>"},{"location":"ads/ads_part_2/#_2","title":"\u8bc4\u4f30","text":"<p>\u51e0\u4e2a\u8bc4\u4ef7\u6307\u6807\uff1a</p> <ul> <li> <p>\u7d22\u5f15\u7684\u5feb\u6162</p> </li> <li> <p>\u641c\u7d22\u7684\u5feb\u6162</p> </li> <li> <p>\u5bf9\u590d\u6742\u8bed\u8a00\u7684\u5904\u7406\u80fd\u529b </p> </li> </ul> \u6587\u6863 \u76f8\u5173 \u4e0d\u76f8\u5173 \u68c0\u7d22\u5230 \\(R_R\\) \\(I_R\\) \u672a\u68c0\u7d22 \\(R_N\\) \\(I_N\\) <p>\u7cbe\u786e\u7387\uff1a\u68c0\u7d22\u5230\u7684\u6b63\u786e\u6837\u672c\u5728\u68c0\u7d22\u5230\u7684\u6837\u672c\u4e0a\u7684\u6bd4\u4f8b $$ Precision\\ P = R_R / (R_R + I_R) $$ \u53ec\u56de\u7387\uff1a\u68c0\u7d22\u5230\u7684\u6b63\u786e\u6837\u672c\u5728\u6240\u6709\u6b63\u786e\u6837\u672c\u4e0a\u7684\u6bd4\u4f8b $$ Recall    \\  R = R_R / (R_R + R_N) $$</p> <p>\u5012\u6392\u6587\u4ef6\u7d22\u5f15\u7684\u4e00\u4e2a\u9898\u96c6</p>"},{"location":"ads/ads_part_2/#leftist-heaps","title":"Leftist Heaps","text":"<p>review: \u5806\u7684\u64cd\u4f5c</p> <ul> <li> <p>\u63d2\u5165</p> </li> <li> <p>\u5220\u9664</p> </li> <li> <p>\u5408\u5e76\u2014\u2014\u590d\u6742\u5ea6\u76f8\u5f53\u4e8e\u91cd\u65b0\u5efa\u5806</p> </li> </ul> <p>\u5de6\u504f\u5806\u2014\u2014\u5229\u7528\u7ed3\u6784\u7684\u4e0d\u5e73\u8861\uff0c\u52a0\u901f\u5806\u7684\u5408\u5e76</p>"},{"location":"ads/ads_part_2/#definition","title":"Definition","text":"<ul> <li> <p>\u6709\u4e24\u4e2a\u513f\u5b50\u7684\u8282\u70b9\u662f\u5185\u90e8\u8282\u70b9\uff0c\u5176\u4f59\u4e3a\u5916\u90e8\u8282\u70b9</p> </li> <li> <p>null path length, Npl(x): \u5230\u5916\u90e8\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84</p> </li> <li> <p>\u5b9a\u4e49Npl(null) = -1</p> </li> <li> <p>\u5de6\u504f\u6811\u5373\u6240\u6709\u7684\u8282\u70b9\uff0c\u5de6\u513f\u5b50\u7684Npl\u5927\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u7684Npl </p> </li> </ul> <p>Theorem: \u53f3\u8def\u5f84\u4e3ar\u7684\u5de6\u504f\u6811\uff0c\u81f3\u5c11\u6709\\(2^r-1\\)\u4e2a\u8282\u70b9</p> <p>r = 1\u65f6\uff0c\u663e\u7136\u6210\u7acb</p> <p>r = k\u65f6\uff0c\u5047\u8bbe\u7ed3\u8bba\u6210\u7acb</p> <p>r =  k+1\u65f6\uff0c\u53f3\u5b50\u6811\u7684Npl\u4e3ak+1</p> <p>\u7531\u5de6\u504f\u6811\u5b9a\u4e49\uff0c\u5de6\u5b50\u6811\u7684Npl\u81f3\u5c11\u4e3ak+1</p> <p>\u6765\u770b\u53f3\u5b50\u6811</p> <p>\u5de6\u5b50\u6811\u7684\u53f3\u8def\u5f84\u4e3ak\uff0c\u56e0\u6b64\u5de6\u5b50\u6811\u81f3\u5c11\u6709\\(2^r-1\\)\u4e2a\u8282\u70b9</p>"},{"location":"ads/ads_part_2/#_3","title":"\u5b9e\u73b0\uff1a","text":"<pre><code>struct TreeNode\n{\n    ElementType     Element;\n    PriorityQueue   Left;\n    PriorityQueue   Right;\n    int             Npl;\n};\n</code></pre> <p>\u65b9\u6cd5\u4e00\uff1a\u9012\u5f52</p> <ol> <li> <p>Merge(R)</p> </li> <li> <p>Attach()</p> </li> <li> <p>Swap</p> </li> </ol> <p>\u65b9\u6cd5\u4e8c\uff1a\u8fed\u4ee3                              </p> <p>delete min</p>"},{"location":"ads/ads_part_2/#skew-heaps","title":"Skew Heaps","text":"<p>\u5de6\u504f\u6811\u5408\u5e76\u65f6\u4e0d\u5224\u65adnpl\uff0c\u76f4\u63a5\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\uff0c\u5c31\u662f\u659c\u5806</p> <p>\u5747\u644a\u5206\u6790\uff08\u52bf\u80fd\u6cd5\uff09</p> <ul> <li> <p>\u52bf\u80fd\u51fd\u6570\\(\\Phi(D_i)\\)=\u91cd\u8282\u70b9\u7684\u4e2a\u6570</p> </li> <li> <p>\u91cd\u8282\u70b9\uff1a\u53f3\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e25\u683c\u5927\u4e8e\u5de6\u5b50\u6811</p> </li> <li> <p>\u53ea\u6709\u53f3\u8def\u5f84\u8282\u70b9\u7684\u8f7b\u91cd\u4f1a\u6539\u53d8</p> </li> <li> <p>\u64cd\u4f5c\u540e\uff0c\u91cd\u8282\u70b9\u4e00\u5b9a\u53d8\u8f7b\uff0c\u8f7b\u8282\u70b9\u4e0d\u4e00\u5b9a\u53d8\u91cd\uff0c\u4e3a\u6c42\u4e0a\u754c\uff0c\u5047\u8bbe\u8f7b\u8282\u70b9\u90fd\u53d8\u91cd</p> </li> </ul>"},{"location":"ads/ads_part_2/#binomial-queue","title":"Binomial Queue","text":"<p>\u4e8c\u9879\u4f18\u5148\u961f\u5217</p> <ul> <li>\u5efa\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n)\\)\uff0c\u5747\u644a\\(O(1)\\)</li> <li>\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(logn)\\)</li> <li>\u56e0\u6b64\u6211\u4eec\u60f3\u4f18\u5316\u63d2\u5165</li> </ul>"},{"location":"ads/ads_part_2/#_4","title":"\u5b9a\u4e49","text":"<p>A binomial queue is not a heap-ordered tree, but rather a collection of heap-ordered trees, known as a forest.  Each heap-ordered tree is a binomial tree.</p> <ul> <li>A binomial tree of height 0 is a one-node tree.</li> <li>A binomial tree, \\(B_k\\), of height k is formed by attaching a binomial tree, \\(B_{k \u2013 1}\\), to the root of another binomial tree, \\(B_{k \u2013 1}\\).</li> </ul> <p></p> <p>\u89c2\u5bdf\u5f97\uff1a\\(B_k\\) consists of a root with k children, which are                        .  \\(B_k\\) has exactly       \\(2^k\\)     nodes.  The number of nodes at depth d is    \\(C_k^d\\)        .</p> <p>\u4efb\u4f55\u5927\u5c0f\uff08\u8282\u70b9\u6570\uff09\u7684\u4e8c\u9879\u961f\u5217\u53ef\u4ee5\u88ab\u4e8c\u9879\u6811\u552f\u4e00\u8868\u793a</p> <p>Example</p>"},{"location":"ads/ads_part_2/#_5","title":"\u64cd\u4f5c","text":"<ul> <li>FindMin: \u6bd4\u8f83\u6bcf\u4e2a\u6839\u8282\u70b9\u5927\u5c0f\uff0c\u627e\u5230\u6700\u5c0f\u7684\u3002\u8282\u70b9\u6570\u4e3aN\uff0c\u5219\u6700\u591a\u6709\\(\\lceil logN\\rceil\\)\u4e2a\u6811\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(logN)\\).<ul> <li>\u53ef\u4ee5\u8bb0\u5f55\u6700\u5c0f\u7684\u6839\uff0c\u5e76\u5728\u53d8\u66f4\u65f6\u66f4\u65b0\u3002\u8fd9\u65f6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(1)\\)\u3002</li> </ul> </li> <li>Merge: \u7c7b\u4f3c\u4e8e\u4e8c\u8fdb\u5236</li> </ul> <ul> <li>Insert: Merge\u7684\u7279\u6b8a\u60c5\u51b5\u2014\u2014Merge(\\(H, B_0\\))</li> <li>DeleteMin: <ul> <li>step 1: FindMin\u2014\u2014 (\\(O(logN)\\))</li> <li>step 2: \u5728\u4e8c\u9879\u961f\u5217\u4e2d\u5220\u9664\\(B_k\\)\uff0c\u5f97\u5230H' \u2014\u2014(\\(O(1)\\))</li> <li>step 3: \u5728\\(B_k\\)\u4e2d\u5220\u9664\u6839\uff0c\u5c06\u5176\u6240\u6709\u5b50\u6811\u4f5c\u4e3a\u65b0\u7684\u961f\u5217H''\u2014\u2014 (\\(O(logN)\\))</li> <li>step 4: Merge(H', H'') \u2014\u2014(\\(O(logN)\\))</li> </ul> </li> </ul>"},{"location":"ads/ads_part_2/#_6","title":"\u5b9e\u73b0","text":"<p>\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u2014\u2014\u8282\u7701\u7a7a\u95f4\uff0c\u4e0d\u7528\u8003\u8651\u968f\u673a\u8bbf\u95ee\u5b69\u5b50 <pre><code>typedef struct BinNode *Position;\ntypedef struct Collection *BinQueue;\ntypedef struct BinNode *BinTree;  /* missing from p.176 */\n\nstruct BinNode \n{ \n    ElementType     Element;\n    Position        LeftChild;\n    Position        NextSibling;\n} ;\n\nstruct Collection \n{ \n    int         CurrentSize;  /* total number of nodes */\n    BinTree TheTrees[ MaxTrees ];\n} ;\n</code></pre></p> <p>DeleteMin <pre><code>DeleteMin(BinQueue H)\n{\n    int min = FindMin(H);//min\u7684\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\n    BinTree OldRoot = H-&gt;TheTrees[min]; \n    H-&gt;TheTrees[min] = H-&gt;TheTrees[0];//\u6307\u5411\u54e8\u5175\n    BinQueue new_H = Malloc...\n    while(NextSibling){\n        //\u521b\u5efa\u65b0\u961f\u5217\n    }\n    free(OldRoot);\n    Merge(H, new_H);\n}\n</code></pre></p>"},{"location":"ads/ads_part_2/#_7","title":"\u5206\u6790","text":"<ul> <li>1/2\uff1a\u4e0d\u5408\u5e76</li> <li>1/4\uff1a\u5408\u5e76\u4e00\u6b21</li> <li>1/8\uff1a\u5408\u5e76\u4e24\u6b21</li> </ul> <p>\u52bf\u80fd\u6cd5\uff1a</p> <ul> <li>\\(\\Phi(i)\\) = i\u6b21\u63d2\u5165\u540e\u7684\u6811\u7684\u6570\u91cf</li> </ul>"},{"location":"ads/project2_test/","title":"Project 2 - Test Interface","text":""},{"location":"ads/project2_test/#_1","title":"\u6211\u4eec\u9879\u76ee\u4e2d\u7684\u8f93\u5165\u6570\u636e","text":"<p>\u5728\u5b9e\u9645\u6587\u4ef6\u4e2d\u6ca1\u6709\u6ce8\u91ca</p> query.txt<pre><code>5 7//\u56fe\u67095\u4e2a\u9876\u70b9\uff0c7\u6761\u8fb9\n//\u63a5\u4e0b\u6765\u662f7\u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u4e00\u6761\u8fb9\n1 2 10//\u4ece\u9876\u70b91\u5230\u9876\u70b92\u7684\u8fb9\uff0c\u6743\u91cd\u4e3a10\n1 3 20\n1 5 25\n2 4 35\n2 5 40\n3 5 50\n4 5 55\n\n//\u67e5\u8be2\u8bed\u53e5\u7684\u8f93\u5165\n4//\u4e00\u5171\u67094\u6761\u67e5\u8be2\u8bed\u53e5\n1 3//\u67e5\u8be2\u9876\u70b91\u52303\u7684\u6700\u77ed\u8def\u5f84\n2 4\n5 1\n3 2\n</code></pre> <p>\u5728\u7a0b\u5e8f\u4e2d\uff0c\u8bfb\u53d6\u6570\u636e\u7684\u90e8\u5206\u5df2\u7ecf\u5199\u597d\uff0c\u56fe\u88ab\u4fdd\u5b58\u4e3a\u4e00\u5f20\u90bb\u63a5\u94fe\u8868\uff0c\u7ed3\u6784\u58f0\u660e\u5982\u4e0b\u3002</p> <pre><code>// \u5b9a\u4e49\u56fe\u4e2d\u7684\u8282\u70b9\u7ed3\u6784\ntypedef struct Node {\n    int vertex;            // \u8282\u70b9\u7684\u503c\n    int weight;            // \u5230\u8be5\u8282\u70b9\u7684\u8fb9\u7684\u6743\u91cd\n    struct Node* next;     // \u6307\u5411\u4e0b\u4e00\u4e2a\u76f8\u90bb\u8282\u70b9\u7684\u6307\u9488\n} Node;\n\n// \u5b9a\u4e49\u90bb\u63a5\u94fe\u8868\u7ed3\u6784\ntypedef struct Graph {\n    int numVertices;       // \u56fe\u4e2d\u8282\u70b9\u7684\u6570\u91cf\n    Node** adjLists;       // \u5b58\u50a8\u90bb\u63a5\u94fe\u8868\u7684\u6570\u7ec4\n} Graph;\n</code></pre> <p>\u4e0b\u9762\u7528\u4f8b\u5b50\u8bf4\u660e </p> <p>\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li>\u6570\u7ec4\u6807\u53f7\u4ece0 - n-1\uff0c\u800c\u9876\u70b9\u6807\u53f7\u4ece1 - n</li> <li>\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u7c7b\u578b\u662fnode\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0d\u662f\u54e8\u5175\uff0c\u76f4\u63a5\u662f\u4e00\u6761\u8fb9</li> <li>\u56fe\u662f\u65e0\u5411\u56fe</li> <li>\u6743\u91cd\u90fd\u662f\u6b63\u6574\u6570</li> <li>\u6ca1\u6709\u5e73\u884c\u8fb9\u548cself loop</li> <li>printGraph\u51fd\u6570\u53ef\u4ee5\u67e5\u770b\u56fe\u7684\u7ed3\u6784 </li> </ul> <p>\u4f60\u9700\u8981\u5b8c\u6210\u7684\uff1a</p> <ul> <li>\u5728line 146\u8865\u5145\u51fd\u6570<code>int dijkstra_heap(Graph* graph, int src, int dest)</code>\uff0c\u7528\u5806\u5b9e\u73b0dijkstra\u7b97\u6cd5</li> <li>\u53c2\u6570\u610f\u4e49\uff1a\u5728\u56fegraph\u4e2d\u627e\u5230\u6807\u53f7\u4e3asrc\u5230\u6807\u53f7\u4e3adest\u7684\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u8fd4\u56de\u8fd9\u4e2a\u6700\u77ed\u8ddd\u79bb\u7684\u5927\u5c0f</li> <li>\u6700\u7ec8\u7684\u6570\u636e\u96c6\u662f\u73b0\u5b9e\u4e2d\u7684\u9053\u8def\uff0c\u4e0d\u4fdd\u8bc1\u4e00\u5b9a\u6709\u89e3\u3002\u5982\u679c\u6ca1\u6709\u89e3\uff0c\u8fd4\u56de-1</li> <li>dijkstra()\u51fd\u6570\u662f\u66b4\u529b\u641c\u7d22\u6cd5\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\uff0c\u7528\u6765\u68c0\u9a8c\u4f60\u7684\u7b97\u6cd5\u7684\u6b63\u786e\u6027</li> <li>test\u7a0b\u5e8f\u6267\u884c\u5b8c\u6bd5\u4f1a\u6709\u4ee5\u4e0b\u8f93\u51fa\uff1a\uff08\u62ec\u53f7\u91cc\u662f\u51fd\u6570dijkstra_heap()\u7684\u8fd4\u56de\u503c\uff0c\u6b64\u65f6\u51fd\u6570\u4e3a\u7a7a\uff0c\u8fd4\u56de\u4e86\u968f\u673a\u503c1349030576\uff09   </li> <li>\u4f60\u53ef\u4ee5\u66f4\u6539query.txt\u4e2d\u7684\u6570\u636e\u6765\u68c0\u9a8c\u7a0b\u5e8f\u7684\u6b63\u786e\u6027</li> </ul>"},{"location":"ads/project2_test/#_2","title":"\u4e0b\u9762\u662f\u6570\u636e\u96c6\u7684\u683c\u5f0f\uff08\u6211\u6765\u5904\u7406\uff0c\u5176\u4ed6\u4eba\u53ef\u5ffd\u7565\uff09","text":"<ul> <li>A graph contains n nodes and m arcs</li> <li>Nodes are identified by integers 1...n</li> <li>Graphs is undirected in this project</li> <li>Graphs can have parallel arcs and self-loops</li> <li>Arc weights are signed integers</li> </ul> <p>\u8f93\u5165\u6587\u4ef6\u7684\u683c\u5f0f\uff1a</p> <p>\u56fe\u7684\u6570\u636e\uff08.gr\u6587\u4ef6\uff09 </p> \u6bcf\u4e00\u884c\u5f00\u5934\u7684\u9996\u5b57\u6bcd \u5bf9\u5e94\u610f\u4e49 \u793a\u4f8b\u4ee3\u7801 c comment\uff0c\u6ce8\u91ca\uff0c\u5e94\u88ab\u5ffd\u7565 <code>c This is a comment</code> p problem\uff0c\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5fc5\u5b9a\u5728\u4e0d\u662f\u6ce8\u91ca\u7684\u7b2c\u4e00\u884c\uff0c\u7ed9\u51fa\u56fe\u7684\u8282\u70b9\u6570\u548c\u8fb9\u6570\uff08n\u4e2a\u8282\u70b9\uff0cm\u6761\u8fb9\uff09 <code>p sp n m</code> a arc\uff0c\u63cf\u8ff0\u56fe\u7684\u4e00\u6761\u8fb9\uff08U\u3001V\u662f\u4e24\u7aef\u7684\u8282\u70b9\uff0cW\u662f\u8fb9\u7684\u6743\u91cd\uff09\uff0c\u4e00\u5171m\u884c <code>a U V W</code> <p>\u4f8b\u5b50\u5982\u4e0b <pre><code>c 9th DIMACS Implementation Challenge: Shortest Paths\nc http://www.dis.uniroma1.it/~challenge9\nc Sample graph file\nc\np sp 6 8\nc graph contains 6 nodes and 8 arcs\nc node ids are numbers in 1..6\nc\na 1 2 17\nc arc from node 1 to node 2 of weight 17\nc\na 1 3 10\na 2 4 2\na 3 5 0\na 4 3 0\na 4 6 3\na 5 2 0\na 5 6 20\n</code></pre></p> <p>\u67e5\u8be2\u7684\u8f93\u5165\u65b9\u5f0f\uff08.p2p\u6587\u4ef6\uff09</p> <p>(p2p\u610f\u601d\u662fPoint-to-point\uff0c\u627e\u70b9\u5bf9\u70b9\u7684\u6700\u77ed\u8def\u5f84)</p> \u6bcf\u4e00\u884c\u5f00\u5934\u7684\u9996\u5b57\u6bcd \u5bf9\u5e94\u610f\u4e49 \u793a\u4f8b\u4ee3\u7801 c comment\uff0c\u6ce8\u91ca\uff0c\u5e94\u88ab\u5ffd\u7565 <code>c This is a comment</code> p problem\uff0c\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5fc5\u5b9a\u5728\u4e0d\u662f\u6ce8\u91ca\u7684\u7b2c\u4e00\u884c\uff0c\u7ed9\u51fa\u67e5\u8be2\u6307\u4ee4\u7684\u6761\u6570n <code>p aux sp p2p n</code> q query\uff0c\u67e5\u8be2\uff0c\u8ba9\u4f60\u6c42\u89e3S\u5230T\u7684\u6700\u77ed\u8def\u5f84 <code>q S T</code> <p>\u793a\u4f8b\u4ee3\u7801 <pre><code>c 9th DIMACS Implementation Challenge: Shortest Paths\nc http://www.dis.uniroma1.it/~challenge9\nc Sample point-to-point problem specification file\nc\np aux sp p2p 3\nc contains 3 query pairs\nc\nq 1 5\nq 5 1\nq 1 2\n</code></pre></p>"},{"location":"oop/oop/","title":"Object-Oriented Programming","text":"<ul> <li> <p>\u5173\u952e\u5b57/\u4e09\u5927\u7279\u6027\uff1aInheritance\uff08\u96c6\u6210\uff09  Encapsulation\uff08\u5c01\u88c5\uff09 Polymorphism(\u591a\u6001)</p> </li> <li> <p>\u6559\u6750\uff1aThinking in C++</p> </li> <li> <p>\u53c2\u8003\uff1aC++ Primer, Ver 5</p> </li> <li> <p>\u6210\u7ee9\u6784\u6210\uff1aLab 50%, Exam 50%</p> </li> </ul>"},{"location":"oop/oop/#introduction","title":"Introduction","text":"<ul> <li>\u7b2c\u4e00\u4e2aC++\u7a0b\u5e8f</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; \"Hello, World! I am \" &lt;&lt; 18 &lt;&lt; \"Today!\" &lt;&lt; endl;\n    //endl: \u6362\u884c\n    return 0; \n}\n</code></pre> <ul> <li>\u8f93\u5165\u8f93\u51fa\u6d41 <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int number;\n\n    cout &lt;&lt; \"Enter a decimal number:\"; \n    cin &gt;&gt; number;\n    cout &lt;&lt; \"The number you entered is \" &lt;&lt; number &lt;&lt;\".\" &lt;&lt;endl;\n\n    system(\"pause\");//\u51bb\u7ed3\u5c4f\u5e55\uff0c\u4fbf\u4e8e\u89c2\u5bdf\u7ed3\u679c\n    //not matter?\n    return 0;\n}\n</code></pre></li> </ul>"},{"location":"oop/oop/#using-objects","title":"Using Objects","text":"<p>\u4ee5\u5b57\u7b26\u4e32\u4e3a\u4f8b</p> <ul> <li> <p>\u52a0\u5934\u6587\u4ef6</p> <ul> <li><code>include &lt;string&gt;</code></li> </ul> </li> <li> <p>\u5b9a\u4e49\u53d8\u91cf</p> <ul> <li><code>string str;</code></li> </ul> </li> <li> <p>\u521d\u59cb\u5316</p> <ul> <li><code>string str = \"hello\";</code></li> </ul> </li> <li> <p>\u8bfb\u5199\u8be5\u53d8\u91cf</p> <ul> <li> <p><code>cin &gt;&gt; str</code></p> </li> <li> <p><code>cout &lt;&lt; str</code></p> </li> </ul> </li> </ul> <ul> <li>\u4e0eC\u4e0d\u540c\u7684\u90e8\u5206\uff1a</li> </ul> <pre><code>//C:\nchar charr1[20];//\u9700\u8981\u6307\u5b9a\u5927\u5c0f\nchar charr2[20] = \u201cjaguar\u201d;\ncharr1 = charr2;//illegal,\n//\u56e0\u4e3a\u540d\u79f0\u6307\u5411\u56fa\u5b9a\u7684\u5730\u5740\uff0c\u4e0d\u80fd\u76f8\u4e92\u8d4b\u503c\n</code></pre> <pre><code>//C++:\nstring str1;//\u4e0d\u7528\u8003\u8651\u5185\u5b58\nstring str2=\u201cpanther\u201d;\n\nstr1 =str2;//legal\n</code></pre> <ul> <li>\u5b57\u7b26\u4e32\u8fde\u63a5\uff1a</li> </ul> <pre><code>string str3;\nstr3 = str1 + str2;\nstr1 +=str2;\nstrl +=\"lalala\";\n</code></pre> <ul> <li> <p>C\u5982\u679c\u672a\u521d\u59cb\u5316\u2014\u2014\u968f\u673a\u503c\uff0c\u800cC++\u5f3a\u5236\u521d\u59cb\u5316</p> <ul> <li> <p><code>string str1,str2(\"hello\");</code></p> </li> <li> <p>str1: \u7a7a\uff0cstr2: hello</p> </li> <li> <p>\u4e0e\u7c7b\u540d\u4e00\u6837\u7684\u51fd\u6570\uff1a\u6784\u9020\u51fd\u6570</p> </li> </ul> </li> <li> <p>\u7528 \".\" \u8fdb\u884c\u5bf9\u8c61\u884c\u4e3a <pre><code>str.empty();//\u5b57\u7b26\u4e32\u4e3a\u7a7a\u65f6\u8fd4\u56de1\n</code></pre></p> </li> </ul>"},{"location":"oop/oop/#file-io","title":"File I/O","text":"<pre><code>#include &lt;fstream&gt;//read from and write to file\nofstream File1(\"C:\\\\test.txt\");\nFile1&lt;&lt;\"Hello world\"&lt;&lt;std::endl;//if without using namespace std;\nifstream File2(\"C:\\\\test.txt\");\nstd::string str1;\nstd::string str2;\nFile1&gt;&gt;str1;\nFile2&gt;&gt;str2\n</code></pre>"},{"location":"oop/oop/#memory-model","title":"Memory Model","text":"<pre><code>//global vars\nint i;//outside all the function\nstring str;\nstatic int j;//static global vars: \u4ec5\u5f53\u524d\u6587\u4ef6\u53ef\u89c1\nf(){\n  int k;//local vars.\n  static int l;// static local vars\uff1a\u4ec5\u51fd\u6570\u5185\u53ef\u89c1\uff0c\u518d\u6b21\u8bbf\u95ee\u4fdd\u7559\u539f\u503c\n  int* p = malloc(sizeof(int));//allocated vars.\n  }\n</code></pre> <p>Where:</p> <ul> <li> <p>\u4f4d\u4e8eGlobal data\uff1a</p> <ul> <li> <p>Global vars\uff1a\u53ef\u88ab\u5176\u4ed6\u6587\u4ef6\u5171\u4eab</p> </li> <li> <p>Static global vars.</p> </li> <li> <p>Static local vars.</p> </li> </ul> </li> <li> <p>\u4f4d\u4e8eStack:</p> <ul> <li>local vars</li> </ul> </li> <li> <p>\u4f4d\u4e8eHeap:</p> <ul> <li>dynamically allocated vars.</li> </ul> </li> </ul> <p>\u5982\u4f55\u8bbf\u95ee\u5916\u90e8\u53d8\u91cf\uff1a</p> <pre><code>//text.cpp\nstring gStrl;//outside main &amp; other function\n</code></pre> <pre><code>//main.cpp\nextern string gStrl;//\u65e0extern\uff1a\u91cd\u5b9a\u4e49\u62a5\u9519\nmain()\n{\n  //\u53ef\u4ee5\u8bbf\u95eegStrl\n}\n</code></pre>"},{"location":"oop/oop/#pointer-to-objects","title":"Pointer to Objects","text":"<pre><code>//object create\nstring s = \"hello\";//\u5b9a\u4e49\uff0c\u6784\u9020\uff0c\nstring* ps = &amp;s;\n(*ps).length()//get the object\nps-&gt;length()//call the function\n</code></pre> <p>\u52a8\u6001\u5185\u5b58\u5206\u914d\uff1a <pre><code>//\u8fd4\u56de\u6307\u9488\nint* p = new int;\nint* pStudent = new Student[10];\ndelete p;\ndelete [] pStudent;\n//\u8fd8\u7ed9\u7cfb\u7edf\n</code></pre></p>"},{"location":"oop/oop/#reference","title":"Reference","text":"<ul> <li><code>type&amp; refname = name;</code></li> </ul> <pre><code>char c;\nchar&amp; r = c;//a reference to c, \u6b64\u65f6\u5fc5\u987b\u5f15\u7528\uff0ccan't be null\nint&amp; r = 10;//illegal, \u53ea\u80fd\u5f15\u7528\u53d8\u91cf\nr = 'x';//c\u4e5f\u88ab\u8d4b\u503c'x'\n</code></pre> <p>\u5e38\u7528\u4e8e\u4f20\u53c2\uff08\u5b9e\u53c2\uff09</p> <pre><code>void f(int&amp; x);\nf(y);//x\u5f15\u7528y\uff0c\u51fd\u6570\u4e2dx\u6539\u53d8\uff0c\u5916\u9762y\u4e5f\u6539\u53d8\nf(y*3);//illegal\nint&amp;* p;//illegal\uff0c\u6307\u5411\u5f15\u7528\u53d8\u91cf\u7684\u6307\u9488\u4e0d\u5408\u6cd5\nvoid f(int*&amp; p);//\u5f15\u7528\u6307\u9488\n</code></pre>"},{"location":"oop/oop/#const","title":"Const \u5e38\u91cf","text":"<p>\u7528\u6765\u4ee3\u66ff\u5b8f</p> <pre><code>const int x = 123;//\u5fc5\u987b\u521d\u59cb\u5316\uff0cx\u4fdd\u6301\u5e38\u6570\u503c\nx = 27;//illegal\nx++;//illegal\nconst int y = x;//\u53ef\u4ee5\u4efb\u610f\u8d4b\u7ed9\u522b\u4eba\n</code></pre> <p>\u7f16\u8bd1\u5668\u4f1a\u907f\u514d\u7ed9\u5b83\u5206\u914d\u5185\u5b58\uff1a\u76f4\u63a5\u5199\u5728\u8868\u8fbe\u5f0f\u4e2d</p> <p>\u6ca1\u6cd5\u5728\u7f16\u8bd1\u65f6\u523b\u786e\u5b9a\\\u5916\u90e8\u8981\u4f7f\u7528\u65f6\uff0c\u5206\u914d\u5185\u5b58</p> <pre><code>const string* p1 = \"ABC\";//\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u4e0d\u80fd\u66f4\u6539\n//\u76f8\u5f53\u4e8estring const* p1\n*p1 = \"c\";//illegal\nstring *const p2 = \"ABC\";//\u6307\u9488\u672c\u8eab\u4e0d\u80fd\u66f4\u6539\np2 = \"hello\";//OK\n</code></pre> <p>const\u6570\u7ec4\u2014\u2014\u4f1a\u5206\u914d\u4e00\u7247\u5185\u5b58\uff0c\u6b64\u65f6\u7f16\u8bd1\u5668\u4e0d\u77e5\u9053\u6570\u7ec4\u91cc\u7684\u503c</p> <pre><code>const int i[] = { 1, 2, 3, 4 };\nfloat f[i[3]]; // Illegal  \n\nstruct S { int i, j; };\nconst S s[] = { { 1, 2 }, { 3, 4 } };\ndouble d[s[1].j]; // Illegal\n</code></pre> <p>\u5f53\u9700\u8981\u4f20\u9012\u5927\u89c4\u6a21\u6570\u636e\uff08\u5982\u6570\u7ec4\uff09\u65f6\uff0c\u5e38\u7528\u6307\u9488\uff0c\u5bb9\u6613\u628a\u539f\u672c\u7684\u6570\u636e\u6539\u6389</p> <p>\u4e3a\u907f\u514d\u6b64\u79cd\u60c5\u51b5\uff0c\u4f1a\u5728\u6307\u9488\u524d\u52a0const</p> <pre><code>//\u5c3d\u91cf\u7528\u6307\u9488/\u5f15\u7528+const\nvoid f(const int*x);//\u4f20\u9012\u7684\u53c2\u6570\u4e0d\u53ef\u4fee\u6539\n//\u51fd\u6570f\u4e2d\n  x++;//illegal\n</code></pre>"},{"location":"oop/oop/#class","title":"Class","text":"<p>\u81ea\u5df1\u8bbe\u8ba1\u5bf9\u8c61</p>"},{"location":"oop/oop/#point","title":"Point","text":"<p><pre><code>//\u7ed3\u6784\u4f53\u7684\u5199\u6cd5\ntypedef struct point{\n  float x;\n  float y;\n} Point;\n\nPoint a;\na.x = 1;a.y = 2;\n\nprint(&amp;a);\n\nvoid print(const Point* p){\n  printf(\"%d %d\\n\",p-&gt;x,p-&gt;y);\n}\nvoid move(Point* p,int dx, int dy){\n  p-&gt;x+=dx;\n  p-&gt;y+=dy;\n}\n</code></pre> * Objects = Attributes + Service</p> <p><pre><code>//\u7c7b\u7684\u5199\u6cd5\nclass Point{\npublic:\n  void init(int x,int y);\n  void move(int dx,int dy);\n  void print() const;\n  //\u884c\u4e3a\u548c\u5bf9\u8c61\u5c01\u88c5\u5728\u4e00\u8d77\nprivate://\u4e0d\u5199public\u5c31\u662fprivate\n  int x;//\u4e0d\u5141\u8bb8\u5916\u754c\u6539\n  int y;\n};\n\n//implementations\nvoid Point::init(int ix,int iy){\n  x = ix;\n  y = iy;\n}\nvoid Point::move(int ix,int iy){\n  x+ = dx;\n  y+ = dy;\n}\nvoid Point::print() const{\n  cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;\n}\n</code></pre> <code>::</code>\u2014\u2014resolver\uff0c\u8868\u9762\u51fd\u6570\u5c5e\u4e8e\u8c01</p> <p><code>&lt;Class Name&gt;::&lt;function name&gt;</code></p> <p><code>::&lt;function name&gt;</code>\u2014\u2014\u5168\u5c40\u51fd\u6570</p> <pre><code>void S:f(){\n  f();//recursive\n  ::f();//\u8c03\u7528\u540c\u540d\u7684\u5168\u5c40\u51fd\u6570\n  ::a++;//\u5168\u5c40\u53d8\u91cf\n  a--;//\u7c7b\u4e2d\u7684a\n}\n</code></pre>"},{"location":"oop/oop/#stash","title":"Stash","text":"<ul> <li> <p>Container\u662f\u53ef\u4ee5\u88c5\u5bf9\u8c61\u7684\u5bf9\u8c61</p> </li> <li> <p>\u57fa\u672c\u64cd\u4f5c\uff1aput()\u548cget()</p> </li> <li> <p>Stash\u662f\u53ef\u6269\u5c55\u7684Container</p> </li> </ul>"},{"location":"oop/oop/#stash_1","title":"Stash","text":"<ul> <li> <p>\u53ef\u4ee5\u88c5\u4efb\u610f\u7c7b\u578b\u7684\u5bf9\u8c61</p> </li> <li> <p>\u88c5\u5f88\u591a\u540c\u4e00\u7c7b\u578b\u7684\u5bf9\u8c61\uff08\u53ea\u5173\u6ce8size\uff0c\u4e0d\u5173\u6ce8\u7c7b\u578b\uff09</p> </li> <li> <p>\u57fa\u672c\u64cd\u4f5c\uff1aadd()\u548cfetch()</p> </li> </ul> <pre><code>struct Stash {\n  int size; // Size of each space\n  int quantity; // Number of storage spaces  \n  int next; // Next empty space\n  // Dynamically allocated array  unsigned char* storage;\n  unsigned char* storage;\n  // Functions!\n  void initialize(int size);  \n  void cleanup();\n  int add(const void* element);  \n  void* fetch(int index);\n  int count();\n  void inflate(int increase);\n};\n</code></pre>"},{"location":"oop/oop/#this-the-pointer-to-the-variable","title":"this: the pointer to the variable","text":"<ul> <li>\u81ea\u52a8\u5b58\u5728\uff0c\u4e0d\u9700\u58f0\u660e</li> </ul>"},{"location":"oop/oop2/","title":"Implementation","text":""},{"location":"oop/oop2/#_1","title":"\u5f85\u5b9a\u6807\u9898","text":"<p>.h\u5934\u6587\u4ef6\uff08\u58f0\u660e\uff09</p> <ul> <li>\u51fd\u6570\u5728\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\uff1a\u9700\u8981\u5728\u4efb\u4f55\u9700\u8981\u4f7f\u7528/\u5b9a\u4e49\u7684\u5730\u65b9include\u5934\u6587\u4ef6</li> <li>\u7c7b\u540c\u7406\uff08\u4e00\u822c\u4e00\u4e2a\u5934\u6587\u4ef6\u653e\u4e00\u4e2a\u7c7b\uff09</li> <li>\u5934\u6587\u4ef6\uff08header\uff09=\u63a5\u53e3\uff08interface\uff09\uff1a\u522b\u4eba\u770b\u4f60\u7684\u5934\u6587\u4ef6\u624d\u77e5\u9053\u600e\u4e48\u7528 </li> </ul> <p>include \u5199\u6cd5\u7684\u533a\u522b\uff1a</p> <ul> <li><code>#include \u201cxx.h\u201d</code>:first search in the current  directory, then the    directories declared  somewhere</li> <li><code>#include &lt;xx.h&gt;</code>:search in the specified  directories</li> <li><code>#include &lt;xx&gt;</code>:same as #include"},{"location":"oop/oop2/#the-makefile-utility","title":"The Makefile utility","text":"<p>\u6839\u636e\u65f6\u5e8f\u5224\u65ad\u662f\u5426\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\uff0c\u51cf\u5c11\u5f00\u9500\uff08\u6839\u6bd4\u513f\u5b50\u65f6\u95f4\u65e9\uff0c\u5219\u6839\u8981\u66f4\u65b0\uff09 </p> <p>\u5c06\u6811\u7528makefile\u8868\u793a\u51fa\u6765\uff1a <pre><code>sum: main.o sum.o#\u5192\u53f7\u8868\u793a\u4f9d\u8d56\ngcc \u2013o  sum main.o sum.o\n\nmain.o: main.c sum.h  \ngcc \u2013c main.c\n\nsum.o: sum.c sum.h  \ngcc \u2013c sum.c\n</code></pre> \u5b8f\u66ff\u6362\uff08\u4fbf\u4e8e\u66f4\u6539\uff09 * <code>$@</code>: \u4e0a\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a * <code>$*</code>:  <pre><code>sum: main.o sum.o\ngcc \u2013o  $@  main.o  sum.o\n\nmain.o  sum.o: sum.h  \ngcc \u2013c $*.c\n</code></pre></p>"},{"location":"oop/oop2/#initialize","title":"Initialize","text":"<p><code>init()</code>\uff1a\u7f3a\u7701\u51fd\u6570\uff0c\u5982\u679c\u672a\u5b9a\u4e49\uff0c\u7cfb\u7edf\u81ea\u52a8\u751f\u6210</p> <p>\u4e3a\u4e86\u786e\u4fdd\u521d\u59cb\u5316\uff0c\u5728\u5bf9\u8c61\u5b9a\u4e49\u7684\u65f6\u523b\u4f1a\u7528\u6784\u9020\u51fd\u6570\u5f3a\u5236\u521d\u59cb\u5316</p> <p>\u6784\u9020\u51fd\u6570\uff1a\u4e0e\u7c7b\u540d\u76f8\u540c\u7684\u51fd\u6570 <pre><code>class X{\n    int i;\npublic:\n    X()\n};\n//\u8c03\u7528\n\u00b7\u00b7\u00b7\n</code></pre></p> <p><pre><code>Course(string id, float score) : course_id(id), score(score) {}\n</code></pre> <code>course_id(id), score(score)</code>\uff1a\u8fd9\u662f\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u3002\u5b83\u5728\u6784\u9020\u51fd\u6570\u7684\u4e3b\u4f53\u4e4b\u524d\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u9694\u7684\u65b9\u5f0f\u5bf9\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5728\u8fd9\u91cc\uff0ccourse_id(id) \u8868\u793a\u5c06 course_id \u6210\u5458\u53d8\u91cf\u521d\u59cb\u5316\u4e3a\u4f20\u5165\u6784\u9020\u51fd\u6570\u7684 id \u53c2\u6570\u7684\u503c\uff1bscore(score) \u8868\u793a\u5c06 score \u6210\u5458\u53d8\u91cf\u521d\u59cb\u5316\u4e3a\u4f20\u5165\u6784\u9020\u51fd\u6570\u7684 score \u53c2\u6570\u7684\u503c\u3002</p> <p>\u901a\u8fc7\u4f7f\u7528\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\uff0c\u53ef\u4ee5\u76f4\u63a5\u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\uff0c\u800c\u4e0d\u9700\u8981\u5728\u6784\u9020\u51fd\u6570\u7684\u4e3b\u4f53\u4e2d\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\u3002\u8fd9\u6837\u505a\u7684\u4f18\u70b9\u662f\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u6548\u7387\u548c\u53ef\u8bfb\u6027\u3002</p> <p>\u6784\u9020\u51fd\u6570\u53ef\u5e26\u53c2\u6570 <pre><code>Tree\n</code></pre></p> <p>\u5982\u679c\u5b9a\u4e49\u7684\u6784\u9020\u51fd\u6570\u6709\u53c2\u6570\uff0c\u8c03\u7528\u65f6\u6ca1\u7ed9\u53c2\u6570\uff0c\u4f1a\u8c03\u7528\u7f3a\u7701\u6784\u9020\u51fd\u6570</p> <p>\u4f46\u662f\uff0c\u4e00\u65e6\u4f60\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u51fd\u6570\uff0c\u7cfb\u7edf\u5c31\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\u7f3a\u7701\u6784\u9020\u51fd\u6570</p> <p>\u6570\u7ec4\u7684\u521d\u59cb\u5316\u8c03\u7528 <pre><code>\n</code></pre> * jump\u53ef\u4ee5\u8df3\u8fc7 * \u4f46\u7f16\u8bd1\u4e0d\u5141\u8bb8\u8df3\u8fc7\u521d\u59cb\u5316</p>"},{"location":"oop/oop2/#destructor","title":"Destructor","text":"<p>\u6790\u6784\u51fd\u6570</p>"}]}