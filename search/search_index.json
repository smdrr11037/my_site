{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u8fd9\u91cc\u662f\u751f\u547d\u7684\u8089\u8089\u7684\u7b14\u8bb0\u672c \u672c\u7f51\u7ad9\u6bd4\u8f83\u7b80\u964b \u4e0d\u6307\u671b\u6709\u4eba\u6765\u770b\uff08\u76ee\u7684\u5176\u5b9e\u662f\u8ba9\u672c\u4eba\u80fd\u591f\u65b9\u4fbf\u5730\u67e5\u770b\u7b14\u8bb0 \u5148\u7528\u4e00\u4e2a\u9ed8\u8ba4\u7684\u4e3b\u9898\uff08\u4e0a\u9762\u7684\u76ee\u7684\u5176\u5b9e\u5b8c\u5168\u80fd\u591f\u6ee1\u8db3\u4e86\ud83d\ude04 \u5b66\u597d\u524d\u7aef\u540e\u4e00\u5b9a\u8981\u5efa\u4e00\u4e2a\u6f02\u4eae\u7684\u4e2a\u4eba\u4e3b\u9875\ud83d\ude24 QQ\uff1a1498646901","title":"Home"},{"location":"#welcome","text":"\u8fd9\u91cc\u662f\u751f\u547d\u7684\u8089\u8089\u7684\u7b14\u8bb0\u672c \u672c\u7f51\u7ad9\u6bd4\u8f83\u7b80\u964b \u4e0d\u6307\u671b\u6709\u4eba\u6765\u770b\uff08\u76ee\u7684\u5176\u5b9e\u662f\u8ba9\u672c\u4eba\u80fd\u591f\u65b9\u4fbf\u5730\u67e5\u770b\u7b14\u8bb0 \u5148\u7528\u4e00\u4e2a\u9ed8\u8ba4\u7684\u4e3b\u9898\uff08\u4e0a\u9762\u7684\u76ee\u7684\u5176\u5b9e\u5b8c\u5168\u80fd\u591f\u6ee1\u8db3\u4e86\ud83d\ude04 \u5b66\u597d\u524d\u7aef\u540e\u4e00\u5b9a\u8981\u5efa\u4e00\u4e2a\u6f02\u4eae\u7684\u4e2a\u4eba\u4e3b\u9875\ud83d\ude24 QQ\uff1a1498646901","title":"Welcome"},{"location":"about/","text":"","title":"About"},{"location":"memoire/","text":"MkDocs mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Refreash the project online.","title":"\u5907\u5fd8"},{"location":"memoire/#mkdocs","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Refreash the project online.","title":"MkDocs"},{"location":"CO/CO/","text":"\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1 \u52a9\u6559\uff1a\u79e6\u4f73\u4fca\u3001\u90ed\u5bb6\u8c6a \u6210\u7ee9\u6784\u6210 {width=600px} Chapter 1: Introduction 0. \u5386\u53f2 \u7b2c\u4e00\u53f0\u53ef\u7f16\u7a0b\u7535\u5b50\u8ba1\u7b97\u673a\uff1aENIAC 10\u8fdb\u5236 \u901a\u8fc7\u5f00\u5173\u7f16\u7a0b \u65e0\u5b58\u50a8\u90e8\u5206 \u51af\u00b7\u8bfa\u4f0a\u66fc\u7684\u8ba1\u7b97\u673a\u8bbe\u8ba1\u7406\u8bba\u2014\u2014\u4e94\u4e2a\u57fa\u672c\u90e8\u5206 {width=400px} \u5f97\u5230EDSAC\u2014\u2014\u6709\u5b58\u50a8\u90e8\u5206\u7684\u8ba1\u7b97\u673a \u51e0\u4ee3\u7684\u8ba1\u7b97\u673a \uff1a * 1~4\u4ee3\uff1a\u771f\u7a7a\u7ba1->\u6676\u4f53\u7ba1->\u96c6\u6210\u7535\u8def->\u5927\u89c4\u6a21\u96c6\u6210\u7535\u8def * \u7b2c5\u4ee3\uff1a * * RISC\uff1a\u7cbe\u7b80\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a\u2014\u2014CPU\u5904\u7406\u7b80\u5355 * RISC-5 * MIPS * CISC\uff1a\u590d\u6742\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a\u2014\u2014\u6307\u4ee4\u6761\u6570\u5c11 * 80x86 1. \u4ecb\u7ecd \u53d1\u5c55\u8fdb\u5c55\u2014\u2014\u6469\u5c14\u5b9a\u5f8b \u5e94\u7528 \u624b\u673a \u4e07\u7ef4\u7f51 ...... 2. Eight Great Ideas \u6469\u5c14\u5b9a\u5f8b \u62bd\u8c61\u5316 Make common case fast ...... \u5c42\u6b21\u5b58\u50a8\u2014\u2014\u53c8\u5927\u53c8\u5feb \u53ef\u9760\u6027\u2014\u2014\u5907\u4efd 4. \u786c\u4ef6\u7cfb\u7edf \u663e\u793a \u4e3b\u677f CPU\u91cc\uff1a DataPath Control cache memory \u2014\u2014SRAM\u9759\u6001\u5b58\u50a8\uff0c\u9020\u4ef7\u9ad8 Memory Network 6. Performence Response time \uff1a\u5b8c\u6210\u4e00\u4e2atask\u9700\u8981\u7684\u65f6\u95f4 Throughput \uff1a\u5355\u4f4d\u65f6\u95f4\u5b8c\u6210\u7684\u4efb\u52a1\u6570 \u201cX is n time faster than Y\u201d\uff1a Y \u6240\u7528\u65f6\u95f4\u662f X \u7684 n \u500d CPU time = \u65f6\u949f\u5468\u671f\u6570 \\(\\times\\) \u4e00\u4e2a\u5468\u671f\u957f\u5ea6 \u5c06\u4e00\u4e2a\u6307\u4ee4\u5206\u6210\u51e0\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u4e00\u4e2a\u5468\u671f(CPI = Cycle per Instruction) \u5219 $$ CPU\\ time = \u6307\u4ee4\u6570 \\times CPI \\times \u4e00\u4e2a\u5468\u671f\u957f\u5ea6 $$ $$ = \\frac{\u6307\u4ee4\u6570 \\times CPI}{\u65f6\u949f\u9891\u7387} $$ 7. \u4e0d\u53ef\u80fd\u7684\u6027\u80fd\u63d0\u5347 Power Wall\uff1a\u63d0\u5347\u6027\u80fd\u8017\u80fd\u5de8\u5927\uff0c\u6e29\u5ea6\u9ad8 Memory Wall\uff1a\u4e8c\u5c42\u7f13\u51b2\u533aL2 cache\u53d8\u5927\u3001\u8868\u73b0\u53d8\u5dee\uff1bCPU\u6bd4\u5185\u5b58\u5feb\u5f97\u591a ILP Wall\uff1a\u96be\u4ee5\u5e76\u884c\u5904\u7406 8. Multiprocessors \u786c\u4ef6\u4e0a\u7684\u5e76\u884c\uff1a\u591a\u6838 Amdahl's Law: $$ T_{improved}=\\frac{T_{affected}}{improvement \\ t \\ factor}+T_{unaffected} $$ make common cases fast MIPS as a Performance Metric millions of instructions per second \u4e0d\u80fd\u7cbe\u786e\u53cd\u6620CPU\u6027\u80fd \u56e0\u4e3a\u6307\u4ee4\u6240\u5360\u5468\u671f\u6570\u4e0d\u540c *\u8bbe\u8ba1\u539f\u5219 \uff08\u5904\u7406\u5668\uff09\u8ddf\u7740\u6469\u5c14\u5b9a\u5f8b \u9010\u5c42\u62bd\u8c61\u5316 make common cases fast \u591a\u6838 assignment:1-1, 1-2, 1-4, 1-6, 1-7, 1-14 Chapter 3: Arithmetic for Computer 3.1 Introduction \u8bfb\u3001\u5199\u5185\u5b58\uff1a lw, sw: load word, \u8bfb\u53d632\u4f4d\u957f\u5ea6\u7684\u5185\u5b58 ld, sd: load double word, 64\u4f4d lb, sb: load byte, \u4e00\u4e2a\u5b57\u8282 \u6839\u636e\u8d77\u59cb\u5730\u5740\u8bfb\u53d6\u4e0d\u540c\u957f\u5ea6\u7684\u5185\u5bb9 ALU\u76f8\u5173\uff1a slt x1 x2,x3: set if less than, x1=(x2<x3) \u5206\u652f\u8df3\u8f6c\u6307\u4ee4\uff1a beq, bne, jal: \u6709\u6761\u4ef6/\u65e0\u6761\u4ef6\u8df3\u8f6c 3.2 Possible representation 2's Biased notation \\(= 2's complement + 2^n\\) \u6700\u5c0f\uff1a \\(-2^n\\) \uff0c\u8868\u793a\u4e3a000000000000\u00b7\u00b7\u00b7 \u6700\u5927\uff1a \\(2^n\\) \uff0c11111111111\u00b7\u00b7\u00b7\u00b7 \u4fbf\u4e8e\u6bd4\u8f83\u5927\u5c0f\uff08\u76f8\u5f53\u4e8e\u65e0\u7b26\u53f7\u6570\uff09 3.3 Arithmetic Overflow\uff1a\u6ea2\u51fa\u5224\u65ad \\(V = C_n \\oplus C_{n-1}\\) \u7b26\u53f7\u4f4d\u662f\u5426\u8fdb\u4f4d\u3001\u6700\u9ad8\u6570\u503c\u4f4d\u662f\u5426\u8fdb\u4f4d 3.4 Multiplication \u7531\u79fb\u4f4d\u548c\u52a0\u6cd5\u7ec4\u6210 * \u4e58\u6570\u662f1\uff1a\u79fb\u4f4d\u3001\u52a0\u4e0a * \u4e58\u6570\u662f0\uff1aadd 0 {width=200px} \\(4\\times 4\\) =>8\u4f4d\u52a0\u6cd5\u5668 {width=500px} \u5927\u4e14\u6162\uff1a \\(64\\times64\\) =>128\u4f4d\u52a0\u6cd5\u5668\u752864\u6b21 \u6539\u8fdb\uff1a {width=600px} * \u4e0d\u79fb\u88ab\u4e58\u6570\uff0c\u53f3\u79fb\u57fa\uff08\u4f4e\u4f4d\u4e0d\u53c2\u4e0e\u540e\u7eed\u8fd0\u7b97\uff09 * \u52a0\u6cd5\u5668\u4f4d\u6570\u51cf\u534a \u8fdb\u4e00\u6b65\uff1a\u5c06\u4e58\u6570\u653e\u5728\u57fa\u4e2d {width=600px} \u4e58\u6cd5\u4e0d\u80fd\u7528\u8865\u7801 \u6709\u7b26\u53f7\u6570\u7684\u4e58\u6cd5 \u5c06\u7b26\u53f7\u4fdd\u5b58 \u8f6c\u6362\u4e3a\u7edd\u5bf9\u503c \u540c\u53f7\u4e3a\u6b63\uff0c\u5f02\u53f7\u4e3a\u8d1f Booth's Algorithm \uff1f {width=600px} {width=600px} * \u9ed8\u8ba4 \\(C_{-1}\\) =0 {width=600px} \u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a \u7528\u591a\u4e2aALU\u5e76\u884c\u5b9e\u73b0 3.5 Divide \u9664\u6cd5\u5b9e\u73b0\u57fa\u672c\u601d\u60f3\uff1a 1. \u5c06\u88ab\u9664\u6570\u6bcf\u6b21\u5de6\u79fb\uff0c\u51cf\u6389\u9664\u6570 2. \u5982\u679c\u7ed3\u679c\u5927\u4e8e\u7b49\u4e8e0\uff0c\u5219\u6709\u6548\uff0c\u5728\u5546\u4e0a\u52a0\u4e00\u4e2a1 3. \u5426\u5219\u65e0\u6548\uff0c\u5c06\u9664\u6570\u52a0\u56de\u53bb\uff0c\u5728\u5546\u4e0a\u52a0\u4e00\u4e2a0 4. \u9700\u8981\u8fed\u4ee365\u6b21\uff0864\u4f4d\uff09 {width=200px} {width=600px} \u5177\u4f53\u5b9e\u73b0\uff1a \u9664\u6570\u653e\u5728\u9ad8\u4f4d\uff0c\u88ab\u9664\u6570\u653e\u5728\u4f4e\u4f4d\uff0c\u88ab\u9664\u6570\u51cf\u9664\u6570\u7684\u7ed3\u679c\u653e\u5728\u88ab\u9664\u6570\u7684\u9ad8\u4f4d\uff0c\u6bcf\u6b21\u53f3\u79fb\u9664\u6570 {width=600px} \u6539\u8fdb\uff1a\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\u3002 \u5c06\u88ab\u9664\u6570\u5de6\u79fb\uff0c\u79fb\u51fa\u6765\u7684\u4f4d\u7f6e\u653e\u5546\uff0c\u9ad8\u4f4d\u51cf\u5269\u4e0b\u6765\u7684\u662f\u4f59\u6570\uff0c\u4f1a\u591a\u79fb\u4e00\u4f4d\u3002\u56e0\u6b64\u6700\u540e\u8981\u628a\u9ad8\u4f4d\u53f3\u79fb\u4e00\u4f4d {width=600px} \u7b26\u53f7\u7ea6\u5b9a\uff1a\u4f59\u6570\u548c\u88ab\u9664\u6570\u7b26\u53f7\u4e00\u81f4 \u8f6f\u4ef6\u68c0\u67e5\u9664\u6570\u662f\u5426\u4e3a0\uff08\u5904\u7406\u5668\u4e0d\u7ba1\uff09 3.6 Float {width=600px} * Bias: single\u2014\u2014127, double\u2014\u20141023 * 1\u662f\u9690\u542b\u7684\uff08\u79d1\u5b66\u8ba1\u6570\u6cd5\uff09 \u4f8b\uff1a \\(15=1111=1.111\\times2^3\\) float: 0 10000010 111000... (Exponet = 3+127 = 130) {width=600px} \u5927\u7ea6\u76f8\u5f53\u4e8e6\u4f4d\u5341\u8fdb\u5236\u5c0f\u6570\u7cbe\u5ea6 {width=600px} * Exponent=00...0\u2014\u2014\u9690\u542b\u7684\u9996\u4f4d\u662f0 0 00...0 00...0 = {width=600px} \u5982\u4f55\u8fdb\u884c\u8fd0\u7b97 \uff1a * \u52a0\u6cd5 1. Alignment\uff08\u5bf9\u9f50\uff09 2. The proper digits have to be added\uff08\u5c0f\u7684\u5f80\u5927\u7684\u9760\uff09 3. Addition of significands 4. Normalization of the result\uff08\u5f52\u4e00\u5316\uff09 5. Rounding\uff08\u820d\u5165\uff0c\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u5f52\u4e00\u5316\uff09 {width=600px} \u4e58\u6cd5\uff1a {width=400px} \u6307\u6570\u76f8\u52a0\uff0c\u8fd8\u8981\u51cf\u53bb127\uff08bias\uff09 {width=400px} Accurate Arithmeticd * \u4e3a\u63d0\u5347\u7cbe\u5ea6\uff0c\u6700\u591a\u52a0\u4e09\u4f4d(guard, round, sticky) * guard\u4f4d\u548cround\uff1a\u5728\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u591a\u4fdd\u7559\u4e24\u4f4d * sticky\u4f4d\uff1a\u5728\u7ed3\u679c\u4f4d\u7684\u53f3\u8fb9\u5982\u6709\u4e0d\u4e3a0\u7684bit\uff0c\u5219\u4e3a1 * \u53ef\u4ee5\u5206\u8fa80.500000...0\u548c0.500000...1 round\u65b9\u5f0f\u53ef\u9009","title":"Part 1"},{"location":"CO/CO/#_1","text":"\u52a9\u6559\uff1a\u79e6\u4f73\u4fca\u3001\u90ed\u5bb6\u8c6a \u6210\u7ee9\u6784\u6210 {width=600px}","title":"\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1"},{"location":"CO/CO/#chapter-1-introduction","text":"","title":"Chapter 1: Introduction"},{"location":"CO/CO/#0","text":"\u7b2c\u4e00\u53f0\u53ef\u7f16\u7a0b\u7535\u5b50\u8ba1\u7b97\u673a\uff1aENIAC 10\u8fdb\u5236 \u901a\u8fc7\u5f00\u5173\u7f16\u7a0b \u65e0\u5b58\u50a8\u90e8\u5206 \u51af\u00b7\u8bfa\u4f0a\u66fc\u7684\u8ba1\u7b97\u673a\u8bbe\u8ba1\u7406\u8bba\u2014\u2014\u4e94\u4e2a\u57fa\u672c\u90e8\u5206 {width=400px} \u5f97\u5230EDSAC\u2014\u2014\u6709\u5b58\u50a8\u90e8\u5206\u7684\u8ba1\u7b97\u673a \u51e0\u4ee3\u7684\u8ba1\u7b97\u673a \uff1a * 1~4\u4ee3\uff1a\u771f\u7a7a\u7ba1->\u6676\u4f53\u7ba1->\u96c6\u6210\u7535\u8def->\u5927\u89c4\u6a21\u96c6\u6210\u7535\u8def * \u7b2c5\u4ee3\uff1a * * RISC\uff1a\u7cbe\u7b80\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a\u2014\u2014CPU\u5904\u7406\u7b80\u5355 * RISC-5 * MIPS * CISC\uff1a\u590d\u6742\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a\u2014\u2014\u6307\u4ee4\u6761\u6570\u5c11 * 80x86","title":"0. \u5386\u53f2"},{"location":"CO/CO/#1","text":"\u53d1\u5c55\u8fdb\u5c55\u2014\u2014\u6469\u5c14\u5b9a\u5f8b \u5e94\u7528 \u624b\u673a \u4e07\u7ef4\u7f51 ......","title":"1. \u4ecb\u7ecd"},{"location":"CO/CO/#2-eight-great-ideas","text":"\u6469\u5c14\u5b9a\u5f8b \u62bd\u8c61\u5316 Make common case fast ...... \u5c42\u6b21\u5b58\u50a8\u2014\u2014\u53c8\u5927\u53c8\u5feb \u53ef\u9760\u6027\u2014\u2014\u5907\u4efd","title":"2. Eight Great Ideas"},{"location":"CO/CO/#4","text":"\u663e\u793a \u4e3b\u677f CPU\u91cc\uff1a DataPath Control cache memory \u2014\u2014SRAM\u9759\u6001\u5b58\u50a8\uff0c\u9020\u4ef7\u9ad8 Memory Network","title":"4. \u786c\u4ef6\u7cfb\u7edf"},{"location":"CO/CO/#6-performence","text":"Response time \uff1a\u5b8c\u6210\u4e00\u4e2atask\u9700\u8981\u7684\u65f6\u95f4 Throughput \uff1a\u5355\u4f4d\u65f6\u95f4\u5b8c\u6210\u7684\u4efb\u52a1\u6570 \u201cX is n time faster than Y\u201d\uff1a Y \u6240\u7528\u65f6\u95f4\u662f X \u7684 n \u500d CPU time = \u65f6\u949f\u5468\u671f\u6570 \\(\\times\\) \u4e00\u4e2a\u5468\u671f\u957f\u5ea6 \u5c06\u4e00\u4e2a\u6307\u4ee4\u5206\u6210\u51e0\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u4e00\u4e2a\u5468\u671f(CPI = Cycle per Instruction) \u5219 $$ CPU\\ time = \u6307\u4ee4\u6570 \\times CPI \\times \u4e00\u4e2a\u5468\u671f\u957f\u5ea6 $$ $$ = \\frac{\u6307\u4ee4\u6570 \\times CPI}{\u65f6\u949f\u9891\u7387} $$","title":"6. Performence"},{"location":"CO/CO/#7","text":"Power Wall\uff1a\u63d0\u5347\u6027\u80fd\u8017\u80fd\u5de8\u5927\uff0c\u6e29\u5ea6\u9ad8 Memory Wall\uff1a\u4e8c\u5c42\u7f13\u51b2\u533aL2 cache\u53d8\u5927\u3001\u8868\u73b0\u53d8\u5dee\uff1bCPU\u6bd4\u5185\u5b58\u5feb\u5f97\u591a ILP Wall\uff1a\u96be\u4ee5\u5e76\u884c\u5904\u7406","title":"7. \u4e0d\u53ef\u80fd\u7684\u6027\u80fd\u63d0\u5347"},{"location":"CO/CO/#8-multiprocessors","text":"\u786c\u4ef6\u4e0a\u7684\u5e76\u884c\uff1a\u591a\u6838 Amdahl's Law: $$ T_{improved}=\\frac{T_{affected}}{improvement \\ t \\ factor}+T_{unaffected} $$ make common cases fast MIPS as a Performance Metric millions of instructions per second \u4e0d\u80fd\u7cbe\u786e\u53cd\u6620CPU\u6027\u80fd \u56e0\u4e3a\u6307\u4ee4\u6240\u5360\u5468\u671f\u6570\u4e0d\u540c","title":"8. Multiprocessors"},{"location":"CO/CO/#_2","text":"\uff08\u5904\u7406\u5668\uff09\u8ddf\u7740\u6469\u5c14\u5b9a\u5f8b \u9010\u5c42\u62bd\u8c61\u5316 make common cases fast \u591a\u6838 assignment:1-1, 1-2, 1-4, 1-6, 1-7, 1-14","title":"*\u8bbe\u8ba1\u539f\u5219"},{"location":"CO/CO/#chapter-3-arithmetic-for-computer","text":"","title":"Chapter 3: Arithmetic for Computer"},{"location":"CO/CO/#31-introduction","text":"\u8bfb\u3001\u5199\u5185\u5b58\uff1a lw, sw: load word, \u8bfb\u53d632\u4f4d\u957f\u5ea6\u7684\u5185\u5b58 ld, sd: load double word, 64\u4f4d lb, sb: load byte, \u4e00\u4e2a\u5b57\u8282 \u6839\u636e\u8d77\u59cb\u5730\u5740\u8bfb\u53d6\u4e0d\u540c\u957f\u5ea6\u7684\u5185\u5bb9 ALU\u76f8\u5173\uff1a slt x1 x2,x3: set if less than, x1=(x2<x3) \u5206\u652f\u8df3\u8f6c\u6307\u4ee4\uff1a beq, bne, jal: \u6709\u6761\u4ef6/\u65e0\u6761\u4ef6\u8df3\u8f6c","title":"3.1 Introduction"},{"location":"CO/CO/#32-possible-representation","text":"2's Biased notation \\(= 2's complement + 2^n\\) \u6700\u5c0f\uff1a \\(-2^n\\) \uff0c\u8868\u793a\u4e3a000000000000\u00b7\u00b7\u00b7 \u6700\u5927\uff1a \\(2^n\\) \uff0c11111111111\u00b7\u00b7\u00b7\u00b7 \u4fbf\u4e8e\u6bd4\u8f83\u5927\u5c0f\uff08\u76f8\u5f53\u4e8e\u65e0\u7b26\u53f7\u6570\uff09","title":"3.2 Possible representation"},{"location":"CO/CO/#33-arithmetic","text":"Overflow\uff1a\u6ea2\u51fa\u5224\u65ad \\(V = C_n \\oplus C_{n-1}\\) \u7b26\u53f7\u4f4d\u662f\u5426\u8fdb\u4f4d\u3001\u6700\u9ad8\u6570\u503c\u4f4d\u662f\u5426\u8fdb\u4f4d","title":"3.3 Arithmetic"},{"location":"CO/CO/#34-multiplication","text":"\u7531\u79fb\u4f4d\u548c\u52a0\u6cd5\u7ec4\u6210 * \u4e58\u6570\u662f1\uff1a\u79fb\u4f4d\u3001\u52a0\u4e0a * \u4e58\u6570\u662f0\uff1aadd 0 {width=200px} \\(4\\times 4\\) =>8\u4f4d\u52a0\u6cd5\u5668 {width=500px} \u5927\u4e14\u6162\uff1a \\(64\\times64\\) =>128\u4f4d\u52a0\u6cd5\u5668\u752864\u6b21 \u6539\u8fdb\uff1a {width=600px} * \u4e0d\u79fb\u88ab\u4e58\u6570\uff0c\u53f3\u79fb\u57fa\uff08\u4f4e\u4f4d\u4e0d\u53c2\u4e0e\u540e\u7eed\u8fd0\u7b97\uff09 * \u52a0\u6cd5\u5668\u4f4d\u6570\u51cf\u534a \u8fdb\u4e00\u6b65\uff1a\u5c06\u4e58\u6570\u653e\u5728\u57fa\u4e2d {width=600px} \u4e58\u6cd5\u4e0d\u80fd\u7528\u8865\u7801 \u6709\u7b26\u53f7\u6570\u7684\u4e58\u6cd5 \u5c06\u7b26\u53f7\u4fdd\u5b58 \u8f6c\u6362\u4e3a\u7edd\u5bf9\u503c \u540c\u53f7\u4e3a\u6b63\uff0c\u5f02\u53f7\u4e3a\u8d1f Booth's Algorithm \uff1f {width=600px} {width=600px} * \u9ed8\u8ba4 \\(C_{-1}\\) =0 {width=600px} \u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a \u7528\u591a\u4e2aALU\u5e76\u884c\u5b9e\u73b0","title":"3.4 Multiplication"},{"location":"CO/CO/#35-divide","text":"\u9664\u6cd5\u5b9e\u73b0\u57fa\u672c\u601d\u60f3\uff1a 1. \u5c06\u88ab\u9664\u6570\u6bcf\u6b21\u5de6\u79fb\uff0c\u51cf\u6389\u9664\u6570 2. \u5982\u679c\u7ed3\u679c\u5927\u4e8e\u7b49\u4e8e0\uff0c\u5219\u6709\u6548\uff0c\u5728\u5546\u4e0a\u52a0\u4e00\u4e2a1 3. \u5426\u5219\u65e0\u6548\uff0c\u5c06\u9664\u6570\u52a0\u56de\u53bb\uff0c\u5728\u5546\u4e0a\u52a0\u4e00\u4e2a0 4. \u9700\u8981\u8fed\u4ee365\u6b21\uff0864\u4f4d\uff09 {width=200px} {width=600px} \u5177\u4f53\u5b9e\u73b0\uff1a \u9664\u6570\u653e\u5728\u9ad8\u4f4d\uff0c\u88ab\u9664\u6570\u653e\u5728\u4f4e\u4f4d\uff0c\u88ab\u9664\u6570\u51cf\u9664\u6570\u7684\u7ed3\u679c\u653e\u5728\u88ab\u9664\u6570\u7684\u9ad8\u4f4d\uff0c\u6bcf\u6b21\u53f3\u79fb\u9664\u6570 {width=600px} \u6539\u8fdb\uff1a\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\u3002 \u5c06\u88ab\u9664\u6570\u5de6\u79fb\uff0c\u79fb\u51fa\u6765\u7684\u4f4d\u7f6e\u653e\u5546\uff0c\u9ad8\u4f4d\u51cf\u5269\u4e0b\u6765\u7684\u662f\u4f59\u6570\uff0c\u4f1a\u591a\u79fb\u4e00\u4f4d\u3002\u56e0\u6b64\u6700\u540e\u8981\u628a\u9ad8\u4f4d\u53f3\u79fb\u4e00\u4f4d {width=600px} \u7b26\u53f7\u7ea6\u5b9a\uff1a\u4f59\u6570\u548c\u88ab\u9664\u6570\u7b26\u53f7\u4e00\u81f4 \u8f6f\u4ef6\u68c0\u67e5\u9664\u6570\u662f\u5426\u4e3a0\uff08\u5904\u7406\u5668\u4e0d\u7ba1\uff09","title":"3.5 Divide"},{"location":"CO/CO/#36-float","text":"{width=600px} * Bias: single\u2014\u2014127, double\u2014\u20141023 * 1\u662f\u9690\u542b\u7684\uff08\u79d1\u5b66\u8ba1\u6570\u6cd5\uff09 \u4f8b\uff1a \\(15=1111=1.111\\times2^3\\) float: 0 10000010 111000... (Exponet = 3+127 = 130) {width=600px} \u5927\u7ea6\u76f8\u5f53\u4e8e6\u4f4d\u5341\u8fdb\u5236\u5c0f\u6570\u7cbe\u5ea6 {width=600px} * Exponent=00...0\u2014\u2014\u9690\u542b\u7684\u9996\u4f4d\u662f0 0 00...0 00...0 = {width=600px} \u5982\u4f55\u8fdb\u884c\u8fd0\u7b97 \uff1a * \u52a0\u6cd5 1. Alignment\uff08\u5bf9\u9f50\uff09 2. The proper digits have to be added\uff08\u5c0f\u7684\u5f80\u5927\u7684\u9760\uff09 3. Addition of significands 4. Normalization of the result\uff08\u5f52\u4e00\u5316\uff09 5. Rounding\uff08\u820d\u5165\uff0c\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u5f52\u4e00\u5316\uff09 {width=600px} \u4e58\u6cd5\uff1a {width=400px} \u6307\u6570\u76f8\u52a0\uff0c\u8fd8\u8981\u51cf\u53bb127\uff08bias\uff09 {width=400px} Accurate Arithmeticd * \u4e3a\u63d0\u5347\u7cbe\u5ea6\uff0c\u6700\u591a\u52a0\u4e09\u4f4d(guard, round, sticky) * guard\u4f4d\u548cround\uff1a\u5728\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u591a\u4fdd\u7559\u4e24\u4f4d * sticky\u4f4d\uff1a\u5728\u7ed3\u679c\u4f4d\u7684\u53f3\u8fb9\u5982\u6709\u4e0d\u4e3a0\u7684bit\uff0c\u5219\u4e3a1 * \u53ef\u4ee5\u5206\u8fa80.500000...0\u548c0.500000...1 round\u65b9\u5f0f\u53ef\u9009","title":"3.6 Float"},{"location":"DailyLife/DailyLife/","text":"\u8fd9\u91cc\u662f\u65e5\u5e38\u751f\u6d3b\u7684\u8bb0\u5f55\ud83d\ude00 \u547d\u8fd0\u7684\u9f7f\u8f6e\u5f00\u59cb\u8f6c\u52a8 2024.3.16\u6478\u5230\u7684\u732b \u7ffb\u76f8\u518c\u5c45\u7136\u57282023.9.19\u9047\u5230\u8fc7\uff0c\u62cd\u4e86\u7167\u7247\u5b58\u8d77\u6765 \u8fd8\u53d1\u7ed9lulu\u770b\u4e86 \u602a\u4e0d\u5f97\u5979\u8bf4\u6709\u70b9\u773c\u719f","title":"DailyLife"},{"location":"DataBase/DataBase/","text":"\u6570\u636e\u5e93\u7cfb\u7edf Database Management System\uff08DBMS\uff09 \u6210\u7ee9\u6784\u6210\uff1a \u8003\u8bd5\u53ef\u5e26A4\u7eb8 \u6559\u6750\uff1aDatabase System Concepts (7th Edition) 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19 Lecture 1: Introduction Purpose \u6570\u636e\u5e93\uff1a\u957f\u671f\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u5185\u3001\u6709\u7ec4\u7ec7\u7684\u3001\u53ef\u5171\u4eab\u7684\u6570\u636e\u96c6\u5408 \u6570\u636e\u5e93\u7cfb\u7edf\uff08DBMS\uff09\uff1a\u6570\u636e\u5e93 + \u53ef\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u7684\u7a0b\u5e8f DBMS\u7684\u7279\u5f81 \u6570\u636e\u8bbf\u95ee \u9ad8\u6548\u3001\u7a33\u5b9a\u3001\u53ef\u6269\u5c55 \u7f29\u77ed\u5e94\u7528\u7684\u5f00\u53d1\u65f6\u95f4 \u6570\u636e\u72ec\u7acb\u6027\uff08physical\u548clogical\uff09 \u6570\u636e\u5b8c\u6574\u6027\u548c\u5b89\u5168\u6027 \u5e76\u53d1\u8bbf\u95ee\u548c\u9c81\u68d2\u6027\uff08\u6613\u6062\u590d DBMS VS File-Processing System \u6587\u4ef6\u5904\u7406\u7cfb\u7edf\u7531\u4f20\u7edf\u7684\u64cd\u4f5c\u7cfb\u7edf \uff08OS\uff09 \u652f\u6301\u3002 View \u5982\u679c\u60f3\u8981\u9690\u85cf \u65b0\u5efa\u4e00\u4e2a\u8868\uff1a\u7a7a\u95f4\u3001 \u540c\u6b65\u95ee\u9898 \u540c\u4e00\u5f20\u8868\u4e0a\u7528\u4e0d\u540c\u7684\u89c6\u56fe Database Langueage Data Definition Language (DDL) Data Manipulation Language (DML) Data Control Language (DCL) SQL = DDL+ DML+DCL Transaction Management \u5e76\u53d1\u8bbf\u95ee\u5e26\u6765\u95ee\u9898 \u6570\u636e\u5e93\u4fdd\u8bc1\u539f\u5b50\u6027\u3001\u4e00\u81f4\u6027\u3001\u9694\u79bb\u6027\u3001\u6301\u4e45\u6027 Database Architecture Storage Manager Query Processor\uff1a\u63cf\u8ff0\u6027\u8bed\u53e5\u8f6c\u5316\u6210\u64cd\u4f5c Overall System Structure Application Architecture Lecture 2: Relational Model Structure of Relational Databases \u57fa\u672c\u7ed3\u6784\uff1a\u7b1b\u5361\u5c14\u79ef {width=400px} * \u53ef\u7528\u4e8c\u7ef4\u8868\u8868\u793a * \u53cd\u6620\u7279\u5b9a\u610f\u4e49\u7684\u5b50\u96c6\u5c31\u662f \u5173\u7cfb \uff0c\u4f8b\u5982\uff1a {width=300px} * \u5bfc\u5e08\u2014\u2014\u5c5e\u6027\uff08attribute\uff09 * \u5c5e\u6027\u503c\u2014\u2014\u539f\u5b50\u6027\uff08\u4e0d\u53ef\u5206\u5272\uff09 * \u6240\u6709\u53ef\u53d6\u7684\u503c\u2014\u2014\u57df Key * \u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5173\u7cfb\u4e2d\u53e6\u4e00\u4e2a\u5c5e\u6027\u7684\u503c\u7684 \u5c5e\u6027 * \u4f8b\u5982\u77e5\u9053\u5b66\u53f7\u53ef\u4ee5\u786e\u5b9a\u5b66\u751f\uff0c\u5b66\u53f7\u662fkey Foreign Key\uff08\u5916\u952e\uff09 \u5728\u5f53\u524d\u8868\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\uff0c\u4f46\u5728\u53e6\u4e00\u5f20\u8868\u53ef\u4ee5 \u4e13\u4e1a\u53f7\u4e0d\u80fd\u786e\u5b9a\u5b66\u751f\uff0c\u4f46\u5728\u53e6\u4e00\u5f20{\u4e13\u4e1a\u53f7\uff0c\u4e13\u4e1a}\u7684\u8868\u91cc\u53ef\u4ee5\u786e\u5b9a\u4e13\u4e1a Fundamental Relational-Algebra Operations 6\u4e2a\u57fa\u672c\u64cd\u4f5c\uff1a\u6536\u52301-2\u4e2a\u8868\uff0c\u8fd4\u56de\u4e00\u4e2a \u8868 * Select \u9009\u62e9 \uff08\u6a2a\u5411\u5207\u5272\uff09 * \u7b26\u53f7\uff1a$\\sigma_{branch-name=\u2018Perryridge\u2019 }(account) $ * ?: Note that, the selection conditions need to aim at the attribute values of the same tuple, when we conduct section operation. Project \u6295\u5f71 \uff08\u7eb5\u5411\u5207\u5272\u2014\u2014\u6ce8\u610f\u76f8\u540c\u7684\u96c6\u5408\u5143\u7d20\u8981\u5408\u5e76\uff09 Union \u5e76 set difference \u5dee\uff08\u96c6\u5408\u5dee\uff09 Cartesian product \u7b1b\u5361\u513f\u79ef Rename \u6539\u540d\uff08\u91cd\u547d\u540d\uff09 Example Queries 5: Find the names of all customers who have a loan at the Perryridge branch. \u65b9\u6cd51\uff1a\uf0d5customer-name(\uf073branch-name=\u2018Perryridge\u2019 (\uf073borrower.loan-number = loan.loan-number(borrower x loan))) \u65b9\u6cd52\uff1a\uf0d5customer-name(\uf073borrower.loan-number = loan.loan-number (borrower x (\uf073branch-name=\u2018Perryridge\u2019 (loan)))) * \u9700\u8981\u4e58\u7684\u4e1c\u897f\u66f4\u5c11\uff0c\u8282\u7701\u5f00\u9500 Example Queries 7: Find the largest account balance (i.e., self-comparison ). \u6539\u540d\u7684\u7528\u5904 Additional Relational-Algebra Operations Four basic operators Set intersection \u4ea4 \u53ef\u4ee5\u7528\u5dee\u6765\u8868\u793a\uff1aA \u2229 B = A - (A - B) Natural join \u81ea\u7136\u8fde\u63a5 \u591a\u4e2a\u8868\u7684\u64cd\u4f5c\u7ecf\u5e38\u7528\u5230 \u7531\u7b1b\u5361\u5c14\u79ef\u548c\u9009\u62e9\u7ec4\u6210 * Notion: \\(\\gamma \\bowtie s\\) Division \u9664 \u7b1b\u5361\u5c14\u79ef\u7684\u9006\u8fd0\u7b97 {width=450px} Notion: $ r \\div s$ \u7528\u57fa\u672c\u64cd\u4f5c\u63a8\u5bfc Assignment \u8d4b\u503c \\(<-\\) Summary: * Union, set difference, Set intersection \u4e3a\u53cc\u76ee\u3001 \u7b49\u5143 \u8fd0\u7b97 * Cartesian product, Natural join, Division \u4e3a\u53cc\u76ee\u8fd0\u7b97 * Project, select \u4e3a\u5355\u76ee\u8fd0\u7b97 \u4f18\u5148\u7ea7\uff1a\u5355\u76ee>\u591a\u76ee\uff0c\u4e58\u9664>\u52a0\u51cf Extended Relational-Algebra Operations Generalized Projection: \u5e7f\u4e49\u6295\u5f71 * \u53ef\u4ee5\u7528\u4ee3\u6570\u8fd0\u7b97\u4ea7\u751f\u4e00\u4e2a\u65b0\u5c5e\u6027 Aggregate Functions: \u805a\u5408\u51fd\u6570 * Aggregation function takes a collection of values and returns a single value as a result. avg: average value min: minimum value max: maximum value sum: sum of values count: number of values \u5f0f\u5b50\u524d\u9762\u52a0\u5c5e\u6027A\uff1a\u6839\u636e\u5c5e\u6027A\u5206\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u5173\u7cfb E.g., \u6c42\u5e73\u5747\u5b58\u6b3e\u4f59\u989d $g_{avg(balance)}(account) $ Modification of the Database \u6570\u636e\u5e93\u66f4\u6539\u64cd\u4f5c: Deletion, Insertion, Updating All these operations are expressed using the assignment operator. Lecture 3: SQL Structured Query Language\u2014\u2014\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00 \u4e0e\u56fd\u9645\u6807\u51c6\u4e0d\u540c\u2014\u2014\u6ca1\u4eba\u8981 \u4e0e\u56fd\u9645\u6807\u51c6\u76f8\u540c\u2014\u2014\u6613\u66ff\u4ee3 Data Definition Language CREATE TABLE branch (branch_name char(15) not null, branch_city varchar(30), assets numeric(8,2), primary key (branch_name)) Domain Types: * char(n): Fixed length character string, with user-specified length. * varchar(n): Variable length character strings, with user-specified maximum length n. * int: Integer (a finite subset of the integers that is machine-dependent). * smallint: Small integer (a machine-dependent subset of the integer domain type). * numeric(p, d): Fixed point number, with user-specified precision of p digits, with d digits to the right of decimal point. * real, double precision: Floating point and double-precision floating point numbers, with machine-dependent precision. DROP TABLE r\uff1a\u5c06\u6570\u636e\u548c\u8868\u90fd\u5220\u6389 Basic Structure Set Operations Aggregate Functions Null Values Nested Subqueries Views Derived Relations Modification of the Database Joined Relations file:///E:/book/DB/Database_System_Concepts.pdf","title":"Use sql"},{"location":"DataBase/DataBase/#_1","text":"Database Management System\uff08DBMS\uff09 \u6210\u7ee9\u6784\u6210\uff1a \u8003\u8bd5\u53ef\u5e26A4\u7eb8 \u6559\u6750\uff1aDatabase System Concepts (7th Edition) 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19","title":"\u6570\u636e\u5e93\u7cfb\u7edf"},{"location":"DataBase/DataBase/#lecture-1-introduction","text":"","title":"Lecture 1: Introduction"},{"location":"DataBase/DataBase/#purpose","text":"\u6570\u636e\u5e93\uff1a\u957f\u671f\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u5185\u3001\u6709\u7ec4\u7ec7\u7684\u3001\u53ef\u5171\u4eab\u7684\u6570\u636e\u96c6\u5408 \u6570\u636e\u5e93\u7cfb\u7edf\uff08DBMS\uff09\uff1a\u6570\u636e\u5e93 + \u53ef\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u7684\u7a0b\u5e8f DBMS\u7684\u7279\u5f81 \u6570\u636e\u8bbf\u95ee \u9ad8\u6548\u3001\u7a33\u5b9a\u3001\u53ef\u6269\u5c55 \u7f29\u77ed\u5e94\u7528\u7684\u5f00\u53d1\u65f6\u95f4 \u6570\u636e\u72ec\u7acb\u6027\uff08physical\u548clogical\uff09 \u6570\u636e\u5b8c\u6574\u6027\u548c\u5b89\u5168\u6027 \u5e76\u53d1\u8bbf\u95ee\u548c\u9c81\u68d2\u6027\uff08\u6613\u6062\u590d DBMS VS File-Processing System \u6587\u4ef6\u5904\u7406\u7cfb\u7edf\u7531\u4f20\u7edf\u7684\u64cd\u4f5c\u7cfb\u7edf \uff08OS\uff09 \u652f\u6301\u3002","title":"Purpose"},{"location":"DataBase/DataBase/#view","text":"\u5982\u679c\u60f3\u8981\u9690\u85cf \u65b0\u5efa\u4e00\u4e2a\u8868\uff1a\u7a7a\u95f4\u3001 \u540c\u6b65\u95ee\u9898 \u540c\u4e00\u5f20\u8868\u4e0a\u7528\u4e0d\u540c\u7684\u89c6\u56fe","title":"View"},{"location":"DataBase/DataBase/#database-langueage","text":"Data Definition Language (DDL) Data Manipulation Language (DML) Data Control Language (DCL) SQL = DDL+ DML+DCL","title":"Database Langueage"},{"location":"DataBase/DataBase/#transaction-management","text":"\u5e76\u53d1\u8bbf\u95ee\u5e26\u6765\u95ee\u9898 \u6570\u636e\u5e93\u4fdd\u8bc1\u539f\u5b50\u6027\u3001\u4e00\u81f4\u6027\u3001\u9694\u79bb\u6027\u3001\u6301\u4e45\u6027","title":"Transaction Management"},{"location":"DataBase/DataBase/#database-architecture","text":"Storage Manager Query Processor\uff1a\u63cf\u8ff0\u6027\u8bed\u53e5\u8f6c\u5316\u6210\u64cd\u4f5c Overall System Structure Application Architecture","title":"Database Architecture"},{"location":"DataBase/DataBase/#lecture-2-relational-model","text":"","title":"Lecture 2: Relational Model"},{"location":"DataBase/DataBase/#structure-of-relational-databases","text":"\u57fa\u672c\u7ed3\u6784\uff1a\u7b1b\u5361\u5c14\u79ef {width=400px} * \u53ef\u7528\u4e8c\u7ef4\u8868\u8868\u793a * \u53cd\u6620\u7279\u5b9a\u610f\u4e49\u7684\u5b50\u96c6\u5c31\u662f \u5173\u7cfb \uff0c\u4f8b\u5982\uff1a {width=300px} * \u5bfc\u5e08\u2014\u2014\u5c5e\u6027\uff08attribute\uff09 * \u5c5e\u6027\u503c\u2014\u2014\u539f\u5b50\u6027\uff08\u4e0d\u53ef\u5206\u5272\uff09 * \u6240\u6709\u53ef\u53d6\u7684\u503c\u2014\u2014\u57df Key * \u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5173\u7cfb\u4e2d\u53e6\u4e00\u4e2a\u5c5e\u6027\u7684\u503c\u7684 \u5c5e\u6027 * \u4f8b\u5982\u77e5\u9053\u5b66\u53f7\u53ef\u4ee5\u786e\u5b9a\u5b66\u751f\uff0c\u5b66\u53f7\u662fkey Foreign Key\uff08\u5916\u952e\uff09 \u5728\u5f53\u524d\u8868\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\uff0c\u4f46\u5728\u53e6\u4e00\u5f20\u8868\u53ef\u4ee5 \u4e13\u4e1a\u53f7\u4e0d\u80fd\u786e\u5b9a\u5b66\u751f\uff0c\u4f46\u5728\u53e6\u4e00\u5f20{\u4e13\u4e1a\u53f7\uff0c\u4e13\u4e1a}\u7684\u8868\u91cc\u53ef\u4ee5\u786e\u5b9a\u4e13\u4e1a","title":"Structure of Relational Databases"},{"location":"DataBase/DataBase/#fundamental-relational-algebra-operations","text":"6\u4e2a\u57fa\u672c\u64cd\u4f5c\uff1a\u6536\u52301-2\u4e2a\u8868\uff0c\u8fd4\u56de\u4e00\u4e2a \u8868 * Select \u9009\u62e9 \uff08\u6a2a\u5411\u5207\u5272\uff09 * \u7b26\u53f7\uff1a$\\sigma_{branch-name=\u2018Perryridge\u2019 }(account) $ * ?: Note that, the selection conditions need to aim at the attribute values of the same tuple, when we conduct section operation. Project \u6295\u5f71 \uff08\u7eb5\u5411\u5207\u5272\u2014\u2014\u6ce8\u610f\u76f8\u540c\u7684\u96c6\u5408\u5143\u7d20\u8981\u5408\u5e76\uff09 Union \u5e76 set difference \u5dee\uff08\u96c6\u5408\u5dee\uff09 Cartesian product \u7b1b\u5361\u513f\u79ef Rename \u6539\u540d\uff08\u91cd\u547d\u540d\uff09 Example Queries 5: Find the names of all customers who have a loan at the Perryridge branch. \u65b9\u6cd51\uff1a\uf0d5customer-name(\uf073branch-name=\u2018Perryridge\u2019 (\uf073borrower.loan-number = loan.loan-number(borrower x loan))) \u65b9\u6cd52\uff1a\uf0d5customer-name(\uf073borrower.loan-number = loan.loan-number (borrower x (\uf073branch-name=\u2018Perryridge\u2019 (loan)))) * \u9700\u8981\u4e58\u7684\u4e1c\u897f\u66f4\u5c11\uff0c\u8282\u7701\u5f00\u9500 Example Queries 7: Find the largest account balance (i.e., self-comparison ). \u6539\u540d\u7684\u7528\u5904","title":"Fundamental Relational-Algebra Operations"},{"location":"DataBase/DataBase/#additional-relational-algebra-operations","text":"Four basic operators Set intersection \u4ea4 \u53ef\u4ee5\u7528\u5dee\u6765\u8868\u793a\uff1aA \u2229 B = A - (A - B) Natural join \u81ea\u7136\u8fde\u63a5 \u591a\u4e2a\u8868\u7684\u64cd\u4f5c\u7ecf\u5e38\u7528\u5230 \u7531\u7b1b\u5361\u5c14\u79ef\u548c\u9009\u62e9\u7ec4\u6210 * Notion: \\(\\gamma \\bowtie s\\) Division \u9664 \u7b1b\u5361\u5c14\u79ef\u7684\u9006\u8fd0\u7b97 {width=450px} Notion: $ r \\div s$ \u7528\u57fa\u672c\u64cd\u4f5c\u63a8\u5bfc Assignment \u8d4b\u503c \\(<-\\) Summary: * Union, set difference, Set intersection \u4e3a\u53cc\u76ee\u3001 \u7b49\u5143 \u8fd0\u7b97 * Cartesian product, Natural join, Division \u4e3a\u53cc\u76ee\u8fd0\u7b97 * Project, select \u4e3a\u5355\u76ee\u8fd0\u7b97 \u4f18\u5148\u7ea7\uff1a\u5355\u76ee>\u591a\u76ee\uff0c\u4e58\u9664>\u52a0\u51cf","title":"Additional Relational-Algebra Operations"},{"location":"DataBase/DataBase/#extended-relational-algebra-operations","text":"Generalized Projection: \u5e7f\u4e49\u6295\u5f71 * \u53ef\u4ee5\u7528\u4ee3\u6570\u8fd0\u7b97\u4ea7\u751f\u4e00\u4e2a\u65b0\u5c5e\u6027 Aggregate Functions: \u805a\u5408\u51fd\u6570 * Aggregation function takes a collection of values and returns a single value as a result. avg: average value min: minimum value max: maximum value sum: sum of values count: number of values \u5f0f\u5b50\u524d\u9762\u52a0\u5c5e\u6027A\uff1a\u6839\u636e\u5c5e\u6027A\u5206\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u5173\u7cfb E.g., \u6c42\u5e73\u5747\u5b58\u6b3e\u4f59\u989d $g_{avg(balance)}(account) $","title":"Extended Relational-Algebra Operations"},{"location":"DataBase/DataBase/#modification-of-the-database","text":"\u6570\u636e\u5e93\u66f4\u6539\u64cd\u4f5c: Deletion, Insertion, Updating All these operations are expressed using the assignment operator.","title":"Modification of the Database"},{"location":"DataBase/DataBase/#lecture-3-sql","text":"Structured Query Language\u2014\u2014\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00 \u4e0e\u56fd\u9645\u6807\u51c6\u4e0d\u540c\u2014\u2014\u6ca1\u4eba\u8981 \u4e0e\u56fd\u9645\u6807\u51c6\u76f8\u540c\u2014\u2014\u6613\u66ff\u4ee3","title":"Lecture 3: SQL"},{"location":"DataBase/DataBase/#data-definition-language","text":"CREATE TABLE branch (branch_name char(15) not null, branch_city varchar(30), assets numeric(8,2), primary key (branch_name)) Domain Types: * char(n): Fixed length character string, with user-specified length. * varchar(n): Variable length character strings, with user-specified maximum length n. * int: Integer (a finite subset of the integers that is machine-dependent). * smallint: Small integer (a machine-dependent subset of the integer domain type). * numeric(p, d): Fixed point number, with user-specified precision of p digits, with d digits to the right of decimal point. * real, double precision: Floating point and double-precision floating point numbers, with machine-dependent precision. DROP TABLE r\uff1a\u5c06\u6570\u636e\u548c\u8868\u90fd\u5220\u6389 Basic Structure Set Operations Aggregate Functions Null Values Nested Subqueries Views Derived Relations Modification of the Database Joined Relations file:///E:/book/DB/Database_System_Concepts.pdf","title":"Data Definition Language"},{"location":"ads/ads_part_1/","text":"Preparation Before Class \u6559\u6750 \u6570\u636e\u7ed3\u6784\u6559\u6750 introduction to algorithms algorithm design \u6570\u636e\u7ed3\u6784\u5b66\u4e60\u4e0e\u5b9e\u9a8c\u6307\u5bfc \u8bc4\u5206 \u4f5c\u4e1a\uff1a10% Discussion\uff1a10% Research Topic\uff1a10% \u671f\u4e2d\uff1a10%\uff08\u53ef\u88ab\u671f\u672b\u8986\u76d6\uff09 \u671f\u672b\uff1a40% AVL Trees \u76ee\u6807\uff1a\u52a0\u901f\u67e5\u627e \u65b9\u6cd5\uff1a\u67e5\u627e\u6811 O(height) \u9012\u589e/\u9012\u51cf\u5e8f\u5217\u9000\u5316\u6210\u94fe \u6700\u597d\u60c5\u51b5\uff08\u6811\u6700\u77ee\uff09\uff1a\u6240\u6709\u5b50\u6811\u9ad8\u5ea6\u76f8\u7b49\u2014\u2014\u592a\u82db\u523b AVL\u6811\u5b9a\u4e49 \u7a7a\u6811\u5e73\u8861 \u975e\u7a7a\u6811\u5e73\u8861\u5f53\u4e14\u4ec5\u5f53 \u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u90fd\u5e73\u8861 \u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u5c0f\u4e8e\u7b49\u4e8e1 \u5e73\u8861\u56e0\u5b50BF\uff08node\uff09=\u5de6\u5b50\u6811\u9ad8\u5ea6-\u53f3\u5b50\u6811\u9ad8\u5ea6 AVL\u53ea\u80fd\u53d6-1\uff0c0\uff0c1 \u672c\u8bfe\u4e2d\u5b9a\u4e49\u7a7a\u6811\u9ad8\u5ea6\u4e3a-1 \u51e0\u4e2a\u4f8b\u5b50\uff1a \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6027\u8d28\u8f83\u597d\u7684\u6811 \u5982\u4f55\u5f97\u5230AVL\u6811 \u6811\u7684\u65cb\u8f6c B\u9ad8\u5ea6\u589e\u52a01\uff0cA\u9ad8\u5ea6\u51cf\u5c111\u3002\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \uff0c\u4ee3\u7801\u5982\u4e0b typedef struct Node *Tree; struct Node { ElementType Element; Tree Left; Tree Right; } A->Left=B->Right; B->Right=A; return B;//\u65b0\u6839 AVL\u6811\u7684\u63d2\u5165 \uff1a \u6bcf\u63d2\u5165\u4e00\u4e2a\u65b0\u7ed3\u70b9\uff0c\u8bb0\u5f55\uff08\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\uff09\u9ad8\u5ea6\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u5e73\u8861\u56e0\u5b50\uff0c\u4e00\u4f46\u4e0d\u7b26\u5408\u6761\u4ef6 \u56e0\u5b50\u5728\u540c\u4e00\u4e2a\u65b9\u5411\u53d8\u5316 -2\uff1a\u5de6\u65cb\uff08RR Rotation\u2014\u2014\u6307\u4ece\u5931\u8861\u8282\u70b9\u5f00\u59cb\u5411\u53f3\u63d2\u4e24\u6b21\u7684\u60c5\u51b5\uff09 2\uff1a \u53f3\u65cb\uff08LL Rotation\uff0c\u4e0eRR\u5bf9\u79f0\uff09 \u4e0d\u540c\u65b9\u5411\uff1a\u628a\u6811\u9ad8\u9ad8\u65b9\u5411\u7684\u5b59\u5b50\u8f6c\u4e0a\u6765\uff0c\u8f6c\u4e24\u6b21\uff08\u4e24\u79cd\u5bf9\u79f0\u60c5\u51b5\uff0cLR\u548cRL\uff09 \u5b9e\u9645\u4e0a\uff0c\u6839\u636eAVL\u6811\u7684\u826f\u597d\u5b9a\u4e49\uff0c\u5728\u6bcf\u6b21\u63d2\u5165\u540e\u53ea\u9700\u8981\u4e00\u6b21\u64cd\u4f5c\uff08RR/LR...\uff09\u5c31\u80fd\u4f7f\u5176\u518d\u6b21\u5e73\u8861\u3002 AVL\u6811\u7684\u5220\u9664 \uff1a \u7528\u5220\u9664\u8282\u70b9\u5de6\u5b50\u6811\u7684\u6700\u5927\u8282\u70b9/\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8282\u70b9\u66ff\u6362\u4ed6\uff08\u4e0eBST\u76f8\u540c\uff09\uff0c\u518d\u5220\u9664\u3002 \u4ece\u5220\u9664\u8282\u70b9\u7684\u7236\u8282\u70b9\u5f00\u59cb\uff08\u66ff\u6362\u540e\uff09\uff0c\u8bb0\u5f55\uff08\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\uff09\u9ad8\u5ea6\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u5e73\u8861\u56e0\u5b50\uff0c\u4e00\u4f46\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u5c31\u7528insert\u4e2d\u7684\u65b9\u6cd5\u8c03\u6574\u3002\u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u591a\u6b21\u8c03\u6574\u3002 \u590d\u6742\u5ea6\u5206\u6790 \u6811\u9ad8\u7684\u6e10\u8fdb\u4e0a\u754c \\(n_h\\) \u2014\u2014h\u9ad8\u5ea6\u7684\u6811\u9700\u8981\u7684\u6700\u5c0f\u7ed3\u70b9\u6570 \u9ad8\u5ea6\u4e3ah\u7684\u6811\uff08\u6240\u9700\u8282\u70b9\u6700\u5c11\uff09\u5982\u4e0b \u4e0e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7c7b\u4f3c\uff1a \\(F_0=0,F_1=1,F_n=F_{n-1}+F_{n-2}\\) \u800c \\(F_n\\approx\\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^i\\) \u6240\u4ee5 \\(n_h =F_{n+3}-1\\) \\(h=O(lnn)\\) Splay Trees \u76ee\u6807\uff1aM\u6b21\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(MlogN)\\) \uff0c\u5373\u6bcf\u4e2a\u64cd\u4f5c\u5e73\u5747\u590d\u6742\u5ea6\u4e3a \\(O(logN)\\) \u57fa\u672c\u601d\u60f3\uff1a\u6bcf\u6b21\u67e5\u8be2/\u63d2\u5165\uff0c\u5c06\u8be5\u5143\u7d20\u63d0\u5230\u6839\u8282\u70b9 \u6784\u9020\u8fc7\u7a0b \u5982\u679c\u67e5\u8be2\u8282\u70b9\u7684\u7236\u4eb2\u662f\u6839\u2014\u2014\u65cb\u8f6c\u67e5\u8be2\u8282\u70b9 \u5982\u679c\u4e0d\u662f\uff0c\u5219\u6709\u7236\u4eb2\u8282\u70b9\uff08P\uff09\u548c\u7956\u7236\u8282\u70b9\uff08G\uff09 zig-zag\uff08z\u5b57\u5f62\uff09\uff1a\u8f6c\u4e24\u6b21\u5f53\u524d\u8282\u70b9 zig-zig\uff08\u4e00\u4e2a\u65b9\u5411\uff09\uff1a\u5148\u8f6c\u7236\u8282\u70b9\uff0c\u518d\u8f6c\u5f53\u524d\u8282\u70b9 \u5220\u9664\u64cd\u4f5c \u627e\u5230\u8981\u5220\u9664\u7684\u5143\u7d20X\uff08\u8fd9\u6837\u8ba9\u5176\u5728\u6839\u8282\u70b9\uff09 \u5220\u6389X\uff0c\u5f97\u5230\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811 \u627e\u5230\u5de6\u5b50\u6811\u6700\u5927\u7684\u8282\u70b9\uff0c\u5c06\u5176\u63a8\u5230\u6839\u8282\u70b9 \u8fd9\u6837\u5c31\u80fd\u76f4\u63a5\u5c06\u53f3\u5b50\u6811\u63a5\u5230\u5de6\u5b50\u6811\u7684\u53f3\u8fb9 Amortized Analysis(Three normal methods) An amortized analysis guarantees the average performance of each operation in the worst case. Splay\u6811\u7684\u76ee\u6807\uff1aM\u6b21\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(MlogN)\\) \u2014\u2014\u5747\u644a\u65f6\u95f4\u4e0a\u754c( Amortized time bound ) worst-case bound >= amortized time bound >= average-case bound \u524d\u4e24\u79cd\u4e0e\u6570\u636e\u5206\u5e03\u65e0\u5173 \u805a\u5408\u5206\u6790 \u5bf9\u4e8e\u6240\u6709 n\uff0cn \u4e2a\u8fd0\u7b97\u5e8f\u5217\u603b\u5171\u9700\u8981\u6700\u574f\u60c5\u51b5\u65f6\u95f4\uff08determine an upper bound\uff09 T\uff08n\uff09\u3002\u56e0\u6b64\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7684\u5e73\u5747\u6210\u672c\u6216\u644a\u9500\u6210\u672c\u4e3a T\uff08n\uff09/n\u3002 \u4ee5\u6808\u4e3a\u4f8b\uff1a push\uff1a \\(O(1)\\) \uff0c pop\uff1a \\(O(1)\\) \uff0c multipop\uff08\u4e00\u6b21pop\u51fan\u4e2a\uff09\uff1a \\(min\\{k\uff0cn\\}=O(n)\\) \uff0c\u5176\u4e2dk\u662f\u5f53\u524d\u6808\u4e2d\u5143\u7d20\u6570 \u6240\u4ee5n\u6b21\u64cd\u4f5c\u4e0a\u754c\uff1a \\(O(n^2)\\) \u66f4\u7cbe\u786e\uff1a\u6808\u4e2d\u5143\u7d20\u6570\u80af\u5b9a\u5c0f\u4e8en\uff0cpush\u8fdb\u7684\u5143\u7d20\u53ea\u80fdpop\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) $$T_{amortized}= O( n )/n = O(1) $$ \u6838\u7b97\u6cd5 \u4ee5\u5356\u6c7d\u6c34\u4e3a\u4f8b\uff1a a\u5356\u4e00\u74f6\u6c7d\u6c34 3\u5143 b\u7528 5\u5143 \u4e70\u6c7d\u6c34\uff0c\u5b58\u4e24\u5143\uff08credits\uff09\u5230a\u90a3\uff0c\u4e0b\u6b21\u4e70\u6c7d\u6c34\u53ef\u4ee5\u7528\u3002\u6b64\u65f6actual cost\uff1a3\u5143 \\(amortized\\ cost = actual\\ cost + credits\\) \u4e70n\u74f6\u6c7d\u6c34\uff0cbound\uff1a $$ amortized\\ cost \\geq actual\\ cost(\u53733n\u5143\uff0c\u56e0\u4e3a\u4e0d\u8d4a\u8d26) $$ \u6ce8\u610f\u4fdd\u8bc1\u6700\u7ec8\u4fe1\u7528\u4e0d\u5c0f\u4e8e0 \u56de\u5230\u6808\u64cd\u4f5c\uff1a \u5b9e\u9645\u4ee3\u4ef7\uff1apush=1, pop=1, multipop=min(sizeof(s),k) \u5747\u644a\u4ee3\u4ef7\uff1apush = 2(\u63d0\u524d\u628apop\u7684\u4ee3\u4ef7\u4ed8\u6389\uff0c\u5373\u4f7f\u4e0dpop\u8be5\u5143\u7d20), pop = multipop = 0\uff0c\u8fd9\u6837\u6240\u6709\u4ee3\u4ef7\u90fd\u662f\u5e38\u6570 Credits\uff1apush = +1, pop = -1, multipop = -min(sizeof(s),k) multipop\u65f6\u7684\u4fe1\u7528\u4e3asizeof(s)\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4fe1\u7528\u4e3a\u8d1f\u7684\u60c5\u51b5 n\u6b21\u64cd\u4f5c\u6700\u5927\u7684amortized cost\u4e3a2n\uff0c \\(T_{amortized}= O( n )/n = O(1)\\) \u52bf\u80fd\u6cd5 \\(\\Phi(D_i)\\) \uff1a\u52bf\u80fd\u51fd\u6570\uff0c\u8868\u793a \\(D_i\\) \u72b6\u6001\u7684\u52bf\u80fd \\(Credits =\\Phi(D_i)-\\Phi(D_{i-1})\\) ; \u5408\u6cd5\u7684\u52bf\u80fd\u51fd\u6570\uff1a\u4fdd\u8bc1 \\(\\Phi(D_{0})\\) \u662f\u6700\u5c0f\u7684\uff0c\u8fd9\u6837\u603b\u7684Credits \\(=\\Phi(D_n)-\\Phi(D_{0})\\) >0\uff0c\u5747\u644a\u4ee3\u4ef7\u662f\u5b9e\u9645\u4ee3\u4ef7\u7684\u4e0a\u754c\u3002\u4e0b\u9762\u516c\u5f0f\u4e2d \\(\\hat{c_i}\\) \u662f\u5747\u644a\u4ee3\u4ef7\uff0c \\(c_i\\) \u662f\u5b9e\u9645\u4ee3\u4ef7 $$ \\sum_{i=1}^n\\hat{c_i}=\\sum_{i=1}^n(c_i+\\Phi(D_i)-\\Phi(D_{i-1}))=\\sum_{i=1}^nc_i+\\Phi(D_n)-\\Phi(D_{0}) $$ \u518d\u6b21\u56de\u5230\u6808 \u52bf\u80fd\u51fd\u6570 \\(\\Phi(D_i)=D_i\\) \u65f6\u523b\u6808\u4e2d\u7684\u5143\u7d20\u6570 \u8ba1\u7b97\u5747\u644a\u4ee3\u4ef7\uff1a push\uff1a \\(\\hat{c_i}=c_i+\\Phi(D_i)-\\Phi(D_{i-1})=1+1=2\\) multipop\uff1a \\(\\hat{c_i}=c_i+\\Phi(D_i)-\\Phi(D_{i-1})=k'-k'=0\\) \u6bcf\u4e2a\u64cd\u4f5c\u7684\u4ee3\u4ef7\u90fd\u662fO(1)\u2014\u2014\u5747\u644a\u4ee3\u4ef7\u662fO(1) \u5e94\u7528\uff1a\u5206\u6790splay tree\u7684\u5747\u644a\u4ee3\u4ef7\u2014\u2014Amortized Analysis Using Potential Methods: \u6811\u7684\u5e38\u89c1\u52bf\u80fd\u51fd\u6570\uff1a\u8282\u70b9\u4e2a\u6570\u3001\u6811\u9ad8\u00b7\u00b7\u00b7 (\u56e0\u4e3a\u62a5\u544a\u7528\u82f1\u6587\u5199\u7684\u6240\u4ee5\u4e0b\u9762\u662f\u82f1\u6587) In tree's amortized analysis, we often use the height of tree or the amount of nodes as the potential function, which satisfy \\(\\Phi(0)\\) is the minimum. To make the potential function increasing slowly, we choose \\(\\Phi(T)=\\sum_{i\\in T}S(i)\\) , where S(i) is the number of descendants of i (i included). \\(\\Phi(T)\\) is also called rank of T, notion \\(R(T)\\) Lemma: If \\(a+b\\leq c\\) then \\(loga+logb\\leq 2logc-2\\) Same as the part of algorithm analysis, there are three situations to discuss according to the picture. If the \"X\" to be pushed is one of the childs of root, we only need one rotation. Except X and P, the \"S(i)\" didn't change, and the rotation cost \\(c_i\\) is 1. So the amortized cost $$ \\hat{c_i}=1+R_2(X)-R_1(X)+R_2(P)-R_1(P) $$ $$ \\leq 1+R_2(X)-R_1(X) $$ (shown below that \\(R_2(P)<R_1(P)\\) ) In the zig-zag case, we need two rotation, costing 2. We note that \\(R_2(X) = R_1(G) = log(the\\ number\\ of\\ nodes\\ in\\ T)\\) . So the amortized cost $$ \\hat{c_i}=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G) $$ $$ =2-R_1(X)+R_2(P)-R_1(P)+R_2(G) $$ $$ \\leq 2(R_2(X)-R_1(X)) $$ (shown below that nodes: \\(P_2+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_2(P)+R_2(G)\\leq 2R_2(X)+2\\) ) * In the zig-zig case, we need two rotation, too, costing 2. We also note that \\(R_2(X) = R_1(G)\\) . So the amortized cost $$ \\hat{c_i}=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G) $$ $$ =2-R_1(X)+R_2(P)-R_1(P)+R_2(G) $$ $$ =2-2R_1(X)+R_2(P)-R_1(P)+R_2(G)+R_1(X) $$ $$ \\leq 3(R_2(X)-R_1(X)) $$ (shown below that nodes: \\(X_1+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_1(X)+R_2(G)\\leq 2R_2(X)+2\\) ) When splay, the former \\(3R_2(X)\\) could be eliminated by the latter item's \\(-3R_1(X)\\) . After sum of all the items, we get: $$ \\hat{c_i} \\leq 1+3(R_2(X)-R_1(X))=O(logN) $$ \u7b97\u6cd5\u5bfc\u8bba\u7684\u644a\u8fd8\u5206\u6790\u4f8b\u5b50 Incrementing a binary counter(k bit in total) \u6bcf\u6b21\u4ece\u4f4e\u4f4d\u5f80\u9ad8\u4f4d\u7ffb\u8f6cbit\uff0c\u9047\u52301\u7ee7\u7eed\u7ffb\u8f6c\uff0c\u9047\u52300\u7ffb\u8f6c\u5b8c\u540e\u505c\u4e0b\u6765 worst case: \u6bcf\u6b21\u6700\u591a\u8f6ck\u4e2abits\u2014\u2014011...1=>100...0 \u805a\u5408\u5206\u6790\uff1a A[0]\u6bcf\u6b21\u90fd\u6539\u53d8 A[1]\u6bcf\u4e24\u6b21\u6539\u53d8\u4e00\u6b21 \u5047\u8bbe\u8ba1\u6570n\u6b21\uff0c\u5219A[0]\u6539\u53d8 \\(n\\) \u6b21\uff0cA[1]\u6539\u53d8 \\(\\lfloor\\frac{n}{2}\\rfloor\\) \u6b21...A[i]\u6539\u53d8 \\(\\lfloor\\frac{n}{2^i}\\rfloor\\) \u6b21 \u56e0\u6b64\u603b\u5171\u7684\u64cd\u4f5c\uff08\u7ffb\u8f6cbit\uff09\u7684\u6b21\u6570\u4e3a \\[ \\sum^{k-1}_{i=0}\\lfloor\\frac{n}{2^i}\\rfloor<n\\sum^{\\infty}_{i=0}\\frac{1}{2^i}=2n \\] \u56e0\u6b64\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\u4e3aO(n)\uff0c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)/n=O(1). \u6838\u7b97\u6cd5\uff1a \u5b9e\u9645\u4ee3\u4ef7\uff1a1\u53d8\u4e3a0 = 1, 0\u53d8\u4e3a1 = 1 \u5747\u644a\u4ee3\u4ef7\uff1a0\u53d8\u4e3a1 = 2(\u63d0\u524d\u628a1\u53d8\u4e3a0\u7684\u4ee3\u4ef7\u4ed8\u6389), 1\u53d8\u4e3a0 = 0 \u4ece0\u5f00\u59cb\u8ba1\u6570\uff0c\u80af\u5b9a\u5148\u5c060\u53d8\u4e3a1\u624d\u80fd\u53d8\u56de\u53bb\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4fe1\u7528\u4e3a\u8d1f\u7684\u60c5\u51b5 \u6211\u4eec\u77e5\u9053\u6bcf\u6b21\u6700\u591a\u53ea\u6709\u4e00\u4e2a0\u53d8\u62101 \u56e0\u6b64\u5747\u644a\u4ee3\u4ef7\u4e3aO(1) \u52bf\u80fd\u6cd5\uff1a \u9009\u53d6\u52bf\u80fd\u51fd\u6570\uff1a\u5f53\u524d1\u7684\u6570\u76ee\uff0c\u8bb0\u4e3a \\(b_i\\) Red-black Tree tips: \u8bbf\u95ee\u7a7a\u6307\u9488\u4f1a Sigementation fault\uff0c\uff0c\u53ef\u4ee5\u6307\u5411\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff08\u54e8\u5175\uff09 \u76ee\u6807\uff1a\u6bcf\u6b21\u641c\u7d22\u90fd \\((logn)\\) 1. \u7ea2\u9ed1\u6811\u5b9a\u4e49 \u7ea2\u9ed1\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u7ea2\u8272\u7684\uff0c\u8981\u4e48\u662f\u9ed1\u8272\u7684 \u6839\u8282\u70b9\u662f\u9ed1\u8272\u7684 \u6bcf\u4e2a\u53f6\u5b50\u90fd\u662f\u54e8\u5175\uff08NIL\uff09\uff0c\u54e8\u5175\u662f\u9ed1\u8272\u7684 \u5982\u679c\u8282\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u5b69\u5b50\u90fd\u662f\u9ed1\u8272\u7684 \u6bcf\u4e2a\u8282\u70b9\u5230\uff08\u80fd\u5230\u8fbe\u7684\uff09\u6240\u6709\u53f6\u5b50\u7684\u7b80\u5355\u8def\u5f84\uff0c\u7ecf\u8fc7\u7684\u9ed1\u8272\u8282\u70b9\u6570\u76f8\u540c black height: \u4e0d\u7b97\u81ea\u5df1\u3001\u4e0d\u7b97\u54e8\u5175\uff0c\u7ecf\u8fc7\u7684\u9ed1\u8272\u8282\u70b9\u6570 \u5f15\u7406\uff1a \u8bc1\u660e\uff1a 2. \u7ea2\u9ed1\u6811\u6784\u9020 \u6784\u9020\u60f3\u6cd5\uff1a\u63d2\u5165\u65b0\u8282\u70b9\u4e14\u67d3\u6210\u7ea2\u8272\u2014\u2014\u4fdd\u6301\u6027\u8d285\uff0c\u901a\u8fc7\u8fed\u4ee3\u53d8\u6362\u4fdd\u6301\u5176\u4ed6\u6027\u8d28 Insert (\u4e0d\u6ee1\u8db3\u6027\u8d28\u6709\u4e09\u79cd\u60c5\u51b5)\uff1a case 1\uff1a\u7ea2\u53d4\u53d4\uff08\u6240\u4ee5\u7237\u7237\u80af\u5b9a\u9ed1\u8272\uff09\u2014\u2014\u5c06\u7238\u7238\u548c\u53d4\u53d4\u67d3\u9ed1\uff0c\u7237\u7237\u67d3\u7ea2 case 2\uff1a\u8fd1\u53d4\u53d4\u9ed1\u2014\u2014\u65cb\u8f6c\u5230case3 case 3\uff1a\u8fdc\u53d4\u53d4\u9ed1\u2014\u2014\u7236\u4eb2\u67d3\u9ed1\uff0c\u65cb\u8f6c\u7237\u7237 \u8fd9\u6837\u4fdd\u6301\u4e86\u6bcf\u6b21\u53ea\u6709\u4e00\u6761\u89c4\u5219\u88ab\u7834\u574f \u590d\u6742\u5ea6\uff1a\u6700\u574f\u60c5\u51b5\u2014\u2014\u4e00\u76f4case 1 $$ T = O(h) = O(logn) $$ Delete \u88ab\u5220\u8282\u70b9\u662fleaf node: \u7236\u4eb2\u6307\u5411NIL \u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff1a\u7528\u513f\u5b50\u66ff\u4ee3\u4ed6 \u6709\u4e24\u4e2a\u513f\u5b50\uff1a\u7528\u5de6\u5b50\u6811\u6700\u5927\u7684/\u53f3\u5b50\u6811\u6700\u5c0f\u7684\u66ff\u4ee3\u4ed6\u3002 \u6b64\u65f6 B+ Tree 1. \u5b9a\u4e49 A B+ tree of order M : \u6839\u8282\u70b9\u8981\u4e48\u6ca1\u6709\u5b69\u5b50\uff0c\u8981\u4e48\u6709 \\([2,M]\\) \u4e2a\u5b69\u5b50 \u9664\u6839\u4e4b\u5916\u7684\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u6709 \\([\\lceil M/2\\rceil,M]\\) \u4e2a\u5b69\u5b50 2. \u63d2\u5165\u8fc7\u7a0b \u63d2\u5165=>\u82e5\u8d85\u9650=>\u5206\u88c2 \u4fdd\u8bc1\u6709\u5e8f/\u627e\u5230\u4f4d\u7f6e\uff1a\u904d\u5386\uff08O(n)\uff09 \u5982\u679c\u63a8\u5230\u524d\u9762\u2014\u2014\u53ef\u80fdO(n)\uff0c\u56e0\u6b64\u5b9e\u9645\u64cd\u4f5c\u4e0d\u8fd9\u4e48\u505a Btree Insert(ElementType X,Btree T) { Seach from root to leaf } choose M: best 3 or 4 B+\u6811\u7684\u597d\u5904\uff1a\u76f8\u8fd1\u7684\u5143\u7d20\u79bb\u5f97\u8fd1\uff0c\u78c1\u76d8\u53cb\u597d 3. \u5220\u9664\u8fc7\u7a0b Inverted File Index \u5e94\u7528\uff1a\u4fe1\u606f\u68c0\u7d22\uff0c\u641c\u7d22\u5f15\u64ce Solution 2: \u77e9\u9635\u5b58\u50a8 \u78c1\u5e26\u5047\u8bbe\uff1a\u8bcd\u548c\u8bcd\u6ca1\u6709\u987a\u5e8f Solution 3: Inverted File Index\uff08\u53c2\u8003\u56fe\u8bba\uff0c\u5c06\u77e9\u9635\u7528\u90bb\u63a5\u8868\u8868\u793a\uff09 Doc Text 1 Gold silver truck \u4f18\u5316 \u5bf9term\u8fdb\u884c\u5904\u7406 \u53ea\u7559\u4e0b\u8bcd\u6839 \u505c\u7528\u8bcd\uff08stop words\uff09\u8fc7\u6ee4\uff1athe\u3001a\u3001what...\u2014\u2014\u6210\u672c\u5927\uff0c\u6536\u83b7\u4f4e \u83b7\u5f97term\u540e \u54c8\u5e0c \u641c\u7d22\u6811 \u5185\u5b58\u4f18\u5316 \u5185\u5b58\u4e0d\u591f\u65f6\uff0c\u628a\u5199\u597d\u7684\u8bcd\u5178\u653e\u5165disk \u91ca\u653e\u5185\u5b58\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bcd\u5178 \u5f52\u5e76\u6392\u5e8f disk\u4e0d\u591f\u65f6 Solution 1\uff1a\u5c06\u78c1\u76d8\u6309\u5b57\u6bcd\u5e8f\u653e\u5728\u4e0d\u540c\u7535\u8111\u91cc Solution 2\uff1aDocument-Partitioned index Dynamic indexing \u7269\u7406\u5220\u9664\u4ee3\u4ef7\u6602\u8d35\u2014\u2014\u505a\u65b0\u65e7\u6807\u8bb0 Main list\u548cnew list \u8bc4\u4f30 precision&recall","title":"Part 1"},{"location":"ads/ads_part_1/#preparation-before-class","text":"\u6559\u6750 \u6570\u636e\u7ed3\u6784\u6559\u6750 introduction to algorithms algorithm design \u6570\u636e\u7ed3\u6784\u5b66\u4e60\u4e0e\u5b9e\u9a8c\u6307\u5bfc \u8bc4\u5206 \u4f5c\u4e1a\uff1a10% Discussion\uff1a10% Research Topic\uff1a10% \u671f\u4e2d\uff1a10%\uff08\u53ef\u88ab\u671f\u672b\u8986\u76d6\uff09 \u671f\u672b\uff1a40%","title":"Preparation Before Class"},{"location":"ads/ads_part_1/#avl-trees","text":"\u76ee\u6807\uff1a\u52a0\u901f\u67e5\u627e \u65b9\u6cd5\uff1a\u67e5\u627e\u6811 O(height) \u9012\u589e/\u9012\u51cf\u5e8f\u5217\u9000\u5316\u6210\u94fe \u6700\u597d\u60c5\u51b5\uff08\u6811\u6700\u77ee\uff09\uff1a\u6240\u6709\u5b50\u6811\u9ad8\u5ea6\u76f8\u7b49\u2014\u2014\u592a\u82db\u523b","title":"AVL Trees"},{"location":"ads/ads_part_1/#avl","text":"\u7a7a\u6811\u5e73\u8861 \u975e\u7a7a\u6811\u5e73\u8861\u5f53\u4e14\u4ec5\u5f53 \u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u90fd\u5e73\u8861 \u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u5c0f\u4e8e\u7b49\u4e8e1 \u5e73\u8861\u56e0\u5b50BF\uff08node\uff09=\u5de6\u5b50\u6811\u9ad8\u5ea6-\u53f3\u5b50\u6811\u9ad8\u5ea6 AVL\u53ea\u80fd\u53d6-1\uff0c0\uff0c1 \u672c\u8bfe\u4e2d\u5b9a\u4e49\u7a7a\u6811\u9ad8\u5ea6\u4e3a-1 \u51e0\u4e2a\u4f8b\u5b50\uff1a \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6027\u8d28\u8f83\u597d\u7684\u6811","title":"AVL\u6811\u5b9a\u4e49"},{"location":"ads/ads_part_1/#avl_1","text":"\u6811\u7684\u65cb\u8f6c B\u9ad8\u5ea6\u589e\u52a01\uff0cA\u9ad8\u5ea6\u51cf\u5c111\u3002\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \uff0c\u4ee3\u7801\u5982\u4e0b typedef struct Node *Tree; struct Node { ElementType Element; Tree Left; Tree Right; } A->Left=B->Right; B->Right=A; return B;//\u65b0\u6839 AVL\u6811\u7684\u63d2\u5165 \uff1a \u6bcf\u63d2\u5165\u4e00\u4e2a\u65b0\u7ed3\u70b9\uff0c\u8bb0\u5f55\uff08\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\uff09\u9ad8\u5ea6\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u5e73\u8861\u56e0\u5b50\uff0c\u4e00\u4f46\u4e0d\u7b26\u5408\u6761\u4ef6 \u56e0\u5b50\u5728\u540c\u4e00\u4e2a\u65b9\u5411\u53d8\u5316 -2\uff1a\u5de6\u65cb\uff08RR Rotation\u2014\u2014\u6307\u4ece\u5931\u8861\u8282\u70b9\u5f00\u59cb\u5411\u53f3\u63d2\u4e24\u6b21\u7684\u60c5\u51b5\uff09 2\uff1a \u53f3\u65cb\uff08LL Rotation\uff0c\u4e0eRR\u5bf9\u79f0\uff09 \u4e0d\u540c\u65b9\u5411\uff1a\u628a\u6811\u9ad8\u9ad8\u65b9\u5411\u7684\u5b59\u5b50\u8f6c\u4e0a\u6765\uff0c\u8f6c\u4e24\u6b21\uff08\u4e24\u79cd\u5bf9\u79f0\u60c5\u51b5\uff0cLR\u548cRL\uff09 \u5b9e\u9645\u4e0a\uff0c\u6839\u636eAVL\u6811\u7684\u826f\u597d\u5b9a\u4e49\uff0c\u5728\u6bcf\u6b21\u63d2\u5165\u540e\u53ea\u9700\u8981\u4e00\u6b21\u64cd\u4f5c\uff08RR/LR...\uff09\u5c31\u80fd\u4f7f\u5176\u518d\u6b21\u5e73\u8861\u3002 AVL\u6811\u7684\u5220\u9664 \uff1a \u7528\u5220\u9664\u8282\u70b9\u5de6\u5b50\u6811\u7684\u6700\u5927\u8282\u70b9/\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8282\u70b9\u66ff\u6362\u4ed6\uff08\u4e0eBST\u76f8\u540c\uff09\uff0c\u518d\u5220\u9664\u3002 \u4ece\u5220\u9664\u8282\u70b9\u7684\u7236\u8282\u70b9\u5f00\u59cb\uff08\u66ff\u6362\u540e\uff09\uff0c\u8bb0\u5f55\uff08\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\uff09\u9ad8\u5ea6\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u5e73\u8861\u56e0\u5b50\uff0c\u4e00\u4f46\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u5c31\u7528insert\u4e2d\u7684\u65b9\u6cd5\u8c03\u6574\u3002\u5728\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u591a\u6b21\u8c03\u6574\u3002","title":"\u5982\u4f55\u5f97\u5230AVL\u6811"},{"location":"ads/ads_part_1/#_1","text":"\u6811\u9ad8\u7684\u6e10\u8fdb\u4e0a\u754c \\(n_h\\) \u2014\u2014h\u9ad8\u5ea6\u7684\u6811\u9700\u8981\u7684\u6700\u5c0f\u7ed3\u70b9\u6570 \u9ad8\u5ea6\u4e3ah\u7684\u6811\uff08\u6240\u9700\u8282\u70b9\u6700\u5c11\uff09\u5982\u4e0b \u4e0e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7c7b\u4f3c\uff1a \\(F_0=0,F_1=1,F_n=F_{n-1}+F_{n-2}\\) \u800c \\(F_n\\approx\\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^i\\) \u6240\u4ee5 \\(n_h =F_{n+3}-1\\) \\(h=O(lnn)\\)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"ads/ads_part_1/#splay-trees","text":"\u76ee\u6807\uff1aM\u6b21\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(MlogN)\\) \uff0c\u5373\u6bcf\u4e2a\u64cd\u4f5c\u5e73\u5747\u590d\u6742\u5ea6\u4e3a \\(O(logN)\\) \u57fa\u672c\u601d\u60f3\uff1a\u6bcf\u6b21\u67e5\u8be2/\u63d2\u5165\uff0c\u5c06\u8be5\u5143\u7d20\u63d0\u5230\u6839\u8282\u70b9","title":"Splay Trees"},{"location":"ads/ads_part_1/#_2","text":"\u5982\u679c\u67e5\u8be2\u8282\u70b9\u7684\u7236\u4eb2\u662f\u6839\u2014\u2014\u65cb\u8f6c\u67e5\u8be2\u8282\u70b9 \u5982\u679c\u4e0d\u662f\uff0c\u5219\u6709\u7236\u4eb2\u8282\u70b9\uff08P\uff09\u548c\u7956\u7236\u8282\u70b9\uff08G\uff09 zig-zag\uff08z\u5b57\u5f62\uff09\uff1a\u8f6c\u4e24\u6b21\u5f53\u524d\u8282\u70b9 zig-zig\uff08\u4e00\u4e2a\u65b9\u5411\uff09\uff1a\u5148\u8f6c\u7236\u8282\u70b9\uff0c\u518d\u8f6c\u5f53\u524d\u8282\u70b9","title":"\u6784\u9020\u8fc7\u7a0b"},{"location":"ads/ads_part_1/#_3","text":"\u627e\u5230\u8981\u5220\u9664\u7684\u5143\u7d20X\uff08\u8fd9\u6837\u8ba9\u5176\u5728\u6839\u8282\u70b9\uff09 \u5220\u6389X\uff0c\u5f97\u5230\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811 \u627e\u5230\u5de6\u5b50\u6811\u6700\u5927\u7684\u8282\u70b9\uff0c\u5c06\u5176\u63a8\u5230\u6839\u8282\u70b9 \u8fd9\u6837\u5c31\u80fd\u76f4\u63a5\u5c06\u53f3\u5b50\u6811\u63a5\u5230\u5de6\u5b50\u6811\u7684\u53f3\u8fb9","title":"\u5220\u9664\u64cd\u4f5c"},{"location":"ads/ads_part_1/#amortized-analysisthree-normal-methods","text":"An amortized analysis guarantees the average performance of each operation in the worst case. Splay\u6811\u7684\u76ee\u6807\uff1aM\u6b21\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(MlogN)\\) \u2014\u2014\u5747\u644a\u65f6\u95f4\u4e0a\u754c( Amortized time bound ) worst-case bound >= amortized time bound >= average-case bound \u524d\u4e24\u79cd\u4e0e\u6570\u636e\u5206\u5e03\u65e0\u5173","title":"Amortized Analysis(Three normal methods)"},{"location":"ads/ads_part_1/#_4","text":"\u5bf9\u4e8e\u6240\u6709 n\uff0cn \u4e2a\u8fd0\u7b97\u5e8f\u5217\u603b\u5171\u9700\u8981\u6700\u574f\u60c5\u51b5\u65f6\u95f4\uff08determine an upper bound\uff09 T\uff08n\uff09\u3002\u56e0\u6b64\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7684\u5e73\u5747\u6210\u672c\u6216\u644a\u9500\u6210\u672c\u4e3a T\uff08n\uff09/n\u3002 \u4ee5\u6808\u4e3a\u4f8b\uff1a push\uff1a \\(O(1)\\) \uff0c pop\uff1a \\(O(1)\\) \uff0c multipop\uff08\u4e00\u6b21pop\u51fan\u4e2a\uff09\uff1a \\(min\\{k\uff0cn\\}=O(n)\\) \uff0c\u5176\u4e2dk\u662f\u5f53\u524d\u6808\u4e2d\u5143\u7d20\u6570 \u6240\u4ee5n\u6b21\u64cd\u4f5c\u4e0a\u754c\uff1a \\(O(n^2)\\) \u66f4\u7cbe\u786e\uff1a\u6808\u4e2d\u5143\u7d20\u6570\u80af\u5b9a\u5c0f\u4e8en\uff0cpush\u8fdb\u7684\u5143\u7d20\u53ea\u80fdpop\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) $$T_{amortized}= O( n )/n = O(1) $$","title":"\u805a\u5408\u5206\u6790"},{"location":"ads/ads_part_1/#_5","text":"\u4ee5\u5356\u6c7d\u6c34\u4e3a\u4f8b\uff1a a\u5356\u4e00\u74f6\u6c7d\u6c34 3\u5143 b\u7528 5\u5143 \u4e70\u6c7d\u6c34\uff0c\u5b58\u4e24\u5143\uff08credits\uff09\u5230a\u90a3\uff0c\u4e0b\u6b21\u4e70\u6c7d\u6c34\u53ef\u4ee5\u7528\u3002\u6b64\u65f6actual cost\uff1a3\u5143 \\(amortized\\ cost = actual\\ cost + credits\\) \u4e70n\u74f6\u6c7d\u6c34\uff0cbound\uff1a $$ amortized\\ cost \\geq actual\\ cost(\u53733n\u5143\uff0c\u56e0\u4e3a\u4e0d\u8d4a\u8d26) $$ \u6ce8\u610f\u4fdd\u8bc1\u6700\u7ec8\u4fe1\u7528\u4e0d\u5c0f\u4e8e0 \u56de\u5230\u6808\u64cd\u4f5c\uff1a \u5b9e\u9645\u4ee3\u4ef7\uff1apush=1, pop=1, multipop=min(sizeof(s),k) \u5747\u644a\u4ee3\u4ef7\uff1apush = 2(\u63d0\u524d\u628apop\u7684\u4ee3\u4ef7\u4ed8\u6389\uff0c\u5373\u4f7f\u4e0dpop\u8be5\u5143\u7d20), pop = multipop = 0\uff0c\u8fd9\u6837\u6240\u6709\u4ee3\u4ef7\u90fd\u662f\u5e38\u6570 Credits\uff1apush = +1, pop = -1, multipop = -min(sizeof(s),k) multipop\u65f6\u7684\u4fe1\u7528\u4e3asizeof(s)\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4fe1\u7528\u4e3a\u8d1f\u7684\u60c5\u51b5 n\u6b21\u64cd\u4f5c\u6700\u5927\u7684amortized cost\u4e3a2n\uff0c \\(T_{amortized}= O( n )/n = O(1)\\)","title":"\u6838\u7b97\u6cd5"},{"location":"ads/ads_part_1/#_6","text":"\\(\\Phi(D_i)\\) \uff1a\u52bf\u80fd\u51fd\u6570\uff0c\u8868\u793a \\(D_i\\) \u72b6\u6001\u7684\u52bf\u80fd \\(Credits =\\Phi(D_i)-\\Phi(D_{i-1})\\) ; \u5408\u6cd5\u7684\u52bf\u80fd\u51fd\u6570\uff1a\u4fdd\u8bc1 \\(\\Phi(D_{0})\\) \u662f\u6700\u5c0f\u7684\uff0c\u8fd9\u6837\u603b\u7684Credits \\(=\\Phi(D_n)-\\Phi(D_{0})\\) >0\uff0c\u5747\u644a\u4ee3\u4ef7\u662f\u5b9e\u9645\u4ee3\u4ef7\u7684\u4e0a\u754c\u3002\u4e0b\u9762\u516c\u5f0f\u4e2d \\(\\hat{c_i}\\) \u662f\u5747\u644a\u4ee3\u4ef7\uff0c \\(c_i\\) \u662f\u5b9e\u9645\u4ee3\u4ef7 $$ \\sum_{i=1}^n\\hat{c_i}=\\sum_{i=1}^n(c_i+\\Phi(D_i)-\\Phi(D_{i-1}))=\\sum_{i=1}^nc_i+\\Phi(D_n)-\\Phi(D_{0}) $$ \u518d\u6b21\u56de\u5230\u6808 \u52bf\u80fd\u51fd\u6570 \\(\\Phi(D_i)=D_i\\) \u65f6\u523b\u6808\u4e2d\u7684\u5143\u7d20\u6570 \u8ba1\u7b97\u5747\u644a\u4ee3\u4ef7\uff1a push\uff1a \\(\\hat{c_i}=c_i+\\Phi(D_i)-\\Phi(D_{i-1})=1+1=2\\) multipop\uff1a \\(\\hat{c_i}=c_i+\\Phi(D_i)-\\Phi(D_{i-1})=k'-k'=0\\) \u6bcf\u4e2a\u64cd\u4f5c\u7684\u4ee3\u4ef7\u90fd\u662fO(1)\u2014\u2014\u5747\u644a\u4ee3\u4ef7\u662fO(1) \u5e94\u7528\uff1a\u5206\u6790splay tree\u7684\u5747\u644a\u4ee3\u4ef7\u2014\u2014Amortized Analysis Using Potential Methods: \u6811\u7684\u5e38\u89c1\u52bf\u80fd\u51fd\u6570\uff1a\u8282\u70b9\u4e2a\u6570\u3001\u6811\u9ad8\u00b7\u00b7\u00b7 (\u56e0\u4e3a\u62a5\u544a\u7528\u82f1\u6587\u5199\u7684\u6240\u4ee5\u4e0b\u9762\u662f\u82f1\u6587) In tree's amortized analysis, we often use the height of tree or the amount of nodes as the potential function, which satisfy \\(\\Phi(0)\\) is the minimum. To make the potential function increasing slowly, we choose \\(\\Phi(T)=\\sum_{i\\in T}S(i)\\) , where S(i) is the number of descendants of i (i included). \\(\\Phi(T)\\) is also called rank of T, notion \\(R(T)\\) Lemma: If \\(a+b\\leq c\\) then \\(loga+logb\\leq 2logc-2\\) Same as the part of algorithm analysis, there are three situations to discuss according to the picture. If the \"X\" to be pushed is one of the childs of root, we only need one rotation. Except X and P, the \"S(i)\" didn't change, and the rotation cost \\(c_i\\) is 1. So the amortized cost $$ \\hat{c_i}=1+R_2(X)-R_1(X)+R_2(P)-R_1(P) $$ $$ \\leq 1+R_2(X)-R_1(X) $$ (shown below that \\(R_2(P)<R_1(P)\\) ) In the zig-zag case, we need two rotation, costing 2. We note that \\(R_2(X) = R_1(G) = log(the\\ number\\ of\\ nodes\\ in\\ T)\\) . So the amortized cost $$ \\hat{c_i}=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G) $$ $$ =2-R_1(X)+R_2(P)-R_1(P)+R_2(G) $$ $$ \\leq 2(R_2(X)-R_1(X)) $$ (shown below that nodes: \\(P_2+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_2(P)+R_2(G)\\leq 2R_2(X)+2\\) ) * In the zig-zig case, we need two rotation, too, costing 2. We also note that \\(R_2(X) = R_1(G)\\) . So the amortized cost $$ \\hat{c_i}=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G) $$ $$ =2-R_1(X)+R_2(P)-R_1(P)+R_2(G) $$ $$ =2-2R_1(X)+R_2(P)-R_1(P)+R_2(G)+R_1(X) $$ $$ \\leq 3(R_2(X)-R_1(X)) $$ (shown below that nodes: \\(X_1+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_1(X)+R_2(G)\\leq 2R_2(X)+2\\) ) When splay, the former \\(3R_2(X)\\) could be eliminated by the latter item's \\(-3R_1(X)\\) . After sum of all the items, we get: $$ \\hat{c_i} \\leq 1+3(R_2(X)-R_1(X))=O(logN) $$ \u7b97\u6cd5\u5bfc\u8bba\u7684\u644a\u8fd8\u5206\u6790\u4f8b\u5b50 Incrementing a binary counter(k bit in total) \u6bcf\u6b21\u4ece\u4f4e\u4f4d\u5f80\u9ad8\u4f4d\u7ffb\u8f6cbit\uff0c\u9047\u52301\u7ee7\u7eed\u7ffb\u8f6c\uff0c\u9047\u52300\u7ffb\u8f6c\u5b8c\u540e\u505c\u4e0b\u6765 worst case: \u6bcf\u6b21\u6700\u591a\u8f6ck\u4e2abits\u2014\u2014011...1=>100...0 \u805a\u5408\u5206\u6790\uff1a A[0]\u6bcf\u6b21\u90fd\u6539\u53d8 A[1]\u6bcf\u4e24\u6b21\u6539\u53d8\u4e00\u6b21 \u5047\u8bbe\u8ba1\u6570n\u6b21\uff0c\u5219A[0]\u6539\u53d8 \\(n\\) \u6b21\uff0cA[1]\u6539\u53d8 \\(\\lfloor\\frac{n}{2}\\rfloor\\) \u6b21...A[i]\u6539\u53d8 \\(\\lfloor\\frac{n}{2^i}\\rfloor\\) \u6b21 \u56e0\u6b64\u603b\u5171\u7684\u64cd\u4f5c\uff08\u7ffb\u8f6cbit\uff09\u7684\u6b21\u6570\u4e3a \\[ \\sum^{k-1}_{i=0}\\lfloor\\frac{n}{2^i}\\rfloor<n\\sum^{\\infty}_{i=0}\\frac{1}{2^i}=2n \\] \u56e0\u6b64\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\u4e3aO(n)\uff0c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)/n=O(1). \u6838\u7b97\u6cd5\uff1a \u5b9e\u9645\u4ee3\u4ef7\uff1a1\u53d8\u4e3a0 = 1, 0\u53d8\u4e3a1 = 1 \u5747\u644a\u4ee3\u4ef7\uff1a0\u53d8\u4e3a1 = 2(\u63d0\u524d\u628a1\u53d8\u4e3a0\u7684\u4ee3\u4ef7\u4ed8\u6389), 1\u53d8\u4e3a0 = 0 \u4ece0\u5f00\u59cb\u8ba1\u6570\uff0c\u80af\u5b9a\u5148\u5c060\u53d8\u4e3a1\u624d\u80fd\u53d8\u56de\u53bb\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4fe1\u7528\u4e3a\u8d1f\u7684\u60c5\u51b5 \u6211\u4eec\u77e5\u9053\u6bcf\u6b21\u6700\u591a\u53ea\u6709\u4e00\u4e2a0\u53d8\u62101 \u56e0\u6b64\u5747\u644a\u4ee3\u4ef7\u4e3aO(1) \u52bf\u80fd\u6cd5\uff1a \u9009\u53d6\u52bf\u80fd\u51fd\u6570\uff1a\u5f53\u524d1\u7684\u6570\u76ee\uff0c\u8bb0\u4e3a \\(b_i\\)","title":"\u52bf\u80fd\u6cd5"},{"location":"ads/ads_part_1/#red-black-tree","text":"tips: \u8bbf\u95ee\u7a7a\u6307\u9488\u4f1a Sigementation fault\uff0c\uff0c\u53ef\u4ee5\u6307\u5411\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff08\u54e8\u5175\uff09 \u76ee\u6807\uff1a\u6bcf\u6b21\u641c\u7d22\u90fd \\((logn)\\)","title":"Red-black Tree"},{"location":"ads/ads_part_1/#1","text":"\u7ea2\u9ed1\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u7ea2\u8272\u7684\uff0c\u8981\u4e48\u662f\u9ed1\u8272\u7684 \u6839\u8282\u70b9\u662f\u9ed1\u8272\u7684 \u6bcf\u4e2a\u53f6\u5b50\u90fd\u662f\u54e8\u5175\uff08NIL\uff09\uff0c\u54e8\u5175\u662f\u9ed1\u8272\u7684 \u5982\u679c\u8282\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u5b69\u5b50\u90fd\u662f\u9ed1\u8272\u7684 \u6bcf\u4e2a\u8282\u70b9\u5230\uff08\u80fd\u5230\u8fbe\u7684\uff09\u6240\u6709\u53f6\u5b50\u7684\u7b80\u5355\u8def\u5f84\uff0c\u7ecf\u8fc7\u7684\u9ed1\u8272\u8282\u70b9\u6570\u76f8\u540c black height: \u4e0d\u7b97\u81ea\u5df1\u3001\u4e0d\u7b97\u54e8\u5175\uff0c\u7ecf\u8fc7\u7684\u9ed1\u8272\u8282\u70b9\u6570 \u5f15\u7406\uff1a \u8bc1\u660e\uff1a","title":"1. \u7ea2\u9ed1\u6811\u5b9a\u4e49"},{"location":"ads/ads_part_1/#2","text":"\u6784\u9020\u60f3\u6cd5\uff1a\u63d2\u5165\u65b0\u8282\u70b9\u4e14\u67d3\u6210\u7ea2\u8272\u2014\u2014\u4fdd\u6301\u6027\u8d285\uff0c\u901a\u8fc7\u8fed\u4ee3\u53d8\u6362\u4fdd\u6301\u5176\u4ed6\u6027\u8d28 Insert (\u4e0d\u6ee1\u8db3\u6027\u8d28\u6709\u4e09\u79cd\u60c5\u51b5)\uff1a case 1\uff1a\u7ea2\u53d4\u53d4\uff08\u6240\u4ee5\u7237\u7237\u80af\u5b9a\u9ed1\u8272\uff09\u2014\u2014\u5c06\u7238\u7238\u548c\u53d4\u53d4\u67d3\u9ed1\uff0c\u7237\u7237\u67d3\u7ea2 case 2\uff1a\u8fd1\u53d4\u53d4\u9ed1\u2014\u2014\u65cb\u8f6c\u5230case3 case 3\uff1a\u8fdc\u53d4\u53d4\u9ed1\u2014\u2014\u7236\u4eb2\u67d3\u9ed1\uff0c\u65cb\u8f6c\u7237\u7237 \u8fd9\u6837\u4fdd\u6301\u4e86\u6bcf\u6b21\u53ea\u6709\u4e00\u6761\u89c4\u5219\u88ab\u7834\u574f \u590d\u6742\u5ea6\uff1a\u6700\u574f\u60c5\u51b5\u2014\u2014\u4e00\u76f4case 1 $$ T = O(h) = O(logn) $$ Delete \u88ab\u5220\u8282\u70b9\u662fleaf node: \u7236\u4eb2\u6307\u5411NIL \u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff1a\u7528\u513f\u5b50\u66ff\u4ee3\u4ed6 \u6709\u4e24\u4e2a\u513f\u5b50\uff1a\u7528\u5de6\u5b50\u6811\u6700\u5927\u7684/\u53f3\u5b50\u6811\u6700\u5c0f\u7684\u66ff\u4ee3\u4ed6\u3002 \u6b64\u65f6","title":"2. \u7ea2\u9ed1\u6811\u6784\u9020"},{"location":"ads/ads_part_1/#b-tree","text":"","title":"B+ Tree"},{"location":"ads/ads_part_1/#1_1","text":"","title":"1. \u5b9a\u4e49"},{"location":"ads/ads_part_1/#a-b-tree-of-order-m","text":"\u6839\u8282\u70b9\u8981\u4e48\u6ca1\u6709\u5b69\u5b50\uff0c\u8981\u4e48\u6709 \\([2,M]\\) \u4e2a\u5b69\u5b50 \u9664\u6839\u4e4b\u5916\u7684\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u6709 \\([\\lceil M/2\\rceil,M]\\) \u4e2a\u5b69\u5b50","title":"A B+ tree of order M:"},{"location":"ads/ads_part_1/#2_1","text":"\u63d2\u5165=>\u82e5\u8d85\u9650=>\u5206\u88c2 \u4fdd\u8bc1\u6709\u5e8f/\u627e\u5230\u4f4d\u7f6e\uff1a\u904d\u5386\uff08O(n)\uff09 \u5982\u679c\u63a8\u5230\u524d\u9762\u2014\u2014\u53ef\u80fdO(n)\uff0c\u56e0\u6b64\u5b9e\u9645\u64cd\u4f5c\u4e0d\u8fd9\u4e48\u505a Btree Insert(ElementType X,Btree T) { Seach from root to leaf } choose M: best 3 or 4 B+\u6811\u7684\u597d\u5904\uff1a\u76f8\u8fd1\u7684\u5143\u7d20\u79bb\u5f97\u8fd1\uff0c\u78c1\u76d8\u53cb\u597d","title":"2. \u63d2\u5165\u8fc7\u7a0b"},{"location":"ads/ads_part_1/#3","text":"","title":"3. \u5220\u9664\u8fc7\u7a0b"},{"location":"ads/ads_part_1/#inverted-file-index","text":"\u5e94\u7528\uff1a\u4fe1\u606f\u68c0\u7d22\uff0c\u641c\u7d22\u5f15\u64ce Solution 2: \u77e9\u9635\u5b58\u50a8 \u78c1\u5e26\u5047\u8bbe\uff1a\u8bcd\u548c\u8bcd\u6ca1\u6709\u987a\u5e8f Solution 3: Inverted File Index\uff08\u53c2\u8003\u56fe\u8bba\uff0c\u5c06\u77e9\u9635\u7528\u90bb\u63a5\u8868\u8868\u793a\uff09 Doc Text 1 Gold silver truck","title":"Inverted File Index"},{"location":"ads/ads_part_1/#_7","text":"\u5bf9term\u8fdb\u884c\u5904\u7406 \u53ea\u7559\u4e0b\u8bcd\u6839 \u505c\u7528\u8bcd\uff08stop words\uff09\u8fc7\u6ee4\uff1athe\u3001a\u3001what...\u2014\u2014\u6210\u672c\u5927\uff0c\u6536\u83b7\u4f4e \u83b7\u5f97term\u540e \u54c8\u5e0c \u641c\u7d22\u6811 \u5185\u5b58\u4f18\u5316 \u5185\u5b58\u4e0d\u591f\u65f6\uff0c\u628a\u5199\u597d\u7684\u8bcd\u5178\u653e\u5165disk \u91ca\u653e\u5185\u5b58\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bcd\u5178 \u5f52\u5e76\u6392\u5e8f disk\u4e0d\u591f\u65f6 Solution 1\uff1a\u5c06\u78c1\u76d8\u6309\u5b57\u6bcd\u5e8f\u653e\u5728\u4e0d\u540c\u7535\u8111\u91cc Solution 2\uff1aDocument-Partitioned index Dynamic indexing \u7269\u7406\u5220\u9664\u4ee3\u4ef7\u6602\u8d35\u2014\u2014\u505a\u65b0\u65e7\u6807\u8bb0 Main list\u548cnew list","title":"\u4f18\u5316"},{"location":"ads/ads_part_1/#_8","text":"precision&recall","title":"\u8bc4\u4f30"},{"location":"ads/ads_part_2/","text":"Leftist Heaps review: \u5806\u7684\u64cd\u4f5c \u63d2\u5165 \u5220\u9664 \u5408\u5e76\u2014\u2014\u590d\u6742\u5ea6\u76f8\u5f53\u4e8e\u91cd\u65b0\u5efa\u5806 \u5de6\u504f\u5806\u2014\u2014\u5229\u7528\u7ed3\u6784\u7684\u4e0d\u5e73\u8861\uff0c\u52a0\u901f\u5806\u7684\u5408\u5e76 Definition \u6709\u4e24\u4e2a\u513f\u5b50\u7684\u8282\u70b9\u662f\u5185\u90e8\u8282\u70b9\uff0c\u5176\u4f59\u4e3a\u5916\u90e8\u8282\u70b9 null path length, Npl(x) : \u5230\u5916\u90e8\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84 \u5b9a\u4e49Npl(null) = -1 \u5de6\u504f\u6811 \u5373\u6240\u6709\u7684\u8282\u70b9\uff0c\u5de6\u513f\u5b50\u7684Npl\u5927\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u7684Npl Theorem: \u53f3\u8def\u5f84\u4e3ar\u7684\u5de6\u504f\u6811\uff0c\u81f3\u5c11\u6709 \\(2^r-1\\) \u4e2a\u8282\u70b9 r = 1\u65f6 r = k\u65f6\uff0c\u5047\u8bbe\u6210\u7acb r = k+1\u65f6\uff0c\u53f3\u5b50\u6811\u7684Npl\u4e3ak+1 tips: \u5de6\u5b50\u6811\u7684\u53f3\u8def\u5f84\u4e3ak\uff0c\u56e0\u6b64\u5de6\u5b50\u6811\u81f3\u5c11\u6709 \\(2^r-1\\) \u4e2a\u8282\u70b9 \u5b9e\u73b0\uff1a struct TreeNode { ElementType Element; PriorityQueue Left; PriorityQueue Right; int Npl; }; \u65b9\u6cd5\u4e00\uff1a\u9012\u5f52 Merge(R) Attach() Swap \u65b9\u6cd5\u4e8c\uff1a\u8fed\u4ee3 delete min Skew Heaps \u5de6\u504f\u6811\u5408\u5e76\u65f6\u4e0d\u5224\u65adnpl\uff0c\u76f4\u63a5\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\uff0c\u5c31\u662f\u659c\u5806 \u5747\u644a\u5206\u6790\uff08\u52bf\u80fd\u6cd5\uff09 \u52bf\u80fd\u51fd\u6570 \\(\\Phi(D_i)\\) =\u91cd\u8282\u70b9\u7684\u4e2a\u6570 \u91cd\u8282\u70b9\uff1a\u53f3\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e25\u683c\u5927\u4e8e\u5de6\u5b50\u6811 \u53ea\u6709\u53f3\u8def\u5f84\u8282\u70b9\u7684\u8f7b\u91cd\u4f1a\u6539\u53d8 \u64cd\u4f5c\u540e\uff0c\u91cd\u8282\u70b9\u4e00\u5b9a\u53d8\u8f7b\uff0c\u8f7b\u8282\u70b9\u4e0d\u4e00\u5b9a\u53d8\u91cd\uff0c\u4e3a\u6c42\u4e0a\u754c\uff0c\u5047\u8bbe\u8f7b\u8282\u70b9\u90fd\u53d8\u91cd","title":"Part 2"},{"location":"ads/ads_part_2/#leftist-heaps","text":"review: \u5806\u7684\u64cd\u4f5c \u63d2\u5165 \u5220\u9664 \u5408\u5e76\u2014\u2014\u590d\u6742\u5ea6\u76f8\u5f53\u4e8e\u91cd\u65b0\u5efa\u5806 \u5de6\u504f\u5806\u2014\u2014\u5229\u7528\u7ed3\u6784\u7684\u4e0d\u5e73\u8861\uff0c\u52a0\u901f\u5806\u7684\u5408\u5e76","title":"Leftist Heaps"},{"location":"ads/ads_part_2/#definition","text":"\u6709\u4e24\u4e2a\u513f\u5b50\u7684\u8282\u70b9\u662f\u5185\u90e8\u8282\u70b9\uff0c\u5176\u4f59\u4e3a\u5916\u90e8\u8282\u70b9 null path length, Npl(x) : \u5230\u5916\u90e8\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84 \u5b9a\u4e49Npl(null) = -1 \u5de6\u504f\u6811 \u5373\u6240\u6709\u7684\u8282\u70b9\uff0c\u5de6\u513f\u5b50\u7684Npl\u5927\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u7684Npl Theorem: \u53f3\u8def\u5f84\u4e3ar\u7684\u5de6\u504f\u6811\uff0c\u81f3\u5c11\u6709 \\(2^r-1\\) \u4e2a\u8282\u70b9 r = 1\u65f6 r = k\u65f6\uff0c\u5047\u8bbe\u6210\u7acb r = k+1\u65f6\uff0c\u53f3\u5b50\u6811\u7684Npl\u4e3ak+1 tips: \u5de6\u5b50\u6811\u7684\u53f3\u8def\u5f84\u4e3ak\uff0c\u56e0\u6b64\u5de6\u5b50\u6811\u81f3\u5c11\u6709 \\(2^r-1\\) \u4e2a\u8282\u70b9","title":"Definition"},{"location":"ads/ads_part_2/#_1","text":"struct TreeNode { ElementType Element; PriorityQueue Left; PriorityQueue Right; int Npl; }; \u65b9\u6cd5\u4e00\uff1a\u9012\u5f52 Merge(R) Attach() Swap \u65b9\u6cd5\u4e8c\uff1a\u8fed\u4ee3 delete min","title":"\u5b9e\u73b0\uff1a"},{"location":"ads/ads_part_2/#skew-heaps","text":"\u5de6\u504f\u6811\u5408\u5e76\u65f6\u4e0d\u5224\u65adnpl\uff0c\u76f4\u63a5\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\uff0c\u5c31\u662f\u659c\u5806 \u5747\u644a\u5206\u6790\uff08\u52bf\u80fd\u6cd5\uff09 \u52bf\u80fd\u51fd\u6570 \\(\\Phi(D_i)\\) =\u91cd\u8282\u70b9\u7684\u4e2a\u6570 \u91cd\u8282\u70b9\uff1a\u53f3\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e25\u683c\u5927\u4e8e\u5de6\u5b50\u6811 \u53ea\u6709\u53f3\u8def\u5f84\u8282\u70b9\u7684\u8f7b\u91cd\u4f1a\u6539\u53d8 \u64cd\u4f5c\u540e\uff0c\u91cd\u8282\u70b9\u4e00\u5b9a\u53d8\u8f7b\uff0c\u8f7b\u8282\u70b9\u4e0d\u4e00\u5b9a\u53d8\u91cd\uff0c\u4e3a\u6c42\u4e0a\u754c\uff0c\u5047\u8bbe\u8f7b\u8282\u70b9\u90fd\u53d8\u91cd","title":"Skew Heaps"},{"location":"ads/splay_tree/","text":"Splays Tree Insertion Insert an element x into a given tree t and push it to the root using an iterative method. Except for the empty case, there is three basecases. After insert x to the corresponding subtree, we should judge: * The first case is that the node to be inserted is root's child, just rotate once to put the node at the root. * The second case is the zig-zag case. Maybe it's better using picture to explain. The \"X\" is the node to be inserted. In the zig-zag case as shown in the picture, we should rotate X twice. * The final case is the zig-zig case. Similarly, the \"X\" is the node to be inserted. In the zig-zag case as shown in the picture, we should rotate X's parent fisrst, then rotate X. begin Insert( Tree t, ElementType x ) if t is NULL return Node(x) if t's value is larger than x t's left child = Insert( t's left child, x ) if t is root and x is t's child return RightRotation(t) if zig-zag t's left child = LeftRotation(t's left child) return RightRotation(t) if zig-zig t = RightRotation(t) t = RightRotation(t) else t's right child = Insert( t's right child, x ) //Symmetrical with the left insert, //while the rotation direction is reversed end Deletion Delete an element x into a given tree t using. ( In this project, the case where x can not be found doesn't exist .) * First find the element x in the tree t. and push x to the root using the same method as inserting. * Delete x, Then we acquire a left subtree and a right subtree of x. * Then find the max element in the left subtree and push it to the root. Obviously, now its right subtree is empty. * So we can connect the x's right subtree to the right of the left subtree directly. begin Delete( Tree t, ElementType x ) Define Tree Temp as NULL if t is NULL ERROR Find( Tree t, ElementType x )//then x is at the root FindMax( Tree t's left subtree )//Also push the max element to the root Temp = t if t's left subtree is NULL t = right subtree else t = left subtree left subtree -> right = right subtree free(temp) return t end Time Complexity Amortized Analysis Using Potential Methods: In tree's amortized analysis, we often use the height of tree or the amount of nodes as the potential function, which satisfy \\(\\Phi(0)\\) is the minimum. To make the potential function increasing slowly, we choose \\(\\Phi(T)=\\sum_{i\\in T}S(i)\\) , where S(i) is the number of descendants of i (i included). \\(\\Phi(T)\\) is also called rank of T, notion \\(R(T)\\) Lemma: If \\(a+b\\leq c\\) then \\(loga+logb\\leq 2logc-2\\) Same as the part of algorithm analysis, there are three situations to discuss according to the picture. If the \"X\" to be pushed is one of the childs of root, we only need one rotation. Except X and P, the \"S(i)\" didn't change, and the rotation cost \\(c_i\\) is 1. So the amortized cost \\(\\^c_i=1+R_2(X)-R_1(X)+R_2(P)-R_1(P)\\) \\(\\leq 1+R_2(X)-R_1(X)\\) (shown below that $ R_2(P)<R_1(P) $) In the zig-zag case, we need two rotation, costing 2. We note that \\(R_2(X) = R_1(G) = log(the\\ number\\ of\\ nodes\\ in\\ T)\\) . So the amortized cost \\(\\^c_i=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)\\) \\(=2-R_1(X)+R_2(P)-R_1(P)+R_2(G)\\) \\(\\leq 2(R_2(X)-R_1(X))\\) (shown below that nodes: \\(P_2+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_2(P)+R_2(G)\\leq 2R_2(X)+2\\) ) * In the zig-zig case, we need two rotation, too, costing 2. We also note that \\(R_2(X) = R_1(G)\\) . So the amortized cost \\(\\^c_i=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)\\) \\(=2-R_1(X)+R_2(P)-R_1(P)+R_2(G)\\) \\(=2-2R_1(X)+R_2(P)-R_1(P)+R_2(G)+R_1(X)\\) \\(\\leq 3(R_2(X)-R_1(X))\\) (shown below that nodes: \\(X_1+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_1(X)+R_2(G)\\leq 2R_2(X)+2\\) ) When splay, the former \\(3R_2(X)\\) could be eliminated by the latter item's \\(-3R_1(X)\\) . After sum of all the items, we get the amortized time complexity $$ \\^c_i \\leq 1+3(R_2(X)-R_1(X))=O(logN) $$ Similarly average time complexity is also $O(logN) $. Concerning the worst case: X is at the bottom, which depth is N(the number of nodes). Push it to root needs to rotate N times. So the worst time complexity is \\(O(N)\\) .","title":"Splay tree"},{"location":"ads/splay_tree/#splays-tree","text":"","title":"Splays Tree"},{"location":"ads/splay_tree/#insertion","text":"Insert an element x into a given tree t and push it to the root using an iterative method. Except for the empty case, there is three basecases. After insert x to the corresponding subtree, we should judge: * The first case is that the node to be inserted is root's child, just rotate once to put the node at the root. * The second case is the zig-zag case. Maybe it's better using picture to explain. The \"X\" is the node to be inserted. In the zig-zag case as shown in the picture, we should rotate X twice. * The final case is the zig-zig case. Similarly, the \"X\" is the node to be inserted. In the zig-zag case as shown in the picture, we should rotate X's parent fisrst, then rotate X. begin Insert( Tree t, ElementType x ) if t is NULL return Node(x) if t's value is larger than x t's left child = Insert( t's left child, x ) if t is root and x is t's child return RightRotation(t) if zig-zag t's left child = LeftRotation(t's left child) return RightRotation(t) if zig-zig t = RightRotation(t) t = RightRotation(t) else t's right child = Insert( t's right child, x ) //Symmetrical with the left insert, //while the rotation direction is reversed end","title":"Insertion"},{"location":"ads/splay_tree/#deletion","text":"Delete an element x into a given tree t using. ( In this project, the case where x can not be found doesn't exist .) * First find the element x in the tree t. and push x to the root using the same method as inserting. * Delete x, Then we acquire a left subtree and a right subtree of x. * Then find the max element in the left subtree and push it to the root. Obviously, now its right subtree is empty. * So we can connect the x's right subtree to the right of the left subtree directly. begin Delete( Tree t, ElementType x ) Define Tree Temp as NULL if t is NULL ERROR Find( Tree t, ElementType x )//then x is at the root FindMax( Tree t's left subtree )//Also push the max element to the root Temp = t if t's left subtree is NULL t = right subtree else t = left subtree left subtree -> right = right subtree free(temp) return t end","title":"Deletion"},{"location":"ads/splay_tree/#time-complexity","text":"Amortized Analysis Using Potential Methods: In tree's amortized analysis, we often use the height of tree or the amount of nodes as the potential function, which satisfy \\(\\Phi(0)\\) is the minimum. To make the potential function increasing slowly, we choose \\(\\Phi(T)=\\sum_{i\\in T}S(i)\\) , where S(i) is the number of descendants of i (i included). \\(\\Phi(T)\\) is also called rank of T, notion \\(R(T)\\) Lemma: If \\(a+b\\leq c\\) then \\(loga+logb\\leq 2logc-2\\) Same as the part of algorithm analysis, there are three situations to discuss according to the picture. If the \"X\" to be pushed is one of the childs of root, we only need one rotation. Except X and P, the \"S(i)\" didn't change, and the rotation cost \\(c_i\\) is 1. So the amortized cost \\(\\^c_i=1+R_2(X)-R_1(X)+R_2(P)-R_1(P)\\) \\(\\leq 1+R_2(X)-R_1(X)\\) (shown below that $ R_2(P)<R_1(P) $) In the zig-zag case, we need two rotation, costing 2. We note that \\(R_2(X) = R_1(G) = log(the\\ number\\ of\\ nodes\\ in\\ T)\\) . So the amortized cost \\(\\^c_i=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)\\) \\(=2-R_1(X)+R_2(P)-R_1(P)+R_2(G)\\) \\(\\leq 2(R_2(X)-R_1(X))\\) (shown below that nodes: \\(P_2+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_2(P)+R_2(G)\\leq 2R_2(X)+2\\) ) * In the zig-zig case, we need two rotation, too, costing 2. We also note that \\(R_2(X) = R_1(G)\\) . So the amortized cost \\(\\^c_i=2+R_2(X)-R_1(X)+R_2(P)-R_1(P)+R_2(G)-R_1(G)\\) \\(=2-R_1(X)+R_2(P)-R_1(P)+R_2(G)\\) \\(=2-2R_1(X)+R_2(P)-R_1(P)+R_2(G)+R_1(X)\\) \\(\\leq 3(R_2(X)-R_1(X))\\) (shown below that nodes: \\(X_1+G_2<X_2,\\ so\\ according\\ to\\ lemma,\\ R_1(X)+R_2(G)\\leq 2R_2(X)+2\\) ) When splay, the former \\(3R_2(X)\\) could be eliminated by the latter item's \\(-3R_1(X)\\) . After sum of all the items, we get the amortized time complexity $$ \\^c_i \\leq 1+3(R_2(X)-R_1(X))=O(logN) $$ Similarly average time complexity is also $O(logN) $. Concerning the worst case: X is at the bottom, which depth is N(the number of nodes). Push it to root needs to rotate N times. So the worst time complexity is \\(O(N)\\) .","title":"Time Complexity"},{"location":"oop/oop/","text":"Object-Oriented Programming \u5173\u952e\u5b57/\u4e09\u5927\u7279\u6027\uff1aInheritance\uff08\u96c6\u6210\uff09 Encapsulation\uff08\u5c01\u88c5\uff09 Polymorphism(\u591a\u6001) \u6559\u6750\uff1aThinking in C++ \u53c2\u8003\uff1aC++ Primer, Ver 5 \u6210\u7ee9\u6784\u6210\uff1aLab 50%, Exam 50% Introduction \u7b2c\u4e00\u4e2aC++\u7a0b\u5e8f #include <iostream> using namespace std; int main() { cout << \"Hello, World! I am \" << 18 << \"Today!\" << endl; //endl: \u6362\u884c return 0; } \u8f93\u5165\u8f93\u51fa\u6d41 #include <iostream> using namespace std; int main() { int number; cout << \"Enter a decimal number:\"; cin >> number; cout << \"The number you entered is \" << number <<\".\" <<endl; system(\"pause\");//\u51bb\u7ed3\u5c4f\u5e55\uff0c\u4fbf\u4e8e\u89c2\u5bdf\u7ed3\u679c //not matter? return 0; } Using Objects \u4ee5\u5b57\u7b26\u4e32\u4e3a\u4f8b * \u52a0\u5934\u6587\u4ef6 * include <string> * \u5b9a\u4e49\u53d8\u91cf * string str; * \u521d\u59cb\u5316 * string str = \"hello\"; \u8bfb\u5199\u8be5\u53d8\u91cf cin >> str cout << str \u4e0eC\u4e0d\u540c\u7684\u90e8\u5206\uff1a c //C: char charr1[20];//\u9700\u8981\u6307\u5b9a\u5927\u5c0f char charr2[20]=\u201cjaguar\u201d; charr1 =charr2;//illegal, //\u56e0\u4e3a\u540d\u79f0\u6307\u5411\u56fa\u5b9a\u7684\u5730\u5740\uff0c\u4e0d\u80fd\u76f8\u4e92\u8d4b\u503c ```c++ //C++: string str1;//\u4e0d\u7528\u8003\u8651\u5185\u5b58 string str2=\u201cpanther\u201d; str1 =str2;//legal * \u5b57\u7b26\u4e32\u8fde\u63a5\uff1a c++ string str3; str3 = str1 + str2; str1 +=str2; strl +=\"lalala\"; `` * C\u5982\u679c\u672a\u521d\u59cb\u5316\u2014\u2014\u968f\u673a\u503c\uff0c\u800cC++\u5f3a\u5236\u521d\u59cb\u5316 * string str1,str2(\"hello\");` * str1: \u7a7a\uff0cstr2: hello * \u4e0e\u7c7b\u540d\u4e00\u6837\u7684\u51fd\u6570\uff1a\u6784\u9020\u51fd\u6570 \u7528 \".\" \u8fdb\u884c\u5bf9\u8c61\u884c\u4e3a str.empty();//\u5b57\u7b26\u4e32\u4e3a\u7a7a\u65f6\u8fd4\u56de1 File I/O #include <fstream>//read from and write to file ofstream File1(\"C:\\\\test.txt\"); File1<<\"Hello world\"<<std::endl;//if without using namespace std; ifstream File2(\"C:\\\\test.txt\"); std::string str1; std::string str2; File1>>str1; File2>>str2 Memory Model //global vars int i;//outside all the function string str; static int j;//static global vars: \u4ec5\u5f53\u524d\u6587\u4ef6\u53ef\u89c1 f(){ int k;//local vars. static int l;// static local vars\uff1a\u4ec5\u51fd\u6570\u5185\u53ef\u89c1\uff0c\u518d\u6b21\u8bbf\u95ee\u4fdd\u7559\u539f\u503c int* p = malloc(sizeof(int));//allocated vars. } Where: * \u4f4d\u4e8eGlobal data\uff1a * Global vars\uff1a\u53ef\u88ab\u5176\u4ed6\u6587\u4ef6\u5171\u4eab * Static global vars. * Static local vars. * \u4f4d\u4e8eStack: * local vars * \u4f4d\u4e8eHeap: * dynamically allocated vars. \u5982\u4f55\u8bbf\u95ee\u5916\u90e8\u53d8\u91cf\uff1a //text.cpp string gStrl;//outside main & other function //main.cpp extern string gStrl;//\u65e0extern\uff1a\u91cd\u5b9a\u4e49\u62a5\u9519 main() { //\u53ef\u4ee5\u8bbf\u95eegStrl } Pointer to Objects //object create string s = \"hello\";//\u5b9a\u4e49\uff0c\u6784\u9020\uff0c string* ps = &s; (*ps).length()//get the object ps->length()//call the function \u52a8\u6001\u5185\u5b58\u5206\u914d\uff1a //\u8fd4\u56de\u6307\u9488 int* p = new int; int* pStudent = new Student[10]; delete p; delete [] pStudent; //\u8fd8\u7ed9\u7cfb\u7edf Reference type& refname = name; char c; char& r = c;//a reference to c, \u6b64\u65f6\u5fc5\u987b\u5f15\u7528\uff0ccan't be null int& r = 10;//illegal, \u53ea\u80fd\u5f15\u7528\u53d8\u91cf r = 'x';//c\u4e5f\u88ab\u8d4b\u503c'x' \u5e38\u7528\u4e8e\u4f20\u53c2\uff08\u5b9e\u53c2\uff09 void f(int& x); f(y);//x\u5f15\u7528y\uff0c\u51fd\u6570\u4e2dx\u6539\u53d8\uff0c\u5916\u9762y\u4e5f\u6539\u53d8 f(y*3);//illegal int&* p;//illegal\uff0c\u6307\u5411\u5f15\u7528\u53d8\u91cf\u7684\u6307\u9488\u4e0d\u5408\u6cd5 void f(int*& p);//\u5f15\u7528\u6307\u9488 Const \u5e38\u91cf \u7528\u6765\u4ee3\u66ff\u5b8f const int x = 123;//\u5fc5\u987b\u521d\u59cb\u5316\uff0cx\u4fdd\u6301\u5e38\u6570\u503c x = 27;//illegal x++;//illegal const int y = x;//\u53ef\u4ee5\u4efb\u610f\u8d4b\u7ed9\u522b\u4eba \u7f16\u8bd1\u5668\u4f1a\u907f\u514d\u7ed9\u5b83\u5206\u914d\u5185\u5b58\uff1a\u76f4\u63a5\u5199\u5728\u8868\u8fbe\u5f0f\u4e2d \u6ca1\u6cd5\u5728\u7f16\u8bd1\u65f6\u523b\u786e\u5b9a\\\u5916\u90e8\u8981\u4f7f\u7528\u65f6\uff0c\u5206\u914d\u5185\u5b58 const string* p1 = \"ABC\";//\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u4e0d\u80fd\u66f4\u6539 //\u76f8\u5f53\u4e8estring const* p1 *p1 = \"c\";//illegal string *const p2 = \"ABC\";//\u6307\u9488\u672c\u8eab\u4e0d\u80fd\u66f4\u6539 p2 = \"hello\";//OK const\u6570\u7ec4\u2014\u2014\u4f1a\u5206\u914d\u4e00\u7247\u5185\u5b58\uff0c\u6b64\u65f6\u7f16\u8bd1\u5668\u4e0d\u77e5\u9053\u6570\u7ec4\u91cc\u7684\u503c const int i[] = { 1, 2, 3, 4 }; float f[i[3]]; // Illegal struct S { int i, j; }; const S s[] = { { 1, 2 }, { 3, 4 } }; double d[s[1].j]; // Illegal \u5f53\u9700\u8981\u4f20\u9012\u5927\u89c4\u6a21\u6570\u636e\uff08\u5982\u6570\u7ec4\uff09\u65f6\uff0c\u5e38\u7528\u6307\u9488\uff0c\u5bb9\u6613\u628a\u539f\u672c\u7684\u6570\u636e\u6539\u6389 //\u5c3d\u91cf\u7528\u6307\u9488/\u5f15\u7528+const void f(const int*x);//\u4f20\u9012\u7684\u53c2\u6570\u4e0d\u53ef\u4fee\u6539 //\u51fd\u6570f\u4e2d x++;//illegal Class \u81ea\u5df1\u8bbe\u8ba1\u5bf9\u8c61 Point //C\u7684\u5199\u6cd5 typedef struct point{ float x; float y; } Point; Point a; a.x = 1;a.y = 2; void print(const Point* p){ printf(\"%d %d\\n\",p->x,p->y); } void move(Point* p,int dx, int dy){ p->x+=dx; p->y+=dy; } Objects = Attributes + Service //C++\u5199\u6cd5 class Point{ public: void init(int x,int y); void move(int dx,int dy); void print() const; //\u884c\u4e3a\u548c\u5bf9\u8c61\u5c01\u88c5\u5728\u4e00\u8d77 private://\u4e0d\u5199public\u5c31\u662fprivate int x;//\u4e0d\u5141\u8bb8\u5916\u754c\u6539 int y; }; //implementations void Point::init(int x,int y) :: \u2014\u2014resolver\uff0c\u8868\u9762\u51fd\u6570\u5c5e\u4e8e\u8c01 <Class Name>::<function name> ::<function name> \u2014\u2014\u5168\u5c40\u51fd\u6570 //\u9012\u5f52 Container Container\u662f\u53ef\u4ee5\u88c5\u5bf9\u8c61\u7684\u5bf9\u8c61 \u57fa\u672c\u64cd\u4f5c\uff1aget()\u548c Stash\u662f\u53ef\u6269\u5c55\u7684Container Stash * \u53ef\u4ee5\u88c5\u5404\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61 * add()\u548cfetch() //Stash\u4ee3\u7801 this: the pointer to the variable \u81ea\u52a8\u5b58\u5728\uff0c\u4e0d\u9700\u58f0\u660e","title":"Basis"},{"location":"oop/oop/#object-oriented-programming","text":"\u5173\u952e\u5b57/\u4e09\u5927\u7279\u6027\uff1aInheritance\uff08\u96c6\u6210\uff09 Encapsulation\uff08\u5c01\u88c5\uff09 Polymorphism(\u591a\u6001) \u6559\u6750\uff1aThinking in C++ \u53c2\u8003\uff1aC++ Primer, Ver 5 \u6210\u7ee9\u6784\u6210\uff1aLab 50%, Exam 50%","title":"Object-Oriented Programming"},{"location":"oop/oop/#introduction","text":"\u7b2c\u4e00\u4e2aC++\u7a0b\u5e8f #include <iostream> using namespace std; int main() { cout << \"Hello, World! I am \" << 18 << \"Today!\" << endl; //endl: \u6362\u884c return 0; } \u8f93\u5165\u8f93\u51fa\u6d41 #include <iostream> using namespace std; int main() { int number; cout << \"Enter a decimal number:\"; cin >> number; cout << \"The number you entered is \" << number <<\".\" <<endl; system(\"pause\");//\u51bb\u7ed3\u5c4f\u5e55\uff0c\u4fbf\u4e8e\u89c2\u5bdf\u7ed3\u679c //not matter? return 0; }","title":"Introduction"},{"location":"oop/oop/#using-objects","text":"\u4ee5\u5b57\u7b26\u4e32\u4e3a\u4f8b * \u52a0\u5934\u6587\u4ef6 * include <string> * \u5b9a\u4e49\u53d8\u91cf * string str; * \u521d\u59cb\u5316 * string str = \"hello\"; \u8bfb\u5199\u8be5\u53d8\u91cf cin >> str cout << str \u4e0eC\u4e0d\u540c\u7684\u90e8\u5206\uff1a c //C: char charr1[20];//\u9700\u8981\u6307\u5b9a\u5927\u5c0f char charr2[20]=\u201cjaguar\u201d; charr1 =charr2;//illegal, //\u56e0\u4e3a\u540d\u79f0\u6307\u5411\u56fa\u5b9a\u7684\u5730\u5740\uff0c\u4e0d\u80fd\u76f8\u4e92\u8d4b\u503c ```c++ //C++: string str1;//\u4e0d\u7528\u8003\u8651\u5185\u5b58 string str2=\u201cpanther\u201d; str1 =str2;//legal * \u5b57\u7b26\u4e32\u8fde\u63a5\uff1a c++ string str3; str3 = str1 + str2; str1 +=str2; strl +=\"lalala\"; `` * C\u5982\u679c\u672a\u521d\u59cb\u5316\u2014\u2014\u968f\u673a\u503c\uff0c\u800cC++\u5f3a\u5236\u521d\u59cb\u5316 * string str1,str2(\"hello\");` * str1: \u7a7a\uff0cstr2: hello * \u4e0e\u7c7b\u540d\u4e00\u6837\u7684\u51fd\u6570\uff1a\u6784\u9020\u51fd\u6570 \u7528 \".\" \u8fdb\u884c\u5bf9\u8c61\u884c\u4e3a str.empty();//\u5b57\u7b26\u4e32\u4e3a\u7a7a\u65f6\u8fd4\u56de1","title":"Using Objects"},{"location":"oop/oop/#file-io","text":"#include <fstream>//read from and write to file ofstream File1(\"C:\\\\test.txt\"); File1<<\"Hello world\"<<std::endl;//if without using namespace std; ifstream File2(\"C:\\\\test.txt\"); std::string str1; std::string str2; File1>>str1; File2>>str2","title":"File I/O"},{"location":"oop/oop/#memory-model","text":"//global vars int i;//outside all the function string str; static int j;//static global vars: \u4ec5\u5f53\u524d\u6587\u4ef6\u53ef\u89c1 f(){ int k;//local vars. static int l;// static local vars\uff1a\u4ec5\u51fd\u6570\u5185\u53ef\u89c1\uff0c\u518d\u6b21\u8bbf\u95ee\u4fdd\u7559\u539f\u503c int* p = malloc(sizeof(int));//allocated vars. } Where: * \u4f4d\u4e8eGlobal data\uff1a * Global vars\uff1a\u53ef\u88ab\u5176\u4ed6\u6587\u4ef6\u5171\u4eab * Static global vars. * Static local vars. * \u4f4d\u4e8eStack: * local vars * \u4f4d\u4e8eHeap: * dynamically allocated vars. \u5982\u4f55\u8bbf\u95ee\u5916\u90e8\u53d8\u91cf\uff1a //text.cpp string gStrl;//outside main & other function //main.cpp extern string gStrl;//\u65e0extern\uff1a\u91cd\u5b9a\u4e49\u62a5\u9519 main() { //\u53ef\u4ee5\u8bbf\u95eegStrl }","title":"Memory Model"},{"location":"oop/oop/#pointer-to-objects","text":"//object create string s = \"hello\";//\u5b9a\u4e49\uff0c\u6784\u9020\uff0c string* ps = &s; (*ps).length()//get the object ps->length()//call the function \u52a8\u6001\u5185\u5b58\u5206\u914d\uff1a //\u8fd4\u56de\u6307\u9488 int* p = new int; int* pStudent = new Student[10]; delete p; delete [] pStudent; //\u8fd8\u7ed9\u7cfb\u7edf","title":"Pointer to Objects"},{"location":"oop/oop/#reference","text":"type& refname = name; char c; char& r = c;//a reference to c, \u6b64\u65f6\u5fc5\u987b\u5f15\u7528\uff0ccan't be null int& r = 10;//illegal, \u53ea\u80fd\u5f15\u7528\u53d8\u91cf r = 'x';//c\u4e5f\u88ab\u8d4b\u503c'x' \u5e38\u7528\u4e8e\u4f20\u53c2\uff08\u5b9e\u53c2\uff09 void f(int& x); f(y);//x\u5f15\u7528y\uff0c\u51fd\u6570\u4e2dx\u6539\u53d8\uff0c\u5916\u9762y\u4e5f\u6539\u53d8 f(y*3);//illegal int&* p;//illegal\uff0c\u6307\u5411\u5f15\u7528\u53d8\u91cf\u7684\u6307\u9488\u4e0d\u5408\u6cd5 void f(int*& p);//\u5f15\u7528\u6307\u9488","title":"Reference"},{"location":"oop/oop/#const","text":"\u7528\u6765\u4ee3\u66ff\u5b8f const int x = 123;//\u5fc5\u987b\u521d\u59cb\u5316\uff0cx\u4fdd\u6301\u5e38\u6570\u503c x = 27;//illegal x++;//illegal const int y = x;//\u53ef\u4ee5\u4efb\u610f\u8d4b\u7ed9\u522b\u4eba \u7f16\u8bd1\u5668\u4f1a\u907f\u514d\u7ed9\u5b83\u5206\u914d\u5185\u5b58\uff1a\u76f4\u63a5\u5199\u5728\u8868\u8fbe\u5f0f\u4e2d \u6ca1\u6cd5\u5728\u7f16\u8bd1\u65f6\u523b\u786e\u5b9a\\\u5916\u90e8\u8981\u4f7f\u7528\u65f6\uff0c\u5206\u914d\u5185\u5b58 const string* p1 = \"ABC\";//\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u4e0d\u80fd\u66f4\u6539 //\u76f8\u5f53\u4e8estring const* p1 *p1 = \"c\";//illegal string *const p2 = \"ABC\";//\u6307\u9488\u672c\u8eab\u4e0d\u80fd\u66f4\u6539 p2 = \"hello\";//OK const\u6570\u7ec4\u2014\u2014\u4f1a\u5206\u914d\u4e00\u7247\u5185\u5b58\uff0c\u6b64\u65f6\u7f16\u8bd1\u5668\u4e0d\u77e5\u9053\u6570\u7ec4\u91cc\u7684\u503c const int i[] = { 1, 2, 3, 4 }; float f[i[3]]; // Illegal struct S { int i, j; }; const S s[] = { { 1, 2 }, { 3, 4 } }; double d[s[1].j]; // Illegal \u5f53\u9700\u8981\u4f20\u9012\u5927\u89c4\u6a21\u6570\u636e\uff08\u5982\u6570\u7ec4\uff09\u65f6\uff0c\u5e38\u7528\u6307\u9488\uff0c\u5bb9\u6613\u628a\u539f\u672c\u7684\u6570\u636e\u6539\u6389 //\u5c3d\u91cf\u7528\u6307\u9488/\u5f15\u7528+const void f(const int*x);//\u4f20\u9012\u7684\u53c2\u6570\u4e0d\u53ef\u4fee\u6539 //\u51fd\u6570f\u4e2d x++;//illegal","title":"Const \u5e38\u91cf"},{"location":"oop/oop/#class","text":"\u81ea\u5df1\u8bbe\u8ba1\u5bf9\u8c61","title":"Class"},{"location":"oop/oop/#point","text":"//C\u7684\u5199\u6cd5 typedef struct point{ float x; float y; } Point; Point a; a.x = 1;a.y = 2; void print(const Point* p){ printf(\"%d %d\\n\",p->x,p->y); } void move(Point* p,int dx, int dy){ p->x+=dx; p->y+=dy; } Objects = Attributes + Service //C++\u5199\u6cd5 class Point{ public: void init(int x,int y); void move(int dx,int dy); void print() const; //\u884c\u4e3a\u548c\u5bf9\u8c61\u5c01\u88c5\u5728\u4e00\u8d77 private://\u4e0d\u5199public\u5c31\u662fprivate int x;//\u4e0d\u5141\u8bb8\u5916\u754c\u6539 int y; }; //implementations void Point::init(int x,int y) :: \u2014\u2014resolver\uff0c\u8868\u9762\u51fd\u6570\u5c5e\u4e8e\u8c01 <Class Name>::<function name> ::<function name> \u2014\u2014\u5168\u5c40\u51fd\u6570 //\u9012\u5f52","title":"Point"},{"location":"oop/oop/#container","text":"Container\u662f\u53ef\u4ee5\u88c5\u5bf9\u8c61\u7684\u5bf9\u8c61 \u57fa\u672c\u64cd\u4f5c\uff1aget()\u548c Stash\u662f\u53ef\u6269\u5c55\u7684Container Stash * \u53ef\u4ee5\u88c5\u5404\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61 * add()\u548cfetch() //Stash\u4ee3\u7801","title":"Container"},{"location":"oop/oop/#this-the-pointer-to-the-variable","text":"\u81ea\u52a8\u5b58\u5728\uff0c\u4e0d\u9700\u58f0\u660e","title":"this: the pointer to the variable"}]}